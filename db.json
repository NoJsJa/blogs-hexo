{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/photography/photo/wx.jpeg","path":"photography/photo/wx.jpeg","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-11.png","path":"img/article/Ubuntu18.04-11.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-13.png","path":"img/article/Ubuntu18.04-13.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-2.png","path":"img/article/Ubuntu18.04-2.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-3.png","path":"img/article/Ubuntu18.04-3.png","modified":0,"renderable":0},{"_id":"source/img/article/dev-tools-storage2.png","path":"img/article/dev-tools-storage2.png","modified":0,"renderable":0},{"_id":"source/img/article/node_pipe.png","path":"img/article/node_pipe.png","modified":0,"renderable":0},{"_id":"source/img/article/snapshot.png","path":"img/article/snapshot.png","modified":0,"renderable":0},{"_id":"source/img/article/snapshot_select.png","path":"img/article/snapshot_select.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-1.png","path":"img/article/tree-1.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-2.png","path":"img/article/tree-2.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-3.png","path":"img/article/tree-3.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-5.png","path":"img/article/tree-5.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-6.png","path":"img/article/tree-6.png","modified":0,"renderable":0},{"_id":"source/img/article/upload.png","path":"img/article/upload.png","modified":0,"renderable":0},{"_id":"source/img/article/waterfall-2.jpg","path":"img/article/waterfall-2.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar/nojsja.jpeg","path":"img/avatar/nojsja.jpeg","modified":0,"renderable":0},{"_id":"themes/snail/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-common-dark.css","path":"css/dusign-common-dark.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-common-light.css","path":"css/dusign-common-light.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-dark.css","path":"css/dusign-dark.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-light.css","path":"css/dusign-light.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.star.css","path":"css/font-awesome.star.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/fonts.googleapis.css","path":"css/fonts.googleapis.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/photography.css","path":"css/photography.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/img/cd.png","path":"img/cd.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/cd_tou.png","path":"img/cd_tou.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":1},{"_id":"themes/snail/source/img/notice.png","path":"img/notice.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/top-light.png","path":"img/top-light.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/tp.png","path":"img/tp.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/wave-dark.png","path":"img/wave-dark.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/wave-light.png","path":"img/wave-light.png","modified":0,"renderable":1},{"_id":"themes/snail/source/js/canvas-nest.js","path":"js/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/line.js","path":"js/line.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/mouse-click.js","path":"js/mouse-click.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/ribbonStatic.js","path":"js/ribbonStatic.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/article/Fly.jpg","path":"img/article/Fly.jpg","modified":0,"renderable":0},{"_id":"source/img/article/dev-tools-debug.png","path":"img/article/dev-tools-debug.png","modified":0,"renderable":0},{"_id":"source/img/article/dev-tools-storage.png","path":"img/article/dev-tools-storage.png","modified":0,"renderable":0},{"_id":"source/img/article/lifeIsStrange.jpg","path":"img/article/lifeIsStrange.jpg","modified":0,"renderable":0},{"_id":"source/img/article/mobx9.png","path":"img/article/mobx9.png","modified":0,"renderable":0},{"_id":"source/img/article/shards_upload.jpg","path":"img/article/shards_upload.jpg","modified":0,"renderable":0},{"_id":"source/img/article/tree-4.png","path":"img/article/tree-4.png","modified":0,"renderable":0},{"_id":"source/img/article/waterfall-3.jpg","path":"img/article/waterfall-3.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"themes/snail/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/snail/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/article/Ubuntu18.04-1.jpg","path":"img/article/Ubuntu18.04-1.jpg","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-10.png","path":"img/article/Ubuntu18.04-10.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-12.png","path":"img/article/Ubuntu18.04-12.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-9.png","path":"img/article/Ubuntu18.04-9.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx1.png","path":"img/article/mobx1.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx4.png","path":"img/article/mobx4.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx2.png","path":"img/article/mobx2.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx6.png","path":"img/article/mobx6.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx8.png","path":"img/article/mobx8.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx5.png","path":"img/article/mobx5.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx3.png","path":"img/article/mobx3.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-bug1.gif","path":"img/article/tree-bug1.gif","modified":0,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/snail/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/snail/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/snail/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","modified":0,"renderable":1},{"_id":"source/img/article/Ubuntu18.04-5.png","path":"img/article/Ubuntu18.04-5.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-8.png","path":"img/article/Ubuntu18.04-8.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-7.png","path":"img/article/Ubuntu18.04-7.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx10.png","path":"img/article/mobx10.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-bug-fix.gif","path":"img/article/tree-bug-fix.gif","modified":0,"renderable":0},{"_id":"themes/snail/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/article/Ubuntu18.04-14.png","path":"img/article/Ubuntu18.04-14.png","modified":0,"renderable":0},{"_id":"source/img/article/dev-tools.png","path":"img/article/dev-tools.png","modified":0,"renderable":0},{"_id":"source/img/article/tree-bug2.gif","path":"img/article/tree-bug2.gif","modified":0,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":0,"renderable":0},{"_id":"source/img/article/Ubuntu18.04-6.png","path":"img/article/Ubuntu18.04-6.png","modified":0,"renderable":0},{"_id":"source/img/article/mobx7.png","path":"img/article/mobx7.png","modified":0,"renderable":0},{"_id":"source/img/article/Desktop2.png","path":"img/article/Desktop2.png","modified":0,"renderable":0},{"_id":"source/img/article/Desktop3.png","path":"img/article/Desktop3.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":0,"renderable":0},{"_id":"themes/snail/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/img/header_img/home3.jpg","path":"img/header_img/home3.jpg","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/img/article/Desktop.png","path":"img/article/Desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/img/article/animation.gif","path":"img/article/animation.gif","modified":0,"renderable":0},{"_id":"source/img/article/city.jpg","path":"img/article/city.jpg","modified":0,"renderable":0},{"_id":"source/img/article/waterfall-1.gif","path":"img/article/waterfall-1.gif","modified":0,"renderable":0},{"_id":"source/img/tp.png","path":"img/tp.png","modified":0,"renderable":0},{"_id":"source/img/header_img/photography-bg.jpeg","path":"img/header_img/photography-bg.jpeg","modified":0,"renderable":0},{"_id":"source/img/wave-light.png","path":"img/wave-light.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.jpg","path":"img/header_img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.jpg","path":"img/header_img/archive-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/categories-bg.jpg","path":"img/header_img/categories-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/cd.png","path":"img/cd.png","modified":0,"renderable":0},{"_id":"source/img/cd_tou.png","path":"img/cd_tou.png","modified":0,"renderable":0},{"_id":"source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":0},{"_id":"source/img/notice.png","path":"img/notice.png","modified":0,"renderable":0},{"_id":"source/img/top-light.png","path":"img/top-light.png","modified":0,"renderable":0},{"_id":"source/img/wave-dark.png","path":"img/wave-dark.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tinified.zip","path":"img/header_img/tinified.zip","modified":0,"renderable":0},{"_id":"source/img/article/electron-lang.png","path":"img/article/electron-lang.png","modified":0,"renderable":0},{"_id":"source/img/article/smb_node.jpg","path":"img/article/smb_node.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_share.jpg","path":"img/article/smb_share.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_node_conf.jpg","path":"img/article/smb_node_conf.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_share_mount.jpg","path":"img/article/smb_share_mount.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_upload_now.jpg","path":"img/article/smb_upload_now.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_dir.jpg","path":"img/article/smb_dir.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_shutdown.jpg","path":"img/article/smb_shutdown.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_upload_record.jpg","path":"img/article/smb_upload_record.jpg","modified":0,"renderable":0},{"_id":"source/img/article/smb_login.jpg","path":"img/article/smb_login.jpg","modified":0,"renderable":0},{"_id":"source/img/article/electron1.png","path":"img/article/electron1.png","modified":0,"renderable":0},{"_id":"source/img/article/upload_performance.jpg","path":"img/article/upload_performance.jpg","modified":0,"renderable":0},{"_id":"source/img/article/upload_memory.jpg","path":"img/article/upload_memory.jpg","modified":0,"renderable":0},{"_id":"source/img/article/chromium.jpg","path":"img/article/chromium.jpg","modified":0,"renderable":0},{"_id":"source/img/article/inspect.jpg","path":"img/article/inspect.jpg","modified":0,"renderable":0},{"_id":"source/img/article/refreshTasks.jpg","path":"img/article/refreshTasks.jpg","modified":0,"renderable":0},{"_id":"themes/snail/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/MathJax.js","path":"js/MathJax.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/buttons.js","path":"js/buttons.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"690fed92322a4e9bf00266b0d7af4e0a6066031e","modified":1591842120651},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1591842120651},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1591842120651},{"_id":"source/robots.txt","hash":"a501cb86e0537a749c344cb413bace53b49b147c","modified":1591842120755},{"_id":"source/.vscode/settings.json","hash":"2978e14530291b98156c1a339a673c6ebb7c8a76","modified":1591842120651},{"_id":"source/_posts/.DS_Store","hash":"a04ebe66fb85ce923d4ac52d351b7da0babaa3bd","modified":1591842120651},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"e2318240f9a732bf99f74e24b5e7ea5999e6d694","modified":1591842120651},{"_id":"source/_posts/.Ulysses-favorites.plist","hash":"6d4538be93ccf0de1ae3c62bc2c35b399a1f96eb","modified":1591842120651},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail.md","hash":"f7762502792d2b4c3d267d7b69383b84857ae467","modified":1591842120651},{"_id":"source/about/index.md","hash":"cb6a648e31b477145409981f518b1e64479c6d25","modified":1597996704727},{"_id":"source/archive/index.md","hash":"d63d51339384b2e5c6dd3a15cdc2ebacb941534c","modified":1591842120663},{"_id":"source/categories/index.md","hash":"21d19b60e8ff657b5073559a3999827f984be754","modified":1591842120663},{"_id":"source/photography/.DS_Store","hash":"c32d51d0256164cf945e248f1d562d88ebf08b44","modified":1591842120715},{"_id":"source/photography/index.md","hash":"3dcc41fb8239608be000f3c3eb65256dd0cf7376","modified":1591854942303},{"_id":"source/img/.DS_Store","hash":"c8eb7d4770d557f07789af0d7d33bebba448f5a8","modified":1591842120663},{"_id":"source/img/ironman-draw.png","hash":"bf6b382fe359ae325b72c485c1eb73ee024b4dc1","modified":1591842120715},{"_id":"source/tags/index.md","hash":"f43ff71cb3947205af39adf07e182f4b70fdde33","modified":1591842120755},{"_id":"source/_posts/.vscode/settings.json","hash":"2978e14530291b98156c1a339a673c6ebb7c8a76","modified":1591842120651},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail/.DS_Store","hash":"6418817d2a63f0fdf6742804966dcf7c8929b803","modified":1591842120651},{"_id":"source/photography/photo/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1591842120715},{"_id":"source/img/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1591842120663},{"_id":"source/img/header_img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1591842120667},{"_id":"source/img/signature/.DS_Store","hash":"5d4742a3eec02334dd2df5ab57fea2a143933757","modified":1591842120715},{"_id":"source/img/signature/Just-do-it-white.png","hash":"c66314974b30c23ae9da2f7e57ca1ead65f00e28","modified":1591842120715},{"_id":"source/img/signature/dusign.png","hash":"cbfb2ac6910c0ad4263f300afcdaf13060257976","modified":1591842120715},{"_id":"source/img/default.jpg","hash":"22910d296bc4d2a687e1d2c3583d984d77ff119b","modified":1591855279388},{"_id":"source/img/header_img/categories-bg.jpg","hash":"aa83bedb9e15aa971fbf7951e9924397c4a22f54","modified":1591831354000},{"_id":"source/photography/photo/yc.jpeg","hash":"89f97217bbe2cb01429fcbf3699349446c16c971","modified":1591842120739},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail/snail-bg.jpg","hash":"91b8cdf0418c78dc45fd736c5185f96c8c4817ae","modified":1591842120655},{"_id":"source/photography/photo/wx.jpeg","hash":"2ce216e2bf8f652b16a340486f6177ba9c8b951f","modified":1591842120739},{"_id":"source/img/header_img/tag-bg.jpg","hash":"abc6dd1036b1abb9f040e7fcabeb5fecca63f59f","modified":1591842120715},{"_id":"source/photography/photo/yjyj3.jpeg","hash":"ecdee68745d94231d4dd8c1bade75e8cb62092fc","modified":1591842120751},{"_id":"source/photography/photo/yjyj2.jpeg","hash":"a2d79feac358d68c8e9b2dd96afd69f7ba31bb7b","modified":1591842120747},{"_id":"source/img/header_img/photography-bg.jpeg","hash":"bf09062486ed9ffb7af99649cf465a5de38f5f26","modified":1591860258527},{"_id":"source/photography/photo/dfmz.jpeg","hash":"e1bbfe0c2ecba12c936ba31066b92fafcd934bca","modified":1591842120723},{"_id":"source/photography/photo/yjyj1.jpeg","hash":"17e1c0b8b3732130c011b216a0569a52ddd78f4b","modified":1591842120743},{"_id":"source/photography/photo/ly.jpeg","hash":"ae4d91d457ee3d4930335655d85e12055842b684","modified":1591842120735},{"_id":"source/img/header_img/home-bg-1-dark.jpg","hash":"73afc05be88af73c70f3e736a057169b3c08ef31","modified":1591842120711},{"_id":"source/photography/photo/lsqs.jpeg","hash":"60e16189fc372bafcd1c1b3ff5938e65cda084a0","modified":1591842120731},{"_id":"source/img/header_img/archive-bg.jpg","hash":"ede78596f2b62e73d7d92118851d6a92e6de2450","modified":1591860278820},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"157de39599633984edaf15dd6ece681e7e55dd65","modified":1591842120687},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail/snail.png","hash":"9741ada00e6f5684efce9649c0631590f5ffe4a2","modified":1591842120663},{"_id":"public/baidusitemap.xml","hash":"e311880a3bc0d8b2b212a56d9128225f57d593d6","modified":1598334736935},{"_id":"public/search.xml","hash":"2faf1799438a8fb43338241f248b88365d3de73c","modified":1598334736935},{"_id":"public/sitemap.xml","hash":"bb31a8c8c15055393c4196266c0cee2d50645ef7","modified":1598334736935},{"_id":"public/404.html","hash":"762ddce5f3e4109e6b4434ee7883222f8bfcc36c","modified":1597996130824},{"_id":"public/about/index.html","hash":"6ee509b2b06549ab9b0b725e19ae45abaaa2923b","modified":1597996785995},{"_id":"public/archive/index.html","hash":"00e2822a24e8a830715043c37506f4c760553e00","modified":1597996130824},{"_id":"public/categories/index.html","hash":"fd02107e4d4c5842b374b1ac321cdfdce4514e34","modified":1597996130824},{"_id":"public/photography/index.html","hash":"e1b6278029aa49f047fae8faaf45bd82f2f3d63a","modified":1597996130824},{"_id":"public/tags/index.html","hash":"d7258a8d5627cd1afb6a0bc42c3c4d7e1df21fe8","modified":1597996130824},{"_id":"public/2019/11/01/Hexo-Theme-Snail/index.html","hash":"b9e59985520a2f326ad42b2838e7f02e9212ce1c","modified":1591859819834},{"_id":"public/archives/index.html","hash":"e39914b8101f0b88330ca5db03c6d6ad7a5b46cb","modified":1597996130824},{"_id":"public/archives/2019/index.html","hash":"6dd4a5496e218085381ccaba9394e8b5ae7cfd7f","modified":1597996130824},{"_id":"public/archives/2019/11/index.html","hash":"82d85f051f774fd35f3a473e8e7eb408c5fb9751","modified":1591859819834},{"_id":"public/categories/hexo/index.html","hash":"1d880b776b808c44fc6ebb185f29635e0c95407b","modified":1591859819834},{"_id":"public/index.html","hash":"47a253fd8bb7820ee6a77ceab9464fe6c2d7d230","modified":1598334736935},{"_id":"public/tags/hexo-theme-snail/index.html","hash":"b04f5b18fb9c435f3d9e058c3a96b2c018ca580f","modified":1591859819834},{"_id":"public/robots.txt","hash":"a501cb86e0537a749c344cb413bace53b49b147c","modified":1597904962023},{"_id":"public/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1597904962023},{"_id":"public/img/ironman-draw.png","hash":"bf6b382fe359ae325b72c485c1eb73ee024b4dc1","modified":1591842460515},{"_id":"public/img/signature/Just-do-it-white.png","hash":"c66314974b30c23ae9da2f7e57ca1ead65f00e28","modified":1591842460515},{"_id":"public/img/signature/dusign.png","hash":"cbfb2ac6910c0ad4263f300afcdaf13060257976","modified":1591842460515},{"_id":"public/img/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1591842460515},{"_id":"public/img/header_img/categories-bg.jpg","hash":"aa83bedb9e15aa971fbf7951e9924397c4a22f54","modified":1597904962023},{"_id":"public/img/default.jpg","hash":"fc75240d2a5e0b2627360cc8b956e6a43849f5dc","modified":1597996130824},{"_id":"public/2019/11/01/Hexo-Theme-Snail/snail-bg.jpg","hash":"91b8cdf0418c78dc45fd736c5185f96c8c4817ae","modified":1591854708887},{"_id":"public/photography/photo/yc.jpeg","hash":"89f97217bbe2cb01429fcbf3699349446c16c971","modified":1591854708887},{"_id":"public/photography/photo/wx.jpeg","hash":"2ce216e2bf8f652b16a340486f6177ba9c8b951f","modified":1597904962023},{"_id":"public/img/header_img/tag-bg.jpg","hash":"674cbdd26a0008f5417a2c5cf6d58d4087f66a16","modified":1597996130824},{"_id":"public/photography/photo/yjyj3.jpeg","hash":"ecdee68745d94231d4dd8c1bade75e8cb62092fc","modified":1591854708887},{"_id":"public/photography/photo/yjyj2.jpeg","hash":"a2d79feac358d68c8e9b2dd96afd69f7ba31bb7b","modified":1591854708887},{"_id":"public/img/header_img/photography-bg.jpeg","hash":"bf09062486ed9ffb7af99649cf465a5de38f5f26","modified":1597904962023},{"_id":"public/photography/photo/dfmz.jpeg","hash":"e1bbfe0c2ecba12c936ba31066b92fafcd934bca","modified":1591854708887},{"_id":"public/photography/photo/yjyj1.jpeg","hash":"17e1c0b8b3732130c011b216a0569a52ddd78f4b","modified":1591854708887},{"_id":"public/photography/photo/ly.jpeg","hash":"ae4d91d457ee3d4930335655d85e12055842b684","modified":1591854708887},{"_id":"public/img/header_img/home-bg-1-dark.jpg","hash":"73afc05be88af73c70f3e736a057169b3c08ef31","modified":1591842460515},{"_id":"public/photography/photo/lsqs.jpeg","hash":"60e16189fc372bafcd1c1b3ff5938e65cda084a0","modified":1591854708887},{"_id":"public/img/header_img/archive-bg.jpg","hash":"ede78596f2b62e73d7d92118851d6a92e6de2450","modified":1597904962023},{"_id":"public/img/header_img/Iron-Man-3.jpg","hash":"157de39599633984edaf15dd6ece681e7e55dd65","modified":1591842460515},{"_id":"public/2019/11/01/Hexo-Theme-Snail/snail.png","hash":"9741ada00e6f5684efce9649c0631590f5ffe4a2","modified":1591854708887},{"_id":"themes/snail/.DS_Store","hash":"783a3e27be97b986d0aa6bcc8e7334c52d17961c","modified":1591842120635},{"_id":"themes/snail/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1591842120635},{"_id":"themes/snail/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1591842120635},{"_id":"themes/snail/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1591842120635},{"_id":"themes/snail/layout/.DS_Store","hash":"e45cdab01049822593cf65f23f18a828ea573ab9","modified":1591842120635},{"_id":"themes/snail/layout/about.ejs","hash":"a946b4a2467fbc4709b8615f769936152a9f7f8a","modified":1591842120635},{"_id":"themes/snail/layout/categories.ejs","hash":"fb74aa2ce5a03ae5ffdbccbde20111b92e544c16","modified":1591842120635},{"_id":"themes/snail/layout/index.ejs","hash":"242a1d8784283a1d41bf64e4dc4abf70810b9ffb","modified":1591847503438},{"_id":"themes/snail/layout/archive.ejs","hash":"f8a1da07f95c2c8d042a56fe91e0f5f17998886b","modified":1597996117318},{"_id":"themes/snail/layout/page.ejs","hash":"81ed91a585e2037e50d02404b1a28127ac1013c4","modified":1591842120635},{"_id":"themes/snail/layout/keynote.ejs","hash":"76adf10eef9057cd6115866b1e8a91796d15dff0","modified":1591842120635},{"_id":"themes/snail/layout/layout.ejs","hash":"557f2b97022c02d57555385dd9d50030ee6a2a50","modified":1591858517298},{"_id":"themes/snail/layout/post.ejs","hash":"e5dd8ab29adb5a8f7290603b6036435141dd11b0","modified":1597748587881},{"_id":"themes/snail/layout/photography.ejs","hash":"410a5b47af046b79b6f3ab8fd906e1af2c9da914","modified":1591842120635},{"_id":"themes/snail/layout/tags.ejs","hash":"369b73aba39607ba51280bb611037dba04d633fb","modified":1591842120635},{"_id":"themes/snail/source/.DS_Store","hash":"ed06a70def8b481e44815adacc512b1dd1ca9d08","modified":1591842120635},{"_id":"source/img/article/Ubuntu18.04-11.png","hash":"8ae8ed9c52709ffdde63ef92ed26578e87e05cce","modified":1586108677372},{"_id":"source/img/article/Ubuntu18.04-13.png","hash":"2f929624df2751c01731ed1ba21cda2ffb7d7092","modified":1586108677376},{"_id":"source/img/article/Ubuntu18.04-2.png","hash":"63ab9b51046225b0846b88664d90cacc1db4aab3","modified":1586108677376},{"_id":"source/img/article/Ubuntu18.04-3.png","hash":"f331b6722e7cf2035e00f1dd307c58a2379b0c7f","modified":1586108677376},{"_id":"source/img/article/dev-tools-storage2.png","hash":"a53c1d7f58f5fc2052d449e35ff4bcaaf3e1d22a","modified":1587095578980},{"_id":"source/img/article/node_pipe.png","hash":"15c7b639515b467910837bb5f2ef1a1a25f66909","modified":1586108677392},{"_id":"source/img/article/snapshot.png","hash":"3a129083f67b48903e4ae97b03f4f4512bff7d38","modified":1586108677396},{"_id":"source/img/article/snapshot_select.png","hash":"824dd884cf2adb5e242e4f9ea0fa6e01f8f2bb90","modified":1586108677396},{"_id":"source/img/article/tree-1.png","hash":"578e4bdb1137ef445656eb97ee67c435f19a8d06","modified":1586108677396},{"_id":"source/img/article/tree-2.png","hash":"a62ee08694c713d651e0172c1599e079ad63737d","modified":1586108677396},{"_id":"source/img/article/tree-3.png","hash":"db2dd99b4426807d07e845c53d951a4ddb2ea674","modified":1586108677396},{"_id":"source/img/article/tree-5.png","hash":"4d50533df3958632bc7099d7bbe49e0daffbed18","modified":1586108677396},{"_id":"source/img/article/tree-6.png","hash":"a14dd20862d5cfabd75e921a58bab86b6dc479b6","modified":1586108677396},{"_id":"source/img/article/upload.png","hash":"2ff71d516e47ee8826ecda7484b454cb7d3e719f","modified":1586108677400},{"_id":"source/img/article/waterfall-2.jpg","hash":"4d7458625acd7ac9b3768b84c32fee7b5572776d","modified":1586108677404},{"_id":"source/img/avatar/nojsja.jpeg","hash":"71fc59f8b263f90563e6f4f7c91efac2c7c97921","modified":1586108677408},{"_id":"themes/snail/layout/_partial/comment.ejs","hash":"7c372b1182a351b7491e7507e6a3d1e9b90bdfe6","modified":1597815317160},{"_id":"themes/snail/layout/_partial/footer.ejs","hash":"53ad56f2e5fb16a0b2e34b349576a109dbb2b06c","modified":1597994609908},{"_id":"themes/snail/layout/_partial/.DS_Store","hash":"b67df80bf88e0f64ba66ad760f724d8c44d2c390","modified":1591842120635},{"_id":"themes/snail/layout/_partial/header.ejs","hash":"a38796629f6e7e41d273bdb729516664c802fdae","modified":1597815607933},{"_id":"themes/snail/layout/_partial/head.ejs","hash":"a2ca408627482c6ad19647c303191cf3e50a3238","modified":1597995359055},{"_id":"themes/snail/layout/_partial/music.ejs","hash":"5c83764bb26191f1a21a0e9ca1de0471a37b6405","modified":1597819552986},{"_id":"themes/snail/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1591842120635},{"_id":"themes/snail/layout/_partial/nav.ejs","hash":"0cd8a7bc62d8fba92ec56a8d5486b11cb85489ee","modified":1591842120635},{"_id":"themes/snail/layout/_partial/star.ejs","hash":"eec08202adbea86e9f53c7dfa7813833bdb343e7","modified":1591842120635},{"_id":"themes/snail/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1591842120635},{"_id":"themes/snail/layout/_partial/toc.ejs","hash":"6fb56caac9f6cc7701edf8c6505c007c9562e0fb","modified":1591842120635},{"_id":"themes/snail/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1591842120635},{"_id":"themes/snail/layout/_widget/.DS_Store","hash":"9c0d84234456e5db3004fe76dd78d0d93efe3fc5","modified":1591842120635},{"_id":"themes/snail/layout/_widget/category.ejs","hash":"710139c577fbb38bd23d996bfc32858da9b55d05","modified":1591848113900},{"_id":"themes/snail/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1591842120635},{"_id":"themes/snail/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1591842120635},{"_id":"themes/snail/layout/_widget/recent-posts.ejs","hash":"ce2bf0c00940ef1afda73f73875ac90b6e86d748","modified":1591842120635},{"_id":"themes/snail/layout/_widget/search.ejs","hash":"5138e624a0f20abcac0132e3e5bddf4698109ed0","modified":1591842120635},{"_id":"themes/snail/layout/_widget/short-about.ejs","hash":"98041b95d0f7a24f15f2e0d70b1481a929d9a52e","modified":1591859360244},{"_id":"themes/snail/layout/_widget/visitor.ejs","hash":"5d8505f7c0e0e01ace05f1c259e8d56289a6eebd","modified":1591847200893},{"_id":"themes/snail/source/css/.DS_Store","hash":"0cff62c01dffa557aea8139bec65d19bab1a406b","modified":1591842120635},{"_id":"themes/snail/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1591842120635},{"_id":"themes/snail/source/css/dusign-common-dark.css","hash":"09c1d5e4d5d623ca1b0f27975860625c48332b92","modified":1591842120635},{"_id":"themes/snail/source/css/dusign-common-light.css","hash":"11f0d1a854b0ef803a0f0d9c6b744b3ed74253bf","modified":1591842120635},{"_id":"themes/snail/source/css/dusign-dark.css","hash":"d27c92dbcde4253e29f67756eb4499c193a11a27","modified":1591852603965},{"_id":"themes/snail/source/css/dusign-light.css","hash":"49c488e96feecbae8a0e8dc070670d3c36a94fb4","modified":1597996614471},{"_id":"themes/snail/source/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1591842120639},{"_id":"themes/snail/source/css/font-awesome.star.css","hash":"5e536c20b1633dd798b27b1860292edb00bdc5e4","modified":1591842120639},{"_id":"themes/snail/source/css/fonts.googleapis.css","hash":"61735f2f7925a9a90d55475a6c33b6b94d39ba2e","modified":1591842120639},{"_id":"themes/snail/source/css/gitment.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1591842120639},{"_id":"themes/snail/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1591842120639},{"_id":"themes/snail/source/css/photography.css","hash":"29426628144eb10ec3c0e42aaacc03ee5de1809f","modified":1591842120639},{"_id":"themes/snail/source/css/rocket.styl","hash":"ede0821bc5b8e02ff87349bd9bf2bc822a537a67","modified":1591842120639},{"_id":"themes/snail/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1591842120639},{"_id":"themes/snail/source/css/toc.styl","hash":"8126d6469f1fbf790a4e0829ed871c54557360b2","modified":1591842120639},{"_id":"themes/snail/source/css/widget.styl","hash":"4e5433414ebf838abcf7f734f960c6f6cc4d3e37","modified":1591852355277},{"_id":"themes/snail/source/fonts/.DS_Store","hash":"c62411b1d7033164ffeac47a5c5091716b1ef0ed","modified":1591842120639},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1591842120643},{"_id":"themes/snail/source/img/cd.png","hash":"9e2948f8fcdd6a33d4d88be26c26cc5a3f284a39","modified":1591842120643},{"_id":"themes/snail/source/img/.DS_Store","hash":"946c77b313a0b54b7752989d970d116de33897e1","modified":1591842120643},{"_id":"themes/snail/source/img/cd_tou.png","hash":"f3be731e88699b3221349f154675f23efe6bbcaf","modified":1591842120643},{"_id":"themes/snail/source/img/default.jpg","hash":"22910d296bc4d2a687e1d2c3583d984d77ff119b","modified":1591842120643},{"_id":"themes/snail/source/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1591842120643},{"_id":"themes/snail/source/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1591842120643},{"_id":"themes/snail/source/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1591842120643},{"_id":"themes/snail/source/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1591842120643},{"_id":"themes/snail/source/img/wave-light.png","hash":"876873f352f953ea90b1d428f563572291052f65","modified":1591842120643},{"_id":"themes/snail/source/js/.DS_Store","hash":"2ab9cda44457d3ffbac70955968c866c2ab41d12","modified":1591842120647},{"_id":"themes/snail/source/js/canvas-nest.js","hash":"ccfef66760b1490ebf7d510c8a3a78d7a753601a","modified":1591842120647},{"_id":"themes/snail/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1591842120647},{"_id":"themes/snail/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1591842120647},{"_id":"themes/snail/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1591842120647},{"_id":"themes/snail/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1591842120651},{"_id":"themes/snail/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1591842120651},{"_id":"themes/snail/source/js/line.js","hash":"f43e647e938bcc51d043b1d64ddbfb847f9fee96","modified":1591842120651},{"_id":"themes/snail/source/js/mouse-click.js","hash":"19836369f0c47643e5e2e78edd3d75c43f1717c6","modified":1591842120651},{"_id":"themes/snail/source/js/ribbonDynamic.js","hash":"f37800912f97ae4c9d375608c5aad462847c8e43","modified":1591842120651},{"_id":"themes/snail/source/js/ribbonStatic.js","hash":"552f5b67778ff6282090cf06b33aaeb1a95eca37","modified":1591842120651},{"_id":"themes/snail/source/js/search.js","hash":"7e780c538d23147e4fdc5c19eba5747a137234f3","modified":1591842120651},{"_id":"themes/snail/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1591842120651},{"_id":"themes/snail/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1591842120651},{"_id":"source/img/article/Fly.jpg","hash":"88fbee27cef45dfe26b5fb0b084313fa8887b5b6","modified":1586108677368},{"_id":"source/img/article/dev-tools-debug.png","hash":"9757e8b511ce555b5c659efba249bca3f7d248be","modified":1587095383770},{"_id":"source/img/article/dev-tools-storage.png","hash":"c14bd49b84de0dd92b9d22c92b4c2fe32b558c58","modified":1587095299785},{"_id":"source/img/article/lifeIsStrange.jpg","hash":"01e12f5319efa056db6cd359d9bf820079bf69c3","modified":1586108677388},{"_id":"source/img/article/mobx9.png","hash":"0c1433628cd9227b7cb07753a1ed79a36e8125a1","modified":1586108677392},{"_id":"source/img/article/shards_upload.jpg","hash":"0fbc0f41f8db68b2d203bfeb40a10ed1db35ad1b","modified":1586108677396},{"_id":"source/img/article/tree-4.png","hash":"7e4dfbf28f940c524b7c2826847f392e7aabb942","modified":1586108677396},{"_id":"source/img/article/waterfall-3.jpg","hash":"e9ae0afb7829e68a8f46ffada84373ae026cf787","modified":1586108677404},{"_id":"source/img/header_img/about.jpg","hash":"fda614a689e2557831f157d4fad104aec259f2d1","modified":1586108677408},{"_id":"themes/snail/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1591842120635},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1591842120643},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1591842120643},{"_id":"themes/snail/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1591842120647},{"_id":"themes/snail/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1591842120651},{"_id":"source/img/article/Ubuntu18.04-1.jpg","hash":"2f2a11b7d0fddda07c17e99be43633f23b6583a3","modified":1586108677372},{"_id":"source/img/article/Ubuntu18.04-10.png","hash":"c869b15cada3d4690f2bdd695e4486d8db277b13","modified":1586108677372},{"_id":"source/img/article/Ubuntu18.04-12.png","hash":"9530e2c1ea32225e8674ca2fa296c0f80e450157","modified":1586108677372},{"_id":"source/img/article/Ubuntu18.04-9.png","hash":"a863261a9a1730c361887d336738a414c2f0a53f","modified":1586108677380},{"_id":"source/img/article/mobx1.png","hash":"899db5dde67d4417c78848d93794b9118dd03b99","modified":1586108677392},{"_id":"source/img/article/mobx4.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1586108677392},{"_id":"source/img/article/mobx2.png","hash":"07f4fb4a584c4ae7be2aa5256eaceb9aad03cdb9","modified":1586108677392},{"_id":"source/img/article/mobx6.png","hash":"e72cec49c559744899d5a23f0bfa30f4356045cf","modified":1586108677392},{"_id":"source/img/article/mobx8.png","hash":"fdb356e7d6388d858f9b861d95062ed72274400d","modified":1586108677392},{"_id":"source/img/article/mobx5.png","hash":"8baae467c558711224feb2c241012bdc46004716","modified":1586108677392},{"_id":"source/img/article/mobx3.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1586108677392},{"_id":"source/img/article/tree-bug1.gif","hash":"7e1143cb1125a5289dabf1e5c8b2243eaa2cea3d","modified":1586108677396},{"_id":"source/img/header_img/archive.jpg","hash":"4ef24aaf2edd05ebbbcdc024e61d6b52e1f80e0f","modified":1586108677408},{"_id":"source/img/header_img/archives-widget.jpg","hash":"3dc11cfeac5c8e05e66fe8c78f1c3a51517f738c","modified":1586108677408},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1586108677416},{"_id":"themes/snail/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1591842120635},{"_id":"themes/snail/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1591842120643},{"_id":"themes/snail/source/css/images/ironman.png","hash":"ed4cfd8d6cb29fe389768e78701c1e704de0a4b4","modified":1591842120639},{"_id":"themes/snail/source/css/images/rocket.png","hash":"76f4a29befec0558eba79e91d494b8186ac83bd9","modified":1591842120639},{"_id":"themes/snail/source/css/music-player/.DS_Store","hash":"c222d4075bfee4e45d6724c1973ae854c0faa544","modified":1591842120639},{"_id":"themes/snail/source/js/gitment.js","hash":"db4ceb1a87f2353ed378f72bdb56a4be3c976425","modified":1591842120647},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","hash":"7e70fcb471e56b2a19f2252930953b3e60fe1a9f","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","hash":"72816c753b283b3073922e0dbaf43b7b0eca084a","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","hash":"5978679d456a2caa60c4577d88015f6287541558","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","hash":"080ec6814b7c0524080725bb14771f6acaea1f81","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","hash":"aadbddac4c13b6104b7c1e8734388b8236d21986","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","hash":"2b17a95811ba31d575f51bc355e64a5fea5bb7ee","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","hash":"87a7218891499b54fc511fba5788d6c571c530da","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","hash":"28d5bef0604f6ff6605018bf5cb0c39becf8ee7d","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","hash":"8569fb80b97a650e8af5e3617e784f9d70759a6a","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","hash":"513e3f0c1faabe03d220a4482b770b0d7b0c6c15","modified":1591842120643},{"_id":"themes/snail/source/js/music-player/.DS_Store","hash":"af71753e216d93f6e18351e06e7c1fea76198ba5","modified":1591842120651},{"_id":"themes/snail/source/js/music-player/utill.js","hash":"9ebf6aa9fd481305a0aa2f78d9beed3fc0949e8d","modified":1591842120651},{"_id":"themes/snail/source/js/music-player/player.js","hash":"7b20324fb4011203eabc99d992bd85e9bbd5fda9","modified":1591842120651},{"_id":"source/img/article/Ubuntu18.04-5.png","hash":"793113383ec939091149fdbda57e7ffb1be2be9b","modified":1586108677376},{"_id":"source/img/article/Ubuntu18.04-8.png","hash":"60000d58e2b4699fe83242c91709c87c7af06a7c","modified":1586108677380},{"_id":"source/img/article/Ubuntu18.04-7.png","hash":"73c40e7f1f5d92baa4fee2613833b78e2efde447","modified":1586108677380},{"_id":"source/img/article/mobx10.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1586108677392},{"_id":"source/img/article/tree-bug-fix.gif","hash":"879461e9e878149d4275058d141c4501776c2350","modified":1586108677396},{"_id":"themes/snail/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1591842120647},{"_id":"themes/snail/source/js/music-player/jquery.min.js","hash":"77e9eed704c96c3eb0180d35c6ba430b3f69a43a","modified":1591842120651},{"_id":"source/img/article/Ubuntu18.04-14.png","hash":"33615ccf60fa2adb47aa70113e00030ddc84cd76","modified":1586108677376},{"_id":"source/img/article/dev-tools.png","hash":"b529d71e083d91f52eba17b90d1ebeeb89374475","modified":1587094240633},{"_id":"source/img/article/tree-bug2.gif","hash":"027471c8f8c9f81eec010d1f64aa9abff423e59c","modified":1586108677396},{"_id":"source/img/header_img/home.jpg","hash":"ae194734c8fddbfc4fcb673a3d9685d038e49dcc","modified":1586108677412},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1586108677412},{"_id":"themes/snail/source/css/music-player/css/player.css","hash":"46a1c32c6148bb2a3e017f707fd45cb4b2419237","modified":1591842120639},{"_id":"themes/snail/source/css/music-player/css/reset.css","hash":"939d5d57d6589ee7bd9d0d0b6a4009eec35a8652","modified":1591842120639},{"_id":"themes/snail/source/css/music-player/fonts/iconfont.css","hash":"bc74788146361682bc17cba3058c62bb7b89fa11","modified":1591842120639},{"_id":"source/img/article_header/article_bg.jpg","hash":"a51db494ff5b672793985001dafb581598c9c2de","modified":1586108677404},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1586108677408},{"_id":"source/img/article/Ubuntu18.04-6.png","hash":"0a9748216e91b802bf53cc5b589f7557af46d58c","modified":1586108677376},{"_id":"source/img/article/mobx7.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1586108677392},{"_id":"source/img/article/Desktop2.png","hash":"7bb9f6713506e7a4a57def450ea0f7f01c894fb0","modified":1586108677364},{"_id":"source/img/article/Desktop3.png","hash":"aed0dbf83defa9800c0ab059d17e9c4040f94c4b","modified":1586108677368},{"_id":"source/img/header_img/tag.png","hash":"2fc57dff9e7ca736be24b04cce54ac7476937b67","modified":1586108677412},{"_id":"themes/snail/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1591842120639},{"_id":"source/img/header_img/home3.jpg","hash":"d1f39791cb2a331d8bd3cedc5d7a0f940e0b4f68","modified":1586108677412},{"_id":"source/img/article_header/article_header.png","hash":"ecd26beb4e13612ff419ad794f0371be823222e6","modified":1586108677404},{"_id":"source/img/article/Desktop.png","hash":"a2214d606233f1b469428dc445f2ec2f1f8b5088","modified":1586108677360},{"_id":"source/img/header_img/home-bg-o.png","hash":"e9ba54c513f0a37bbccddfdf7841570f86cdc6a5","modified":1586108677408},{"_id":"source/img/header_img/404.png","hash":"1b98b8219ecee2e263c8c81c58a53e32a62c3526","modified":1586108677408},{"_id":"source/img/header_img/home2.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1586108677412},{"_id":"source/img/article/animation.gif","hash":"77eadaec7549bb72c597258999dc2e065eadc19b","modified":1586108677384},{"_id":"source/img/article/city.jpg","hash":"c21151177f3aa521e64586eee169915f6fd9bd37","modified":1586108677388},{"_id":"source/img/article/waterfall-1.gif","hash":"5c2321cba8e414d902be7e4ae403d2a12ac814d0","modified":1586108677404},{"_id":"public/img/article/Ubuntu18.04-11.png","hash":"8ae8ed9c52709ffdde63ef92ed26578e87e05cce","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-13.png","hash":"2f929624df2751c01731ed1ba21cda2ffb7d7092","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-2.png","hash":"63ab9b51046225b0846b88664d90cacc1db4aab3","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-3.png","hash":"f331b6722e7cf2035e00f1dd307c58a2379b0c7f","modified":1597904962023},{"_id":"public/img/article/dev-tools-storage2.png","hash":"28ddb3518ae6fb334a9887e428cfcdc244f9023a","modified":1597997572937},{"_id":"public/img/article/node_pipe.png","hash":"a0c7d4ea6c5ccc5d63072c7637a2db520cffd15a","modified":1597996130824},{"_id":"public/img/article/snapshot.png","hash":"a61b806568c481c22884194c46f08cb09bdc1341","modified":1597997572937},{"_id":"public/img/article/snapshot_select.png","hash":"59ceff5d623013fa4306ab119471e710cf0aee19","modified":1597996130824},{"_id":"public/img/article/tree-1.png","hash":"d2a4646a6b46ac6e8be2865846c46c313dcce545","modified":1597996130824},{"_id":"public/img/article/tree-2.png","hash":"ca0e1f8ea884f485deb8c311ac31b6574c89f877","modified":1597996130824},{"_id":"public/img/article/tree-3.png","hash":"e6a43aeb341590efe6ae5dd852c3fc01e1d7862f","modified":1597996130824},{"_id":"public/img/article/tree-5.png","hash":"ce6c867bdd0000e4aeeb4929e642fee215a381d1","modified":1597996130824},{"_id":"public/img/article/tree-6.png","hash":"638fa008070bcc259543193a99b7612a5b2fcae3","modified":1597996130824},{"_id":"public/img/article/upload.png","hash":"2ff71d516e47ee8826ecda7484b454cb7d3e719f","modified":1597904962023},{"_id":"public/img/article/waterfall-2.jpg","hash":"bbdda0636779d855dc2ba622ec673566980aa6d4","modified":1597996130824},{"_id":"public/img/avatar/nojsja.jpeg","hash":"71fc59f8b263f90563e6f4f7c91efac2c7c97921","modified":1597904962023},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1597904962023},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1597904962023},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1597904962023},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1597904962023},{"_id":"public/img/cd.png","hash":"7b1d07ff8f90b47545d3a951750b671817b7e72d","modified":1597996130824},{"_id":"public/img/cd_tou.png","hash":"493b2ee58b2ad9981d4285a8440a780d4efb406b","modified":1597996130824},{"_id":"public/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1597904962023},{"_id":"public/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1597904962023},{"_id":"public/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1597904962023},{"_id":"public/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1597904962023},{"_id":"public/img/wave-light.png","hash":"af75ad9bd8533cac82b74f06462a9acd0eaccdff","modified":1597996130824},{"_id":"public/css/images/ironman.png","hash":"ed4cfd8d6cb29fe389768e78701c1e704de0a4b4","modified":1597904962023},{"_id":"public/css/images/rocket.png","hash":"76f4a29befec0558eba79e91d494b8186ac83bd9","modified":1597904962023},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","hash":"7e70fcb471e56b2a19f2252930953b3e60fe1a9f","modified":1597904962023},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","hash":"72816c753b283b3073922e0dbaf43b7b0eca084a","modified":1597904962023},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","hash":"5978679d456a2caa60c4577d88015f6287541558","modified":1597904962023},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","hash":"080ec6814b7c0524080725bb14771f6acaea1f81","modified":1597904962023},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","hash":"aadbddac4c13b6104b7c1e8734388b8236d21986","modified":1597904962023},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","hash":"2b17a95811ba31d575f51bc355e64a5fea5bb7ee","modified":1597904962023},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","hash":"87a7218891499b54fc511fba5788d6c571c530da","modified":1597904962023},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","hash":"28d5bef0604f6ff6605018bf5cb0c39becf8ee7d","modified":1597904962023},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","hash":"8569fb80b97a650e8af5e3617e784f9d70759a6a","modified":1597904962023},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","hash":"513e3f0c1faabe03d220a4482b770b0d7b0c6c15","modified":1597904962023},{"_id":"public/img/article/Fly.jpg","hash":"88fbee27cef45dfe26b5fb0b084313fa8887b5b6","modified":1597904962023},{"_id":"public/img/article/dev-tools-debug.png","hash":"71e80f527196cac384e1e27e1eb0c66756758ce8","modified":1597996130824},{"_id":"public/img/article/dev-tools-storage.png","hash":"a8ab0ed159f7fd01bf9c06a1577d1a72f3926ea4","modified":1597996130824},{"_id":"public/img/article/lifeIsStrange.jpg","hash":"01e12f5319efa056db6cd359d9bf820079bf69c3","modified":1597904962023},{"_id":"public/img/article/mobx9.png","hash":"0c1433628cd9227b7cb07753a1ed79a36e8125a1","modified":1597904962023},{"_id":"public/img/article/shards_upload.jpg","hash":"820d03c9acfc4e4d4c86fee633e5cb30fa599aa1","modified":1597996130824},{"_id":"public/img/article/tree-4.png","hash":"31fcb86c18de952e529bb885fb24291639881004","modified":1597996130824},{"_id":"public/img/article/waterfall-3.jpg","hash":"e9ae0afb7829e68a8f46ffada84373ae026cf787","modified":1597904962023},{"_id":"public/img/header_img/about.jpg","hash":"ac16903ff5a66af9280fab58617a8e5c894877b3","modified":1597996130824},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1597904962023},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1597904962023},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"fd31e0a5016505904ad65946b69745ec2872b4e6","modified":1597996130824},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1597904962023},{"_id":"public/css/dusign-common-dark.css","hash":"09c1d5e4d5d623ca1b0f27975860625c48332b92","modified":1597904962023},{"_id":"public/css/dusign-common-light.css","hash":"11f0d1a854b0ef803a0f0d9c6b744b3ed74253bf","modified":1597904962023},{"_id":"public/css/fonts.googleapis.css","hash":"61735f2f7925a9a90d55475a6c33b6b94d39ba2e","modified":1597904962023},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1597904962023},{"_id":"public/css/photography.css","hash":"29426628144eb10ec3c0e42aaacc03ee5de1809f","modified":1597904962023},{"_id":"public/css/rocket.css","hash":"ff363acbf4d07259228a37738221033665b28794","modified":1597904962023},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1597904962023},{"_id":"public/css/toc.css","hash":"ed5bba697adcbf9d050a7d489e85fe9034b6693a","modified":1597904962023},{"_id":"public/css/widget.css","hash":"c3fbbaf650c066e0cd746b95c89306833f6b6f79","modified":1597904962023},{"_id":"public/js/canvas-nest.js","hash":"ccfef66760b1490ebf7d510c8a3a78d7a753601a","modified":1597904962023},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1597904962023},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1597904962023},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1597904962023},{"_id":"public/js/line.js","hash":"f43e647e938bcc51d043b1d64ddbfb847f9fee96","modified":1597904962023},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1597904962023},{"_id":"public/js/mouse-click.js","hash":"19836369f0c47643e5e2e78edd3d75c43f1717c6","modified":1597904962023},{"_id":"public/js/ribbonStatic.js","hash":"552f5b67778ff6282090cf06b33aaeb1a95eca37","modified":1597904962023},{"_id":"public/js/ribbonDynamic.js","hash":"f37800912f97ae4c9d375608c5aad462847c8e43","modified":1597904962023},{"_id":"public/js/search.js","hash":"7e780c538d23147e4fdc5c19eba5747a137234f3","modified":1597904962023},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1597904962023},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1597904962023},{"_id":"public/js/music-player/utill.js","hash":"8155c50df624cf908a0aea51461686d7f5fed2e4","modified":1594032708498},{"_id":"public/js/music-player/player.js","hash":"8c45db99c0606c20622a9588960c059cec8196e3","modified":1594032708498},{"_id":"public/css/music-player/css/player.css","hash":"8676c8a79a31ab1872cc07c05a6d5c7e4625e195","modified":1594032708498},{"_id":"public/css/music-player/css/reset.css","hash":"7ed29eb21b446c2c062b27197757de156588aa9f","modified":1594032708498},{"_id":"public/css/music-player/fonts/iconfont.css","hash":"bc74788146361682bc17cba3058c62bb7b89fa11","modified":1594032708498},{"_id":"public/css/dusign-dark.css","hash":"d27c92dbcde4253e29f67756eb4499c193a11a27","modified":1597904962023},{"_id":"public/css/dusign-light.css","hash":"5cc7173beddf80fefe7bb8510edf74f1ac98399e","modified":1597996785995},{"_id":"public/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1597904962023},{"_id":"public/css/font-awesome.star.css","hash":"5e536c20b1633dd798b27b1860292edb00bdc5e4","modified":1597904962023},{"_id":"public/css/gitment.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1597904962023},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1597904962023},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1597904962023},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1597904962023},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1597904962023},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1597904962023},{"_id":"public/js/gitment.js","hash":"db4ceb1a87f2353ed378f72bdb56a4be3c976425","modified":1594032708498},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1597904962023},{"_id":"public/js/music-player/jquery.min.js","hash":"e2f3603e23711f6446f278a411d905623d65201e","modified":1594032708498},{"_id":"public/img/article/Ubuntu18.04-1.jpg","hash":"2f2a11b7d0fddda07c17e99be43633f23b6583a3","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-10.png","hash":"c869b15cada3d4690f2bdd695e4486d8db277b13","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-12.png","hash":"9530e2c1ea32225e8674ca2fa296c0f80e450157","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-9.png","hash":"a863261a9a1730c361887d336738a414c2f0a53f","modified":1597904962023},{"_id":"public/img/article/mobx1.png","hash":"899db5dde67d4417c78848d93794b9118dd03b99","modified":1597904962023},{"_id":"public/img/article/mobx4.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1597904962023},{"_id":"public/img/article/mobx2.png","hash":"07f4fb4a584c4ae7be2aa5256eaceb9aad03cdb9","modified":1597904962023},{"_id":"public/img/article/mobx6.png","hash":"e72cec49c559744899d5a23f0bfa30f4356045cf","modified":1597904962023},{"_id":"public/img/article/mobx8.png","hash":"fdb356e7d6388d858f9b861d95062ed72274400d","modified":1597904962023},{"_id":"public/img/article/mobx3.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1597904962023},{"_id":"public/img/article/tree-bug1.gif","hash":"80dcce41f18fb541e51e5cf40b8f53a39723b6fd","modified":1597996130824},{"_id":"public/img/header_img/archive.jpg","hash":"d3be1abb2d3b5bdef4216cc469daea3f46349c3a","modified":1597996130824},{"_id":"public/img/header_img/archives-widget.jpg","hash":"3dc11cfeac5c8e05e66fe8c78f1c3a51517f738c","modified":1597904962023},{"_id":"public/img/article/tree-bug-fix.gif","hash":"fccce7b27fb8fc4362c2b27c0a84939dcd7bf702","modified":1597996130824},{"_id":"public/img/article/dev-tools.png","hash":"c6e411f871e7da6425839dade6496fefb48e99ad","modified":1597996130824},{"_id":"public/img/article/mobx5.png","hash":"8baae467c558711224feb2c241012bdc46004716","modified":1597904962023},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"3208aada1ec75b117feea59006b08c76c1d5e150","modified":1597996130824},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-5.png","hash":"793113383ec939091149fdbda57e7ffb1be2be9b","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-7.png","hash":"73c40e7f1f5d92baa4fee2613833b78e2efde447","modified":1597904962023},{"_id":"public/img/avatar/ironman.png","hash":"41c232222da8d8d6ce605f92e1b2e88243b7ed81","modified":1597997572937},{"_id":"public/img/article/mobx7.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-8.png","hash":"60000d58e2b4699fe83242c91709c87c7af06a7c","modified":1597904962023},{"_id":"public/img/article/mobx10.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1597904962023},{"_id":"public/img/article_header/article_bg.jpg","hash":"6128f76ebdc20a3ccb2ca593c6842a8bb63a1d1a","modified":1597996130824},{"_id":"public/img/article/tree-bug2.gif","hash":"98e1fbff38cd13d7c03ef84e00c6c9be54735f79","modified":1597996130824},{"_id":"public/img/header_img/home.jpg","hash":"adb9e1fe9e43215a6cb7bccecae0b759bf6599cc","modified":1597996130824},{"_id":"public/img/article/Ubuntu18.04-6.png","hash":"0a9748216e91b802bf53cc5b589f7557af46d58c","modified":1597904962023},{"_id":"public/img/article/Ubuntu18.04-14.png","hash":"33615ccf60fa2adb47aa70113e00030ddc84cd76","modified":1597904962023},{"_id":"public/img/header_img/tag.png","hash":"2fc57dff9e7ca736be24b04cce54ac7476937b67","modified":1597904962023},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"89b5d79b99e88d484b502a587a845bbb98ba8ba4","modified":1597996130824},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"d386a2e85b1928b911eddce981fbddf85b13f220","modified":1597996130824},{"_id":"public/img/article/Desktop3.png","hash":"aed0dbf83defa9800c0ab059d17e9c4040f94c4b","modified":1597904962023},{"_id":"public/img/article/animation.gif","hash":"97e7d2d42f4f26a78c1fba1694a920e2a6c2a6a7","modified":1597996130824},{"_id":"public/img/article/Desktop2.png","hash":"7bb9f6713506e7a4a57def450ea0f7f01c894fb0","modified":1597904962023},{"_id":"public/img/header_img/home3.jpg","hash":"cd84c8b700d32784afdd7fdfec725f254cf2a45d","modified":1597996130824},{"_id":"public/img/article_header/article_header.png","hash":"ecd26beb4e13612ff419ad794f0371be823222e6","modified":1597904962023},{"_id":"public/img/article/Desktop.png","hash":"bd72f21f3745cbf2a38590a3fecd646a629046f5","modified":1597996130824},{"_id":"public/img/header_img/404.png","hash":"fd3caa0224f4bac1f0aaee3484281df775fea7a7","modified":1597996130824},{"_id":"public/img/header_img/home-bg-o.png","hash":"7023da5d25cdc38f2b552e2cc3322fe49f499163","modified":1597996130824},{"_id":"public/img/header_img/home2.png","hash":"3f74583fd6a81c30562dbc8bd504f57cb36e977f","modified":1597996130824},{"_id":"public/img/article/city.jpg","hash":"c21151177f3aa521e64586eee169915f6fd9bd37","modified":1597904962023},{"_id":"public/img/article/waterfall-1.gif","hash":"5c2321cba8e414d902be7e4ae403d2a12ac814d0","modified":1597904962023},{"_id":"public/post-sitemap.xml","hash":"6e19fc20ceb3c6c8204f834bde61671e4b81c36b","modified":1597995326936},{"_id":"public/page-sitemap.xml","hash":"ec4da9940652d9818bb9152696013a0f5ac8b26c","modified":1597995326936},{"_id":"public/category-sitemap.xml","hash":"2b9b1307e398dab691a47552a91991e4c012c17d","modified":1597995326936},{"_id":"public/tag-sitemap.xml","hash":"afe4133653000bb3961c7c76b987b408793e5185","modified":1597995326936},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1597995326936},{"_id":"source/_posts/Electron+Mobx+React开发记录(一).md","hash":"d0a94c900789e7fdb3bde6fb9858c0fccefa64f8","modified":1597899695363},{"_id":"source/_posts/Electron+Mobx+React开发记录(二).md","hash":"c4ab13403ab398fd92a042d703d8871c52269442","modified":1597905913370},{"_id":"source/_posts/echarts图表-树形图开发记录.md","hash":"4db69659e45a025f14b36c540e97981f6ae98ae1","modified":1597899679699},{"_id":"source/_posts/Ubuntu18.04踩坑记录.md","hash":"e2a31f47c2b7e3237a84b81a5be89b430532a448","modified":1597899537811},{"_id":"source/_posts/linux-mint-configure.md","hash":"0d83a4b97718b175f91afc70424938c0f5f7ba3c","modified":1597899508379},{"_id":"source/_posts/proxychains终端代理.md","hash":"f04ca8ba046de3645ade1f62610a41107291b565","modified":1597912427565},{"_id":"source/_posts/sass开发规范.md","hash":"d1c28ab81d803c20f2cf2805c02dcaba097b5c21","modified":1597899522503},{"_id":"source/_posts/shadowsocks_polipo.md","hash":"746fcd659d77c76d72eef9c497b7d8a5b34e5954","modified":1597899527495},{"_id":"source/_posts/water-fall-layout.md","hash":"c3e7d36072f6377ca38b2b517e5e21da2f7e3b77","modified":1597899544999},{"_id":"source/_posts/使用ES5实现ES6中的Promise.md","hash":"ac569560b340a8383957a2dd0ecbcfa6532a616d","modified":1597899628175},{"_id":"source/_posts/前端浏览器开发者工具.md","hash":"d647f9ec324f9fa2665edbfd17a9026b3a6348a7","modified":1597899619179},{"_id":"source/_posts/基于s3对象存储多文件分片上传的Javascript实现(一).md","hash":"c529cc62610402ec29231b0c5e05af71460b8f79","modified":1598325004563},{"_id":"source/_posts/基于s3对象存储多文件分片上传的Javascript实现(二).md","hash":"95eeea044bbe02f89e849a2b76f87849c0fd1ab7","modified":1597899580579},{"_id":"source/_posts/用Javascript实现一个可自定义样式的tootips组件.md","hash":"657453f9709c72246c199170e5447f5931eb0077","modified":1597899637727},{"_id":"source/_posts/简单实现一个Javascript动画处理类.md","hash":"abd86b962fb86f35e00187bce9661546bad37b8c","modified":1597899600007},{"_id":"source/_posts/联想y7000安装ubuntu18.04显卡驱动解决方案.md","hash":"62300b6f713a43afd18c3cf034b9dbaad19dce59","modified":1597899608927},{"_id":"source/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1591846976321},{"_id":"source/_posts/Docker运行容器化的Tim和wechat.md","hash":"feacebe3bc0f4ecd10b689a219153a07c492d721","modified":1597899671247},{"_id":"public/2020/04/16/前端浏览器开发者工具/index.html","hash":"71a958b3fb0e61f136df8ffe7d9269592e6895c0","modified":1597996130824},{"_id":"public/2020/03/26/基于s3对象存储多文件分片上传的Javascript实现-二/index.html","hash":"914b7081f1f972ac033f3651339dd267d90a7050","modified":1597996130824},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/index.html","hash":"d6fc4e616b57c961ee22e2578b6073adcdbe048c","modified":1597996130824},{"_id":"public/2020/03/07/基于s3对象存储多文件分片上传的Javascript实现-一/index.html","hash":"a7a67ad886c767db16009fee9f7b5b6271490a12","modified":1598325039848},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录-一/index.html","hash":"e500d19eb7c268a863d960e9eb0da1597b23821b","modified":1597996130824},{"_id":"public/2019/09/29/联想y7000安装ubuntu18-04显卡驱动解决方案/index.html","hash":"7be796266d3c7d825052f29d54c36b49d6d9a4bc","modified":1597996130824},{"_id":"public/2018/11/06/Docker运行容器化的Tim和wechat/index.html","hash":"5e50a0ccb252dfaae3588d9106da0215efa32a01","modified":1597996130824},{"_id":"public/2018/11/06/用Javascript实现一个可自定义样式的tootips组件/index.html","hash":"8b9adb7ce6599884d4e51f4d36465ae6cc710a89","modified":1597996130824},{"_id":"public/2018/11/05/简单实现一个Javascript动画处理类/index.html","hash":"8c4897e8ef867d670042f2d23709f673c9a56ad2","modified":1597996130824},{"_id":"public/2018/10/31/使用ES5实现ES6中的Promise/index.html","hash":"7f100ba95dcc901092d4fb4c825475aa7e8cb60b","modified":1597996130824},{"_id":"public/2018/10/26/Electron-Mobx-React开发记录-二/index.html","hash":"89091691eaa5a787e13c8caff1fdf11d512cf8b1","modified":1597996130824},{"_id":"public/2018/04/04/Ubuntu18-04踩坑记录/index.html","hash":"7cfdbfbf36f3cfb71db3707968dea394c2353f7a","modified":1597996130824},{"_id":"public/2018/04/04/linux-mint-configure/index.html","hash":"c82f4c932758495a226dfda61c14af0d75f34ee1","modified":1597996130824},{"_id":"public/2018/04/04/proxychains终端代理/index.html","hash":"5b6a3d9f7d0ea0f346cd7809f28885617b1403e6","modified":1597996130824},{"_id":"public/2018/04/04/sass开发规范/index.html","hash":"f0043d9f155d110bab83d710c706e8fab44b473a","modified":1597996130824},{"_id":"public/2018/04/04/shadowsocks-polipo/index.html","hash":"b877b4bab1d4839481e6b5a03cadaeb9f45260f1","modified":1597996130824},{"_id":"public/2018/04/01/water-fall-layout/index.html","hash":"c3d46da3f98ddcd53c4ad05575b1a9e509d194d2","modified":1597996130824},{"_id":"public/archives/2/index.html","hash":"1e93b1ff4dff83fcc3ce827086b28b77fb3fc5a6","modified":1598334736935},{"_id":"public/archives/archives/2/index.html","hash":"6cbe1a5701058e0e3017effede9ebf1b022ed2fb","modified":1597996130824},{"_id":"public/archives/2018/index.html","hash":"ccf89f87e2bebbbc812efda1ef5fa088c07011d0","modified":1597996130824},{"_id":"public/archives/2018/archives/2/index.html","hash":"0c0fe3a706a3d3d335dfae0f12950b812c7c3773","modified":1597996130824},{"_id":"public/archives/2018/04/index.html","hash":"fdfefc9514fdbb3debdad79aeaca716ec258b796","modified":1597996130824},{"_id":"public/archives/2018/10/index.html","hash":"c9ea32ca0212e48470164e5fbb32083ab7427a92","modified":1597996130824},{"_id":"public/archives/2018/11/index.html","hash":"e5846936b2860a269f2501df782e5baec96485e7","modified":1597996130824},{"_id":"public/archives/2019/09/index.html","hash":"998dc777345780bd77d087dd5ce24497247544b9","modified":1597996130824},{"_id":"public/archives/2019/10/index.html","hash":"a22dbf15ec7f1e82e97de53cbef478ffb518d903","modified":1597996130824},{"_id":"public/archives/2020/index.html","hash":"670eb68fa552c0005039d0a2c807c7a7c157ccb3","modified":1597996130824},{"_id":"public/archives/2020/03/index.html","hash":"83886da9571a6304597a0b08ea78c32bb0256f98","modified":1597996130824},{"_id":"public/archives/2020/04/index.html","hash":"1d37fa631557ef3e1cdfb1f4d2783f550c6a7fd6","modified":1597996130824},{"_id":"public/tags/FileUpload/index.html","hash":"7961c19a92753d48d9c70c777434647cb4e4ff67","modified":1597821243930},{"_id":"public/tags/AWS/index.html","hash":"5ec4d7d069e5338770fc96c9bf78672dc012bad8","modified":1597821243930},{"_id":"public/tags/S3/index.html","hash":"68c5a9bb1d595c179708645fdfb603319b450a84","modified":1597821243930},{"_id":"public/tags/Node/index.html","hash":"f6d2282bd143d2d90b3118f3486067080d711ad9","modified":1597821243930},{"_id":"public/tags/FS/index.html","hash":"d34d4addab1fa8a8dfa2fa0139fbc317dacf36f7","modified":1597821243930},{"_id":"public/tags/Animation/index.html","hash":"ab562130b43537106f946671df158c3236b4f61d","modified":1597821243930},{"_id":"public/tags/Linux/index.html","hash":"1096c34fb35a3fdac72380292efb0e08f0ec90ab","modified":1597821243930},{"_id":"public/tags/Ubuntu18-04/index.html","hash":"218d48e3586bc0c8021dbc383ca7c2df9a7bb1c5","modified":1597821243930},{"_id":"public/tags/Docker/index.html","hash":"1c01afc0413fe99c60f3c5b819ad28e5650035b0","modified":1597821243930},{"_id":"public/tags/ES6/index.html","hash":"db79d415e14fb43826f8d4d0c9e7133cf8494d43","modified":1597821243930},{"_id":"public/tags/React/index.html","hash":"cf8ff6ee2083d13bfb3497aa07c5da16e5a13403","modified":1597821243930},{"_id":"public/tags/Mobx/index.html","hash":"e856c337d1b8305653a80c28ff13cf046e8bbe11","modified":1597821243930},{"_id":"public/tags/Electron/index.html","hash":"3f86122b6852ec39f682dd3a73531039e3289159","modified":1597821243930},{"_id":"public/tags/Echarts/index.html","hash":"7b4f8b67395d53ba8ea93b47dd91475d9bfb2abd","modified":1597821243930},{"_id":"public/tags/Mint/index.html","hash":"d201735d1d6f548b8153103a5d98d3e7d8cc6e11","modified":1597821243930},{"_id":"public/tags/Proxy/index.html","hash":"2d9e7de343bc9fcaa7d5acf04c6dc6efca85cca2","modified":1597821243930},{"_id":"public/tags/Shadowsocks/index.html","hash":"821866b935af4d445c34a9dfc91e46ddf77749a1","modified":1597821243930},{"_id":"public/tags/Sass/index.html","hash":"2ab86cb05998cf7969d58d15960a64f126db77b1","modified":1597821243930},{"_id":"public/tags/Css/index.html","hash":"cd0b89706bd2491461890cc121cddf7a12fa726f","modified":1597821243930},{"_id":"public/tags/Javascript/index.html","hash":"7126bf5ca6a3daaf343edbe44da58414e55fc1a7","modified":1597821243930},{"_id":"public/tags/WaterFall/index.html","hash":"28d72300af2e90b5801527f35799f3324be1d896","modified":1597821243930},{"_id":"public/tags/Promise/index.html","hash":"f8bc0b25a579dac05e60f8c7ae1862febd5b523d","modified":1597821243930},{"_id":"public/tags/Browser/index.html","hash":"35eb90350ed6d92cf7be72aea13f825ee9c28546","modified":1597821243930},{"_id":"public/tags/Tools/index.html","hash":"573e8dcb70d42baa3f1809bfdc736b4742cad168","modified":1597821243930},{"_id":"public/tags/ES5/index.html","hash":"55967c704425e9f929fcc889120600ff328d7c3c","modified":1597821243930},{"_id":"source/img/wave-light.png","hash":"876873f352f953ea90b1d428f563572291052f65","modified":1591847967929},{"_id":"source/js/.DS_Store","hash":"2ab9cda44457d3ffbac70955968c866c2ab41d12","modified":1591855320617},{"_id":"source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1591855320621},{"_id":"source/js/music-player/.DS_Store","hash":"af71753e216d93f6e18351e06e7c1fea76198ba5","modified":1591855320649},{"_id":"source/js/music-player/player.js","hash":"7b20324fb4011203eabc99d992bd85e9bbd5fda9","modified":1591855320649},{"_id":"source/js/music-player/utill.js","hash":"9ebf6aa9fd481305a0aa2f78d9beed3fc0949e8d","modified":1591855320653},{"_id":"source/js/music-player/jquery.min.js","hash":"77e9eed704c96c3eb0180d35c6ba430b3f69a43a","modified":1591855320649},{"_id":"source/fonts/.DS_Store","hash":"c62411b1d7033164ffeac47a5c5091716b1ef0ed","modified":1591855334165},{"_id":"source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1591855334165},{"_id":"source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","hash":"7e70fcb471e56b2a19f2252930953b3e60fe1a9f","modified":1591855334181},{"_id":"source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","hash":"72816c753b283b3073922e0dbaf43b7b0eca084a","modified":1591855334181},{"_id":"source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","hash":"5978679d456a2caa60c4577d88015f6287541558","modified":1591855334185},{"_id":"source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","hash":"080ec6814b7c0524080725bb14771f6acaea1f81","modified":1591855334185},{"_id":"source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","hash":"aadbddac4c13b6104b7c1e8734388b8236d21986","modified":1591855334185},{"_id":"source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","hash":"2b17a95811ba31d575f51bc355e64a5fea5bb7ee","modified":1591855334185},{"_id":"source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","hash":"87a7218891499b54fc511fba5788d6c571c530da","modified":1591855334185},{"_id":"source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","hash":"28d5bef0604f6ff6605018bf5cb0c39becf8ee7d","modified":1591855334185},{"_id":"source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","hash":"8569fb80b97a650e8af5e3617e784f9d70759a6a","modified":1591855334189},{"_id":"source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","hash":"513e3f0c1faabe03d220a4482b770b0d7b0c6c15","modified":1591855334189},{"_id":"source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1591855334173},{"_id":"source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1591855334177},{"_id":"source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1591855334177},{"_id":"source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1591855334181},{"_id":"source/img/cd.png","hash":"9e2948f8fcdd6a33d4d88be26c26cc5a3f284a39","modified":1591855279388},{"_id":"source/img/cd_tou.png","hash":"f3be731e88699b3221349f154675f23efe6bbcaf","modified":1591855279388},{"_id":"source/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1591855279388},{"_id":"source/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1591855279388},{"_id":"source/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1591855279388},{"_id":"source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1591855320625},{"_id":"source/js/canvas-nest.js","hash":"ccfef66760b1490ebf7d510c8a3a78d7a753601a","modified":1591855320625},{"_id":"source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1591855320629},{"_id":"source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1591855320629},{"_id":"source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1591855320637},{"_id":"source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1591855320641},{"_id":"source/js/line.js","hash":"f43e647e938bcc51d043b1d64ddbfb847f9fee96","modified":1591855320641},{"_id":"source/js/mouse-click.js","hash":"19836369f0c47643e5e2e78edd3d75c43f1717c6","modified":1591855320645},{"_id":"source/js/ribbonDynamic.js","hash":"f37800912f97ae4c9d375608c5aad462847c8e43","modified":1591855320653},{"_id":"source/js/ribbonStatic.js","hash":"552f5b67778ff6282090cf06b33aaeb1a95eca37","modified":1591855320653},{"_id":"source/js/search.js","hash":"7e780c538d23147e4fdc5c19eba5747a137234f3","modified":1591855320653},{"_id":"source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1591855320653},{"_id":"source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1591855320653},{"_id":"source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1591855334169},{"_id":"source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1591855334173},{"_id":"source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1591855334177},{"_id":"source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1591855320637},{"_id":"source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1591855334169},{"_id":"source/js/gitment.js","hash":"db4ceb1a87f2353ed378f72bdb56a4be3c976425","modified":1591855320629},{"_id":"source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1591855320633},{"_id":"public/categories/Javascript/index.html","hash":"d71722038c5185d8d7c6a2fee9fac09b4dc18693","modified":1597996130824},{"_id":"public/categories/Javascript/Node/index.html","hash":"4fff07179500920463faeb599451953db6858bb8","modified":1597996130824},{"_id":"public/categories/Linux/index.html","hash":"ffe37fe82911a43c7aace15aae4d13f54529a59f","modified":1597996130824},{"_id":"public/categories/Sass/index.html","hash":"49cc55dc83f6693d03c9680d8a374a41a85c06cc","modified":1597996130824},{"_id":"public/categories/Tools/index.html","hash":"f94fda54ada2f754006734c20df1097f69ed101f","modified":1597996130824},{"_id":"public/categories/Electron/index.html","hash":"63debf0d8dbeb778196af0efbb6fac37094c386b","modified":1597996130824},{"_id":"public/categories/Mobx/index.html","hash":"36a930c8491ba5c953666c7c3a15aac08390baac","modified":1597996130824},{"_id":"public/categories/Echarts/index.html","hash":"74e4e9d3357aa6d47257ba750376da19dd6f7156","modified":1597996130824},{"_id":"public/categories/Mobx/Electron/index.html","hash":"d9e0a124d6ccd464705ef2b059235c8901364aee","modified":1597996130824},{"_id":"source/img/header_img/tinified.zip","hash":"16c2d5ab633b3ce4f128ef2cf7879ed86672b878","modified":1591860158378},{"_id":"public/img/header_img/tinified.zip","hash":"16c2d5ab633b3ce4f128ef2cf7879ed86672b878","modified":1597904962023},{"_id":"source/_posts/基于windows的smb客户端开发记录.md","hash":"3efa629f77df4ed7841cd6b2014f3dc4fca63026","modified":1593763037234},{"_id":"source/img/article/electron-lang.png","hash":"aeda22e50ab9801aca9a3f3d74e89ed960a5f2be","modified":1593748900888},{"_id":"source/img/article/smb_node.jpg","hash":"72c4e525a48b19119d956a702696f684f5a25288","modified":1592795005373},{"_id":"source/img/article/smb_share.jpg","hash":"03fbf2643769ccf566ce83da60211a86c15ddf0e","modified":1592795005373},{"_id":"source/img/article/smb_node_conf.jpg","hash":"d001b75a12d9565133ef54cc37faeceaf1fa2517","modified":1592795005373},{"_id":"source/img/article/smb_share_mount.jpg","hash":"ee01b63581608b8e2ad68b5da32cb06dd16b4a00","modified":1592795005373},{"_id":"source/img/article/smb_upload_now.jpg","hash":"4b28118688f086ab9e11c90b79e1073598305aa6","modified":1597573701006},{"_id":"source/img/article/smb_dir.jpg","hash":"1bd124d75fda4ef614e06332b8b1a529007a7b6b","modified":1592795005369},{"_id":"source/img/article/smb_shutdown.jpg","hash":"d438236562b837d4c18fe0bdc69b08945f651487","modified":1592795005373},{"_id":"source/img/article/smb_upload_record.jpg","hash":"5d997b622999b74664784035398ce970e7d3596a","modified":1592795005377},{"_id":"source/img/article/smb_login.jpg","hash":"81e82333a656fbf309920825555516e033c54dbf","modified":1592795005373},{"_id":"public/2020/07/17/基于windows的smb客户端开发记录/index.html","hash":"3dc061ae2d8b88cdc656a77a4e648fdf76def70e","modified":1597543565576},{"_id":"public/archives/2020/07/index.html","hash":"54d3c0ce7bf969e7d1673f9ad486ff065aae233d","modified":1597996130824},{"_id":"public/categories/client/index.html","hash":"4ddd6f512eabd8b00ccbe9cacec6dc013965abb1","modified":1594032708498},{"_id":"public/tags/SMB/index.html","hash":"136064860924f092496a5ca182e8036dc4ff4fa7","modified":1597821243930},{"_id":"public/img/article/electron-lang.png","hash":"8f7cdef3e08c86e11b484c9f14c1a7c4506d5fb4","modified":1597996130824},{"_id":"public/img/article/smb_share.jpg","hash":"fa1a4abeee04e649d6a0d531e217fca9423617ad","modified":1597996130824},{"_id":"public/img/article/smb_node.jpg","hash":"8a77594e5de48f3a576c65f0569df79adc4eb166","modified":1597996130824},{"_id":"public/img/article/smb_share_mount.jpg","hash":"c7e50f9e772a8f63ab6eba41f3807de2ead168ff","modified":1597996130824},{"_id":"public/img/article/smb_node_conf.jpg","hash":"d969603b0b6bdd94fa6a811f8ed2908016940150","modified":1597996130824},{"_id":"public/img/article/smb_upload_now.jpg","hash":"d43f109ef737abb7c64b93cc22f2fbc3b01d6694","modified":1597996130824},{"_id":"public/img/article/smb_dir.jpg","hash":"0325c01b5c156a999e6499ae6542c52da0e9fa60","modified":1597996130824},{"_id":"public/img/article/smb_shutdown.jpg","hash":"0477fa80186bd539ca4400ceedb341548aaadca8","modified":1597996130824},{"_id":"public/img/article/smb_upload_record.jpg","hash":"6639dd243cb6ab18fa50babdf896791cda13e13c","modified":1597996130824},{"_id":"public/img/article/smb_login.jpg","hash":"3a161d6d5e04e2f1a5dd3deca30f1e69ef0ebf8d","modified":1597996130824},{"_id":"source/_posts/基于Electron的smb客户端开发记录.md","hash":"c24d80eea206c2f9ddf702fe48e045b3472d6a7b","modified":1598334684958},{"_id":"source/_posts/基于Electron的smb客户端文件上传功能优化.md","hash":"3dac8b85909e88e6b15282f8ebdac08facf7eef4","modified":1597572636417},{"_id":"source/img/article/electron1.png","hash":"03dfc09384dd407f3d10d3e973907d2752f9815b","modified":1597572598018},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/index.html","hash":"2f5eb5e1b1fa5d652b6b3404afa7a63fe00f9bd6","modified":1598334736935},{"_id":"public/2020/07/17/基于Electron的smb客户端文件上传功能优化/index.html","hash":"b7dc99f35f4602d8626e1acdfb409b594a68e36a","modified":1597572692917},{"_id":"public/categories/electron/index.html","hash":"9a0583c7f676aa1ec86c13bafa4696515ecb163d","modified":1597821243930},{"_id":"public/tags/upload/index.html","hash":"936d18b413279d80d5be644d5643f5548c69e1ba","modified":1597996130824},{"_id":"public/img/article/electron1.png","hash":"4d4f8ed9bfcad27f57b6e95c4177c5a168333bbf","modified":1597996130824},{"_id":"source/_posts/基于Electron的smb客户端文件上传优化探索.md","hash":"5b495c485e56d17f03dba584f6f4df3a11add15c","modified":1598334714703},{"_id":"source/img/article/upload_performance.jpg","hash":"b5f5e38a9e7bfa908345bac9dd4fbd3dc29b6149","modified":1597578632504},{"_id":"source/img/article/upload_memory.jpg","hash":"c40aca3c3783ce3072fcb257deac73041feca60c","modified":1597578990366},{"_id":"public/2020/07/17/基于Electron的smb客户端文件上传优化探索/index.html","hash":"17ddbee13dca3cfae77d8f1804ec4bf82783c009","modified":1597588324395},{"_id":"public/img/article/upload_memory.jpg","hash":"ae124eef6ab63572a91470f39179539f4bcdb0a0","modified":1597996130824},{"_id":"public/img/article/upload_performance.jpg","hash":"5fc16ee3f4e5162175e897f71efed5300dd3fce6","modified":1597996130824},{"_id":"source/img/article/refreshTasks.jpg","hash":"220ad00cc03f3f9bfc0e18a49b816124ad63cf16","modified":1597587854635},{"_id":"source/img/article/chromium.jpg","hash":"aca6a7f76b3c9d07786ab462387d7ad467ee0a11","modified":1597581194381},{"_id":"source/img/article/inspect.jpg","hash":"db57826656845f6533b405ae8b9fbd654235dc0c","modified":1597585202257},{"_id":"public/img/article/refreshTasks.jpg","hash":"0828e8df96c07b5fae359beeabb465bec4520039","modified":1597997572937},{"_id":"public/img/article/inspect.jpg","hash":"34b28afb1eda26e0de0685303adda4e23f345034","modified":1597996130824},{"_id":"public/img/article/chromium.jpg","hash":"a5e193b840a4876e4ff89cae0e277d2ef8b5e74f","modified":1597996130824},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/index.html","hash":"2733a8e6d0cdfb78da9d71f098c77f4fa9c3c7cd","modified":1598334736935},{"_id":"public/archives/2020/08/index.html","hash":"7313e67570d2485542e367de2458dd82701cc825","modified":1597996130824},{"_id":"themes/snail/layout/_partial/anchor.ejs","hash":"2070bdf8d41015b8bf9724df342cb269d74abf6a","modified":1597748969428},{"_id":"themes/snail/source/js/Valine.min.js","hash":"b64fbb45ba5495e16013b7d3d114071eb10c16aa","modified":1597746257487},{"_id":"public/js/Valine.min.js","hash":"b64fbb45ba5495e16013b7d3d114071eb10c16aa","modified":1597904962023},{"_id":"public/tags/smb/index.html","hash":"f198e0f05d8248dc323623bf77da9b259cd55a0e","modified":1597996130824},{"_id":"public/tags/linux/index.html","hash":"55578bdb5c4d83f6e0689e94a4051c8f4f6ea785","modified":1597996130824},{"_id":"public/tags/docker/index.html","hash":"453ca3f7fd6f52adb2325259845f724c1ad2b727","modified":1597996130824},{"_id":"public/tags/desktop/index.html","hash":"ea8ce58af3165994a43b30cfb5835a573f112c45","modified":1597996130824},{"_id":"public/tags/es6/index.html","hash":"60e7cea037075e3c7b610480801e31287e0f7d82","modified":1597996130824},{"_id":"public/tags/react/index.html","hash":"8065f12e304b9303c500a9d718b3ca7db3438fca","modified":1597996130824},{"_id":"public/tags/mobx/index.html","hash":"7a1fc3a6114a6e0ceaf6e9cd5884b1abe676dd70","modified":1597996130824},{"_id":"public/tags/electron/index.html","hash":"9e6eafc6847f42906287bbbec383e1ca8a7b1a05","modified":1597996130824},{"_id":"public/tags/bobx/index.html","hash":"23169a031c8e24bc1df65380a81b565e89179fa7","modified":1597903759795},{"_id":"public/tags/ubuntu18-04/index.html","hash":"ee81c795b77fcfeaa40d8f239dfb259db588d41c","modified":1597996130824},{"_id":"public/tags/echarts/index.html","hash":"494c8c4cbfe84cb6f586c99eda3f830e0249da6f","modified":1597996130824},{"_id":"public/tags/mint/index.html","hash":"0e4b801b4b36e0bf8db7cb2365dd64bab3637e1a","modified":1597996130824},{"_id":"public/tags/sass/index.html","hash":"0d091c712305dd6a1159b110cec9c9566bbd90c4","modified":1597996130824},{"_id":"public/tags/css/index.html","hash":"832719578872760932bab11dbd02dd32ff6aba85","modified":1597996130824},{"_id":"public/tags/proxy/index.html","hash":"588f28c477c0aacc898da89dd77bd5ba5f9ed009","modified":1597996130824},{"_id":"public/tags/shadowsocks/index.html","hash":"c3c0970656f54fbddbc523e4c2c197c34590356f","modified":1597996130824},{"_id":"public/tags/javascript/index.html","hash":"7c751a3cbf9d1f68958b683afb55310cf8e81e75","modified":1597996130824},{"_id":"public/tags/promise/index.html","hash":"c11887aa5155edb0e480874cf19af1e695a67290","modified":1597996130824},{"_id":"public/tags/browser/index.html","hash":"b07158c7955df68921726ce3f559a41930053583","modified":1597996130824},{"_id":"public/tags/tools/index.html","hash":"6527c0e538ed470d4acebfb368b33d183871af16","modified":1597996130824},{"_id":"public/tags/aws/index.html","hash":"1b9805b93d63842e208d88e5e475c073224b164b","modified":1597996130824},{"_id":"public/tags/s3/index.html","hash":"f21d5ee7d2fca39c40b34e2df02e0bae014b28b5","modified":1597996130824},{"_id":"public/tags/node/index.html","hash":"4290ff3f5954aab083e52a19e5b128c433038672","modified":1597996130824},{"_id":"public/tags/animation/index.html","hash":"7df4e7cf3caea2666e803b7ad74cf1826c04417c","modified":1597996130824},{"_id":"source/.github/workflows/sync.yml","hash":"6e7656bc60779cebfb1e63ab3d6de219dfda4229","modified":1597898470726},{"_id":"public/.github/workflows/sync.json","hash":"c809ba8d8a95f5e8634729e3838865c9b2b75775","modified":1597904962023},{"_id":"themes/snail/source/js/MathJax.js","hash":"856a82431059889d446290c2f015c60bfb58a0b5","modified":1597994267438},{"_id":"themes/snail/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1597994563757},{"_id":"themes/snail/source/js/buttons.js","hash":"016694e3a3671df0c451334a025ce87ace1848b8","modified":1597994267638},{"_id":"public/js/buttons.js","hash":"016694e3a3671df0c451334a025ce87ace1848b8","modified":1597994617233},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1597994617233},{"_id":"public/js/MathJax.js","hash":"856a82431059889d446290c2f015c60bfb58a0b5","modified":1597994617233},{"_id":"themes/snail/source/js/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1597994815095},{"_id":"public/js/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1597995056843},{"_id":"themes/snail/source/css/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1597995367846},{"_id":"public/css/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1597995375366}],"Category":[{"name":"hexo","_id":"ckba5wfo50004sz95ei0u0hom"},{"name":"Javascript","_id":"ckbag369m0000ct953vhx5d2d"},{"name":"Node","parent":"ckbag369m0000ct953vhx5d2d","_id":"ckbag369o0001ct95elga18d7"},{"name":"Linux","_id":"ckbag3lfz0005ct955kov8vwh"},{"name":"Sass","_id":"ckbag3lg30007ct95eh3afdzg"},{"name":"Tools","_id":"ckbag3lg70009ct950m4cdmtz"},{"name":"Electron","_id":"ckbag3lga000cct953dkafzl4"},{"name":"Mobx","_id":"ckbag3lgm000jct95b66dee2o"},{"name":"Echarts","_id":"ckbag3lgp000mct959740913n"},{"name":"Electron","parent":"ckbag3lgm000jct95b66dee2o","_id":"ckbag3lgq000oct959y2h7p3l"},{"name":"client","_id":"ckc5wvhh900015a957a3ncf8v"},{"name":"electron","_id":"ckdwnl8pc000h0gi06f2pf64p"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2020-06-11T02:22:00.651Z","updated":"2020-06-11T02:22:00.651Z","path":"404.html","title":"","comments":1,"_id":"ckba5wfnv0000sz95gvi18hjd","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"一定有什么事儿还没发生","header-img":"img/header_img/about.jpg","aplayer":true,"comments":0,"_content":"\n### 一句话\n\n>Style hungry, Stay foolish.\n\n### 关于我\n\n>Coder: 喜欢敲代码，喜欢研究技术的，表面上不苟言笑的.\n>Photograher: 喜欢拍照，静物摄影和人像摄影.\n>Gamer: Xbox One X 我的爱.\n\n### 兴趣方向\n\n> Javascript生态/Electron/Linux\n\n### 参与社区\n\n > 简书:https://www.jianshu.com/u/d5c8b784c1d0\n >\n > Github:https://github.com/NoJSJa\n\n### 联系我\n\n>Email: yangwei13@outlook.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"一定有什么事儿还没发生\"\nheader-img: \"img/header_img/about.jpg\"\naplayer: true\ncomments: false\n---\n\n### 一句话\n\n>Style hungry, Stay foolish.\n\n### 关于我\n\n>Coder: 喜欢敲代码，喜欢研究技术的，表面上不苟言笑的.\n>Photograher: 喜欢拍照，静物摄影和人像摄影.\n>Gamer: Xbox One X 我的爱.\n\n### 兴趣方向\n\n> Javascript生态/Electron/Linux\n\n### 参与社区\n\n > 简书:https://www.jianshu.com/u/d5c8b784c1d0\n >\n > Github:https://github.com/NoJSJa\n\n### 联系我\n\n>Email: yangwei13@outlook.com\n\n","updated":"2020-08-21T07:58:24.727Z","path":"about/index.html","_id":"ckba5wfo30002sz9531gl6t7r","content":"<h3 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h3><blockquote><p>Style hungry, Stay foolish.</p></blockquote><h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote><p>Coder: 喜欢敲代码，喜欢研究技术的，表面上不苟言笑的.<br>Photograher: 喜欢拍照，静物摄影和人像摄影.<br>Gamer: Xbox One X 我的爱.</p></blockquote><h3 id=\"兴趣方向\"><a href=\"#兴趣方向\" class=\"headerlink\" title=\"兴趣方向\"></a>兴趣方向</h3><blockquote><p>Javascript生态/Electron/Linux</p></blockquote><h3 id=\"参与社区\"><a href=\"#参与社区\" class=\"headerlink\" title=\"参与社区\"></a>参与社区</h3><blockquote><p>简书:<a href=\"https://www.jianshu.com/u/d5c8b784c1d0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/d5c8b784c1d0</a></p><p>Github:<a href=\"https://github.com/NoJSJa\" target=\"_blank\" rel=\"noopener\">https://github.com/NoJSJa</a></p></blockquote><h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote><p>Email: yangwei13@outlook.com</p></blockquote>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h3><blockquote><p>Style hungry, Stay foolish.</p></blockquote><h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote><p>Coder: 喜欢敲代码，喜欢研究技术的，表面上不苟言笑的.<br>Photograher: 喜欢拍照，静物摄影和人像摄影.<br>Gamer: Xbox One X 我的爱.</p></blockquote><h3 id=\"兴趣方向\"><a href=\"#兴趣方向\" class=\"headerlink\" title=\"兴趣方向\"></a>兴趣方向</h3><blockquote><p>Javascript生态/Electron/Linux</p></blockquote><h3 id=\"参与社区\"><a href=\"#参与社区\" class=\"headerlink\" title=\"参与社区\"></a>参与社区</h3><blockquote><p>简书:<a href=\"https://www.jianshu.com/u/d5c8b784c1d0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/d5c8b784c1d0</a></p><p>Github:<a href=\"https://github.com/NoJSJa\" target=\"_blank\" rel=\"noopener\">https://github.com/NoJSJa</a></p></blockquote><h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote><p>Email: yangwei13@outlook.com</p></blockquote>"},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.jpg","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Have goals that are actually meaningful to all of your brain, not just a piece, and immerse yourself in whatever it is you do.","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.jpg\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Have goals that are actually meaningful to all of your brain, not just a piece, and immerse yourself in whatever it is you do.\"\n---\n","updated":"2020-06-11T02:22:00.663Z","path":"archive/index.html","_id":"ckba5wfo40003sz95405ra6ll","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"categories","title":"Categories","header-img":"img/header_img/categories-bg.jpg","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Approach the New Year with resolve to find the opportunities hidden in each new day.","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories\"\nheader-img: \"img/header_img/categories-bg.jpg\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Approach the New Year with resolve to find the opportunities hidden in each new day.\"\n---\n","updated":"2020-06-11T02:22:00.663Z","path":"categories/index.html","_id":"ckba5wfo70006sz95aqdmaf3f","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"photography","title":"Photography","date":"2019-12-08T12:48:22.000Z","description":"The greatness of photography is to fix the moment into eternity, Attach importance to surprise you inadvertently, this is one of the photography's charm!","header-img":"img/header_img/photography-bg.jpeg","comments":1,"_content":"![晚霞](photo/wx.jpeg)\n<strong>晚霞</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>","source":"photography/index.md","raw":"---\nlayout: \"photography\"\ntitle: \"Photography\"\ndate: 2019-12-08 20:48:22\ndescription: \"The greatness of photography is to fix the moment into eternity, Attach importance to surprise you inadvertently, this is one of the photography's charm!\"\nheader-img: \"img/header_img/photography-bg.jpeg\"\ncomments: true\n---\n![晚霞](photo/wx.jpeg)\n<strong>晚霞</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>","updated":"2020-06-11T05:55:42.303Z","path":"photography/index.html","_id":"ckba5wfo80007sz957005eyof","content":"<p><img src=\"photo/wx.jpeg\" alt=\"晚霞\"><br><strong>晚霞</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"photo/wx.jpeg\" alt=\"晚霞\"><br><strong>晚霞</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n"},{"layout":"tags","title":"Tags","description":"One way to get the most out of life is to look upon it as an adventure.","header-img":"img/header_img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"One way to get the most out of life is to look upon it as an adventure.\"\nheader-img: \"img/header_img/tag-bg.jpg\"\n---\n","date":"2020-06-11T02:22:00.755Z","updated":"2020-06-11T02:22:00.755Z","path":"tags/index.html","comments":1,"_id":"ckba5wfob000asz9509pz7syt","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"name: Sync\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Sync to Gitee\n      uses: wearerequired/git-mirror-action@master\n      env:\n          # 注意在 Settings->Secrets 配置 GITEE_RSA_PRIVATE_KEY\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n      with:\n          # 注意替换为你的 GitHub 源仓库地址\n          source-repo: \"git@github.com:NoJsJa/blogs.git\"\n          # 注意替换为你的 Gitee 目标仓库地址\n          destination-repo: \"git@gitee.com:nojsjaOSC/blogs.git\"\n\n    - name: Build Gitee Pages\n      uses: yanglbme/gitee-pages-action@master\n      with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: nojsjaOSC\n          # 注意在 Settings->Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库\n          gitee-repo: nojsjaOSC/blogs\n","source":".github/workflows/sync.yml","raw":"name: Sync\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Sync to Gitee\n      uses: wearerequired/git-mirror-action@master\n      env:\n          # 注意在 Settings->Secrets 配置 GITEE_RSA_PRIVATE_KEY\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n      with:\n          # 注意替换为你的 GitHub 源仓库地址\n          source-repo: \"git@github.com:NoJsJa/blogs.git\"\n          # 注意替换为你的 Gitee 目标仓库地址\n          destination-repo: \"git@gitee.com:nojsjaOSC/blogs.git\"\n\n    - name: Build Gitee Pages\n      uses: yanglbme/gitee-pages-action@master\n      with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: nojsjaOSC\n          # 注意在 Settings->Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库\n          gitee-repo: nojsjaOSC/blogs\n","date":"2020-08-20T05:43:43.836Z","updated":"2020-08-20T04:41:10.726Z","path":".github/workflows/sync.json","layout":"false","title":"","comments":1,"_id":"cke2egsew0000jh95djc65q2c","content":"{\"name\":\"Sync\",\"on\":{\"push\":{\"branches\":[\"master\"]}},\"jobs\":{\"build\":{\"runs-on\":\"ubuntu-latest\",\"steps\":[{\"name\":\"Sync to Gitee\",\"uses\":\"wearerequired/git-mirror-action@master\",\"env\":{\"SSH_PRIVATE_KEY\":\"$\"},\"with\":{\"source-repo\":\"git@github.com:NoJsJa/blogs.git\",\"destination-repo\":\"git@gitee.com:nojsjaOSC/blogs.git\"}},{\"name\":\"Build Gitee Pages\",\"uses\":\"yanglbme/gitee-pages-action@master\",\"with\":{\"gitee-username\":\"nojsjaOSC\",\"gitee-password\":\"$\",\"gitee-repo\":\"nojsjaOSC/blogs\"}}]}}}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"Sync\",\"on\":{\"push\":{\"branches\":[\"master\"]}},\"jobs\":{\"build\":{\"runs-on\":\"ubuntu-latest\",\"steps\":[{\"name\":\"Sync to Gitee\",\"uses\":\"wearerequired/git-mirror-action@master\",\"env\":{\"SSH_PRIVATE_KEY\":\"$\"},\"with\":{\"source-repo\":\"git@github.com:NoJsJa/blogs.git\",\"destination-repo\":\"git@gitee.com:nojsjaOSC/blogs.git\"}},{\"name\":\"Build Gitee Pages\",\"uses\":\"yanglbme/gitee-pages-action@master\",\"with\":{\"gitee-username\":\"nojsjaOSC\",\"gitee-password\":\"$\",\"gitee-repo\":\"nojsjaOSC/blogs\"}}]}}}"}],"Post":[{"title":"基于s3对象存储多文件分片上传的Javascript实现(一)","catalog":true,"toc_nav_num":true,"date":"2020-03-07T08:18:00.000Z","subtitle":"aws s3 javascript","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-03-07T08:18:00.000Z","_content":"\n### 目录\n\n1. 概述\n\n2. 浏览器文件操作限制\n\n3. 前端多文件分片上传的原理和实现\n\n### 预览\n\n![upload](/blogs/img/article/upload.png)\n\n### 概述\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。\n\n### 浏览器文件操作限制\n\n* HTML5新特性`input[type=file]`支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。\n* 浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。 \n* 相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。\n\n### 前端多文件分片上传的原理和实现\n\n_完整Github[源码](https://github.com/NoJsJa/javascript-learning/tree/master/file-slice-upload)_\n\n> 使用了React16/Webpack4/Mobx状态管理库\n\n* 支持批量文件分割并行上传\n* 多文件操作：暂停/恢复/终止/续传/重传\n* 自定义上传任务数目、单个分片大小\n\n#### 运行流程图\n\n![upload](/blogs/img/article/shards_upload.jpg)\n\n#### 主要流程\n\n1. cacheFile  \n前端通过input组件拿到所有文件地址并缓存起来。\n```js\n /**\n   * [cacheFile 缓存即将注册的文件]\n   */\n  @action\n  cacheFile = (files, bucket) => {\n    const symbolArr = this.filesCache.map(file => this.getSymbol(file));\n    const filtedFiles = [];\n    let uploadingFileFound = false;\n    files.forEach((file) => {\n      if (!symbolArr.includes(this.getSymbol(file))) {\n        if (this.findIsUploading(this.getSymbol(file), bucket)) {\n          uploadingFileFound = true;\n          filtedFiles.push(file.name);\n        } else {\n          this.filesCache.push(file);\n          symbolArr.push(this.getSymbol(file));\n        }\n      }\n    });\n    if (!files.length) openNotification('warning', null, this.lang.lang.noFilCanBeUploaded);\n    if (uploadingFileFound) openNotification('warning', null, this.lang.lang.uploadingFileReuploadTips + filtedFiles.join(', '));\n  }\n```\n\n2. registry  \n根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。\n```js\n/**\n   * [registry 注册上传文件信息]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} uploadId [文件上传进程id]\n   * @param {[Object]} state [文件初始化状态]\n   */\n  @action registry = (files, region, prefix) => {\n    let fileObj = null;\n    this.loading = true;\n    files.forEach((file) => {\n      if (this.files.includes(file)) {\n        return;\n      }\n      this.files.push(file);\n      fileObj = {\n        name: file.webkitRelativePath || file.name,\n        prefix: prefix || '',\n        size: file.size,\n        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split('.').pop()).type,\n        state: 'uninitial',\n        creationTime: '',\n        completionTime: '',\n        index: 0,\n        file,\n        initialized: false,\n        partEtags: [],\n        region,\n        blockSize: this.blockSize,\n        total: Math.ceil(file.size / this.blockSize),\n        activePoint: new Date(),\n        speed: '0 MB/S',\n        id: encodeURIComponent(new Date() + file.name + file.type + file.size),\n      };\n      const obj = observable(fileObj);\n      this.taskType.uninitial.push(obj);\n      this.taskType.series.push(obj);\n      if (!this.fileStorage.get(region)) {\n        this.fileStorage.set(region, [obj]);\n      } else {\n        this.fileStorage.get(region).push(obj);\n      }\n      // this.fileStorageMap.set(file, obj);\n    });\n    this.loading = false;\n  }\n}\n```\n\n3. startTasks  \n获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。\n```js\n/**\n   * [startTasks 开启上传任务队列]\n   * @param  {[String]} region [桶名]\n   */\n  startTasks = (region) => {\n    // 根据空闲任务类型和空闲任务并发限制开启空闲任务\n    // let storageObject;\n    this.refreshTasks(region);\n    if (this.isUploadListEmpty(region)) return;\n\n    const maxLength = this.multiTaskCount - this.taskType.uploading.length;\n    const taskSeries = [];\n    for (let i = 0; i < (maxLength) && this.taskType.series[i]; i += 1) {\n      // const file = this.taskType.series.shift();\n      const storageObject = this.taskType.series[i];\n      if (storageObject.state === 'uploading') continue; // 上传中\n      if (storageObject.state === 'pause') continue;\n      taskSeries.push(storageObject);\n    }\n\n    let index;\n    taskSeries.forEach((storageObject) => {\n      index = this.taskType.series.indexOf(storageObject);\n      index !== -1 && this.taskType.series.splice(index, 1);\n      if (this.taskType.uninitial.includes(storageObject)) {\n        this.initRequest(storageObject).then(({ err, init }) => {\n          if (!err && init) {\n            this.upload(storageObject);\n          }\n        });\n      } else {\n        this.upload(storageObject);\n      }\n    });\n  }\n\n```\n\n4. refreshTasks  \n根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。\n```js\n/* 刷新任务列表 */\n  @action\n  refreshTasks = (region) => {\n    // 统计空闲任务\n    const storageObject = this.fileStorage.get(region);\n    if (!storageObject) return;\n\n    if (this.taskType.series.length >= this.multiTaskCount) return;\n\n    for (let i = 0; i < storageObject.length; i += 1) {\n      if (this.taskType.series.length === this.multiTaskCount) break;\n      if (\n        storageObject[i].index !== storageObject[i].total\n        &&\n        (storageObject[i].state === 'pending' || storageObject[i].state === 'uninitial')\n        &&\n        !this.taskType.series.includes(storageObject[i])\n      ) {\n        this.taskType.series.push(storageObject[i]);\n      }\n    }\n  }\n```\n\n5. upload & update  \n根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。\n```js\n/**\n   * [upload 分割文件发起上传请求]\n   * @param  {[Object]} file    [description]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   */\n  @action\n  upload = (storageObject) => {\n    let params = {\n      bucket: storageObject.region,\n      object: storageObject.name,\n      prefix: storageObject.prefix,\n      uploadId: storageObject.uploadId,\n    };\n    let single = false; // 不分片\n    /* 异常状态退出 */\n    if (!this.isValidUploadingTask(storageObject)) return;\n\n    if (storageObject.state === 'pending') {\n      this.taskType.pending.splice(this.taskType.pending.indexOf(storageObject), 1);\n      this.taskType.uploading.push(storageObject);\n      storageObject.state = 'uploading';\n    }\n\n    const num = storageObject.index;\n\n    if (num === 0 && storageObject.size <= storageObject.blockSize) {\n      // 不用分片的情况\n      single = true;\n    } else if (num === storageObject.total) {\n      // 所有分片都已经发出\n      return;\n    }\n    const nextSize = Math.min((num + 1) * storageObject.blockSize, storageObject.size);\n    const fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);\n    params = Object.assign(params, {\n      partNumber: num + 1,\n    });\n    storageObject.activePoint = new Date();\n\n    this.uploadRequest({ params, data: fileData, single }).then((rsp) => {\n      if (rsp.code !== 200) {\n        openNotification('error', null, (rsp.result.data ? rsp.result.data.Code : this.lang.lang.uploadError));\n        this.markError(storageObject);\n        this.startTasks(params.bucket);\n        return;\n      }\n      const { completed, etags } = this.update({\n        region: params.bucket,\n        etag: rsp.result.etag,\n        size: fileData.size,\n        id: storageObject.id,\n        index: params.partNumber,\n      });\n      if (completed) {\n        (single ?\n          () => {\n            this.complete(storageObject, params.bucket);\n          } :\n          (partEtags) => {\n            this.completeRequest({\n              bucket: params.bucket,\n              uploadId: params.uploadId,\n              object: params.object,\n              prefix: params.prefix,\n              partEtags,\n            }, storageObject);\n          })(etags);\n      } else {\n        this.upload(storageObject);\n      }\n    }).catch((error) => {\n      this.markError(storageObject);\n      this.startTasks(params.bucket);\n      console.log(`${params.bucket}_${params.object} upload error: ${error}`);\n    });\n    storageObject.index += 1;\n  }\n\n```\n\n7. complete  \n当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。\n```js\n/**\n   * [completeRequest 完成所有分片数据上传]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   * @param  {[String]}   _params.partEtags [upload id]\n   * @param  {[Object]} file [文件对象]\n   */\n  @action completeRequest = (params, file) => {\n    postDataPro(\n      {\n        ...{\n          ...params,\n          ...{\n            object: params.prefix + params.object,\n          },\n        },\n        partEtags: {\n          CompleteMultipartUpload: {\n            Part: params.partEtags.map(info => ({\n              PartNumber: info.number,\n              ETag: info.etag,\n            })),\n          },\n        },\n      },\n      objectResourceApi.object.completeFragmentUpload\n    ).then((data) => {\n      this.complete(file, params.bucket);\n    }).catch((error) => {\n      this.startTasks(params.bucket);\n      this.markError(file);\n    });\n  }\n\n  /**\n   * [complete 完成上传]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} bucket [桶名]\n   */\n  @action\n  complete = (storageObject) => {\n    const index = this.taskType.uploading.indexOf(storageObject);\n    this.taskType.uploading.splice(index, 1);\n    this.taskType.break.push(storageObject);\n    storageObject.completionTime = (new Date().toTimeString()).split(' ')[0];\n    storageObject.state = 'break';\n    storageObject.speed = '';\n    storageObject.index = storageObject.total;\n\n    this.startTasks(storageObject.region);\n  };\n\n```\n\n#### 其它操作\n\n1. 暂停文件上传  \n将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。\n\n2. 开始暂停的上传任务  \n将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。\n\n3. 续传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。\n\n4. 重传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。\n\n#### 一些关键代码\n\n1. 一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。\n```js\n/**\n   * [update 更新本地上传记录]\n   * @param {[String]} region [桶名]\n   * @param {[String]} etag [分片标志]\n   */\n  @action\n  update = ({\n    region, etag, size, id, index,\n  }) => {\n    const target = this.fileStorage.get(region);\n    for (let i = 0; i < target.length; i += 1) {\n      if (target[i].id === id) {\n        target[i].speed = `${(size / 1024 / 1024 / (((new Date() - target[i].activePoint) / 1000))).toFixed(2)} MB/S`;\n        if (target[i].speed === '0.00 MB/S') {\n          target[i].speed = `${formatSizeStr(size)}/S`;\n        }\n        target[i].partEtags = target[i].partEtags.filter(etagItem => etagItem.number !== index);\n        target[i].partEtags.push({\n          number: index,\n          etag,\n        });\n        // 最后一个分片恰好又暂停的情况\n        if (index === target[i].total) {\n          if (target[i].state === 'pause') {\n            index -= 1;\n          }\n        }\n        // 判断上传是否完成\n        if (target[i].total === 0 || target[i].partEtags.toJS().length === target[i].total) {\n          return {\n            completed: true,\n            etags: target[i].partEtags,\n          };\n        }\n        return {\n          completed: false,\n        };\n      }\n    }\n  }\n```\n\n2. 在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口  \n之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库[aws4](https://github.com/mhart/aws4)，用里面的签名方法对前端传过来的`ak/sk`进行url预签名，这里给出中间件`Request`方法的编写逻辑：\n```js\n\n/**\n  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]\n  * params1: {bucket: testBucket, uid: testUid, bucketId: testID}\n  * params2: /admin/bucket?format=json&bucket={bucket}&uid={uid}&bucket-id={bucketId}\n  * return: /admin/bucket?format=json&bucket=testBucket&uid=testUid&bucket-id=testID\n  * \n  * @author nojsja\n  * @param  {[Object]} varObj [替换变量对象]\n  * @param {[String]} templateStr [模板字符串]\n  * @return {[String]} result [模板字符串]\n  */\nexports.templateStrTransform = (varObj, templateStr) => {\n  if (typeof varObj !== 'object' || !templateStr) return templateStr;\n  for (const attr in varObj) {\n    if (varObj.hasOwnProperty(attr) && (!Number(attr) && Number(attr) !== 0 )) {\n      templateStr = templateStr.replace(new RegExp(`{${attr}}`, 'g'), varObj[attr]);\n    }\n  }\n  return templateStr;\n};\n\n /**\n  * api对象实例：\n    listFragmentUpload: {\n      url: '/{bucket}/{object}?uploadId={uploadId}', // 包含动态模板字符串\n      method: 'get',\n      port: '7480',\n      type: 'xml', // 表明需要将接口返回数据进行xml -> json转换\n      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -> xml转换\n    }\n  *\n */\ncommonApiConfig = (headers, api, data) => {\n  if (isEnvDev && !isEnvMock) {\n    return {\n      url: `http://10.0.9.149:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.149:${api.port}`,\n      hostname: `http://10.0.9.149`,\n      ip: '10.0.9.149',\n    };\n  } else if(isEnvDev && isEnvMock) {\n    return {\n      url: `http://10.0.7.15/mock/63${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.154:${api.port}`,\n      hostname: `http://10.0.9.154`,\n      ip: '10.0.9.154',\n    };\n  } else {\n    return {\n      url: `http://127.0.0.1:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://127.0.0.1:${api.port}`,\n      hostname: `http://127.0.0.1`,\n      ip: `127.0.0.1`,\n    };\n  }\n\n}\n\n/**\n  * aws4RequestSign [调用asw4的sign方法签名一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\n\n/**\n * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置\n *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档\n*/\naws4RequestSign = (req, path, api, data) => {\n  const aws4 = require('aws4');\n  var opts = {\n    host: `${(commonApiConfig(req.headers, api, data)).host}`,\n    path,\n    url: (commonApiConfig(req.headers, api, data)).hostname,\n    signQuery: true,\n    service: process.env.AWS_SERVICE,\n    region: process.env.AWS_REGION,\n    method: api.method.toUpperCase(),\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: req.body,\n    data: '',\n  }\n  // assumes AWS credentials are available in process.env\n  aws4.sign(opts)\n\n  return opts;\n}\n\n/**\n  * commonRequestAuth [签名并调用一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\nconst commonRequestAuth = (params, api, req, data) => {\n  const iAxios = axios.create();\n  iAxios.defaults.timeout = params['$no_timeout$'] ? 0 : 30e3;\n  // 使用params对象转换存在动态变量的url  \n  const parsedUrl = templateStrTransform(params, api.url);\n  // aws env set\n  awsEnvRegistry({\n    key: req.cookies.access_key,\n    secret: req.cookies.secret_key,\n  });\n  // 签署请求头\n  const postData = jsonToXml(data, api.reqType);\n  const awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);\n\n  return new Promise((resolve, reject) => {\n    iAxios.request({\n      baseURL: awsOpts.host,\n      url: awsOpts.path,\n      method: awsOpts.method,\n      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),\n      data: postData,\n      responseType: api.resType,\n    }).then((response) => {\n\n      // 设置header返回\n      if (api.type === 'header') return resolve({\n        result: response.headers,\n        code: 200,\n      });\n      \n      // 转换xml\n      if (api.type === 'xml') {\n        try {\n          xmlToJson(response.data, api.type, (data) => {\n            resolve({\n              result: data,\n              code: 200,\n              // data: jsonArrayToString(data),\n              headers: response.headers,\n            });\n          });\n        } catch (error) {\n          resolve({\n            code: 500,\n            result: global.lang.xml_parse_error,\n          });\n        }\n      }\n\n      resolve({\n        result: response.data,\n        code: 200,\n      });\n    }).catch((error) => {\n      console.log(error.response.data);\n      xmlToJson(error.response.data, 'xml', (data) => {\n        resolve({\n          code: 600,\n          result: { headers: error.config, data: data.Error ? data.Error : error.response.data}\n        })\n      })\n    });\n  });\n};\n```\n\n3. 在web端使用ak/sk预签名算法调用 s3 restful 原生接口  \n如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件[aws4-axios](https://github.com/jamesmbourne/aws4-axios)，用法如下：\n```js\nimport axios from \"axios\";\nimport { aws4Interceptor } from \"aws4-axios\";\n\nconst client = axios.create();\n\nconst interceptor = aws4Interceptor({\n  region: \"eu-west-2\",\n  service: \"execute-api\"\n}, {\n  accessKeyId: '',\n  secretAccessKey: ''\n});\n\nclient.interceptors.request.use(interceptor);\n\n// Requests made using Axios will now be signed\nclient.get(\"https://example.com/foo\").then(res => {\n  // ...\n});\n\n```\n","source":"_posts/基于s3对象存储多文件分片上传的Javascript实现(一).md","raw":"---\ntitle: \"基于s3对象存储多文件分片上传的Javascript实现(一)\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-03-07 16:18:00\nsubtitle: \"aws s3 javascript\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- upload\n- aws\n- s3\ncategories:\n- Javascript\nupdateDate: 2020-03-07 16:18:00\n---\n\n### 目录\n\n1. 概述\n\n2. 浏览器文件操作限制\n\n3. 前端多文件分片上传的原理和实现\n\n### 预览\n\n![upload](/blogs/img/article/upload.png)\n\n### 概述\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。\n\n### 浏览器文件操作限制\n\n* HTML5新特性`input[type=file]`支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。\n* 浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。 \n* 相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。\n\n### 前端多文件分片上传的原理和实现\n\n_完整Github[源码](https://github.com/NoJsJa/javascript-learning/tree/master/file-slice-upload)_\n\n> 使用了React16/Webpack4/Mobx状态管理库\n\n* 支持批量文件分割并行上传\n* 多文件操作：暂停/恢复/终止/续传/重传\n* 自定义上传任务数目、单个分片大小\n\n#### 运行流程图\n\n![upload](/blogs/img/article/shards_upload.jpg)\n\n#### 主要流程\n\n1. cacheFile  \n前端通过input组件拿到所有文件地址并缓存起来。\n```js\n /**\n   * [cacheFile 缓存即将注册的文件]\n   */\n  @action\n  cacheFile = (files, bucket) => {\n    const symbolArr = this.filesCache.map(file => this.getSymbol(file));\n    const filtedFiles = [];\n    let uploadingFileFound = false;\n    files.forEach((file) => {\n      if (!symbolArr.includes(this.getSymbol(file))) {\n        if (this.findIsUploading(this.getSymbol(file), bucket)) {\n          uploadingFileFound = true;\n          filtedFiles.push(file.name);\n        } else {\n          this.filesCache.push(file);\n          symbolArr.push(this.getSymbol(file));\n        }\n      }\n    });\n    if (!files.length) openNotification('warning', null, this.lang.lang.noFilCanBeUploaded);\n    if (uploadingFileFound) openNotification('warning', null, this.lang.lang.uploadingFileReuploadTips + filtedFiles.join(', '));\n  }\n```\n\n2. registry  \n根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。\n```js\n/**\n   * [registry 注册上传文件信息]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} uploadId [文件上传进程id]\n   * @param {[Object]} state [文件初始化状态]\n   */\n  @action registry = (files, region, prefix) => {\n    let fileObj = null;\n    this.loading = true;\n    files.forEach((file) => {\n      if (this.files.includes(file)) {\n        return;\n      }\n      this.files.push(file);\n      fileObj = {\n        name: file.webkitRelativePath || file.name,\n        prefix: prefix || '',\n        size: file.size,\n        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split('.').pop()).type,\n        state: 'uninitial',\n        creationTime: '',\n        completionTime: '',\n        index: 0,\n        file,\n        initialized: false,\n        partEtags: [],\n        region,\n        blockSize: this.blockSize,\n        total: Math.ceil(file.size / this.blockSize),\n        activePoint: new Date(),\n        speed: '0 MB/S',\n        id: encodeURIComponent(new Date() + file.name + file.type + file.size),\n      };\n      const obj = observable(fileObj);\n      this.taskType.uninitial.push(obj);\n      this.taskType.series.push(obj);\n      if (!this.fileStorage.get(region)) {\n        this.fileStorage.set(region, [obj]);\n      } else {\n        this.fileStorage.get(region).push(obj);\n      }\n      // this.fileStorageMap.set(file, obj);\n    });\n    this.loading = false;\n  }\n}\n```\n\n3. startTasks  \n获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。\n```js\n/**\n   * [startTasks 开启上传任务队列]\n   * @param  {[String]} region [桶名]\n   */\n  startTasks = (region) => {\n    // 根据空闲任务类型和空闲任务并发限制开启空闲任务\n    // let storageObject;\n    this.refreshTasks(region);\n    if (this.isUploadListEmpty(region)) return;\n\n    const maxLength = this.multiTaskCount - this.taskType.uploading.length;\n    const taskSeries = [];\n    for (let i = 0; i < (maxLength) && this.taskType.series[i]; i += 1) {\n      // const file = this.taskType.series.shift();\n      const storageObject = this.taskType.series[i];\n      if (storageObject.state === 'uploading') continue; // 上传中\n      if (storageObject.state === 'pause') continue;\n      taskSeries.push(storageObject);\n    }\n\n    let index;\n    taskSeries.forEach((storageObject) => {\n      index = this.taskType.series.indexOf(storageObject);\n      index !== -1 && this.taskType.series.splice(index, 1);\n      if (this.taskType.uninitial.includes(storageObject)) {\n        this.initRequest(storageObject).then(({ err, init }) => {\n          if (!err && init) {\n            this.upload(storageObject);\n          }\n        });\n      } else {\n        this.upload(storageObject);\n      }\n    });\n  }\n\n```\n\n4. refreshTasks  \n根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。\n```js\n/* 刷新任务列表 */\n  @action\n  refreshTasks = (region) => {\n    // 统计空闲任务\n    const storageObject = this.fileStorage.get(region);\n    if (!storageObject) return;\n\n    if (this.taskType.series.length >= this.multiTaskCount) return;\n\n    for (let i = 0; i < storageObject.length; i += 1) {\n      if (this.taskType.series.length === this.multiTaskCount) break;\n      if (\n        storageObject[i].index !== storageObject[i].total\n        &&\n        (storageObject[i].state === 'pending' || storageObject[i].state === 'uninitial')\n        &&\n        !this.taskType.series.includes(storageObject[i])\n      ) {\n        this.taskType.series.push(storageObject[i]);\n      }\n    }\n  }\n```\n\n5. upload & update  \n根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。\n```js\n/**\n   * [upload 分割文件发起上传请求]\n   * @param  {[Object]} file    [description]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   */\n  @action\n  upload = (storageObject) => {\n    let params = {\n      bucket: storageObject.region,\n      object: storageObject.name,\n      prefix: storageObject.prefix,\n      uploadId: storageObject.uploadId,\n    };\n    let single = false; // 不分片\n    /* 异常状态退出 */\n    if (!this.isValidUploadingTask(storageObject)) return;\n\n    if (storageObject.state === 'pending') {\n      this.taskType.pending.splice(this.taskType.pending.indexOf(storageObject), 1);\n      this.taskType.uploading.push(storageObject);\n      storageObject.state = 'uploading';\n    }\n\n    const num = storageObject.index;\n\n    if (num === 0 && storageObject.size <= storageObject.blockSize) {\n      // 不用分片的情况\n      single = true;\n    } else if (num === storageObject.total) {\n      // 所有分片都已经发出\n      return;\n    }\n    const nextSize = Math.min((num + 1) * storageObject.blockSize, storageObject.size);\n    const fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);\n    params = Object.assign(params, {\n      partNumber: num + 1,\n    });\n    storageObject.activePoint = new Date();\n\n    this.uploadRequest({ params, data: fileData, single }).then((rsp) => {\n      if (rsp.code !== 200) {\n        openNotification('error', null, (rsp.result.data ? rsp.result.data.Code : this.lang.lang.uploadError));\n        this.markError(storageObject);\n        this.startTasks(params.bucket);\n        return;\n      }\n      const { completed, etags } = this.update({\n        region: params.bucket,\n        etag: rsp.result.etag,\n        size: fileData.size,\n        id: storageObject.id,\n        index: params.partNumber,\n      });\n      if (completed) {\n        (single ?\n          () => {\n            this.complete(storageObject, params.bucket);\n          } :\n          (partEtags) => {\n            this.completeRequest({\n              bucket: params.bucket,\n              uploadId: params.uploadId,\n              object: params.object,\n              prefix: params.prefix,\n              partEtags,\n            }, storageObject);\n          })(etags);\n      } else {\n        this.upload(storageObject);\n      }\n    }).catch((error) => {\n      this.markError(storageObject);\n      this.startTasks(params.bucket);\n      console.log(`${params.bucket}_${params.object} upload error: ${error}`);\n    });\n    storageObject.index += 1;\n  }\n\n```\n\n7. complete  \n当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。\n```js\n/**\n   * [completeRequest 完成所有分片数据上传]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   * @param  {[String]}   _params.partEtags [upload id]\n   * @param  {[Object]} file [文件对象]\n   */\n  @action completeRequest = (params, file) => {\n    postDataPro(\n      {\n        ...{\n          ...params,\n          ...{\n            object: params.prefix + params.object,\n          },\n        },\n        partEtags: {\n          CompleteMultipartUpload: {\n            Part: params.partEtags.map(info => ({\n              PartNumber: info.number,\n              ETag: info.etag,\n            })),\n          },\n        },\n      },\n      objectResourceApi.object.completeFragmentUpload\n    ).then((data) => {\n      this.complete(file, params.bucket);\n    }).catch((error) => {\n      this.startTasks(params.bucket);\n      this.markError(file);\n    });\n  }\n\n  /**\n   * [complete 完成上传]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} bucket [桶名]\n   */\n  @action\n  complete = (storageObject) => {\n    const index = this.taskType.uploading.indexOf(storageObject);\n    this.taskType.uploading.splice(index, 1);\n    this.taskType.break.push(storageObject);\n    storageObject.completionTime = (new Date().toTimeString()).split(' ')[0];\n    storageObject.state = 'break';\n    storageObject.speed = '';\n    storageObject.index = storageObject.total;\n\n    this.startTasks(storageObject.region);\n  };\n\n```\n\n#### 其它操作\n\n1. 暂停文件上传  \n将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。\n\n2. 开始暂停的上传任务  \n将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。\n\n3. 续传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。\n\n4. 重传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。\n\n#### 一些关键代码\n\n1. 一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。\n```js\n/**\n   * [update 更新本地上传记录]\n   * @param {[String]} region [桶名]\n   * @param {[String]} etag [分片标志]\n   */\n  @action\n  update = ({\n    region, etag, size, id, index,\n  }) => {\n    const target = this.fileStorage.get(region);\n    for (let i = 0; i < target.length; i += 1) {\n      if (target[i].id === id) {\n        target[i].speed = `${(size / 1024 / 1024 / (((new Date() - target[i].activePoint) / 1000))).toFixed(2)} MB/S`;\n        if (target[i].speed === '0.00 MB/S') {\n          target[i].speed = `${formatSizeStr(size)}/S`;\n        }\n        target[i].partEtags = target[i].partEtags.filter(etagItem => etagItem.number !== index);\n        target[i].partEtags.push({\n          number: index,\n          etag,\n        });\n        // 最后一个分片恰好又暂停的情况\n        if (index === target[i].total) {\n          if (target[i].state === 'pause') {\n            index -= 1;\n          }\n        }\n        // 判断上传是否完成\n        if (target[i].total === 0 || target[i].partEtags.toJS().length === target[i].total) {\n          return {\n            completed: true,\n            etags: target[i].partEtags,\n          };\n        }\n        return {\n          completed: false,\n        };\n      }\n    }\n  }\n```\n\n2. 在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口  \n之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库[aws4](https://github.com/mhart/aws4)，用里面的签名方法对前端传过来的`ak/sk`进行url预签名，这里给出中间件`Request`方法的编写逻辑：\n```js\n\n/**\n  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]\n  * params1: {bucket: testBucket, uid: testUid, bucketId: testID}\n  * params2: /admin/bucket?format=json&bucket={bucket}&uid={uid}&bucket-id={bucketId}\n  * return: /admin/bucket?format=json&bucket=testBucket&uid=testUid&bucket-id=testID\n  * \n  * @author nojsja\n  * @param  {[Object]} varObj [替换变量对象]\n  * @param {[String]} templateStr [模板字符串]\n  * @return {[String]} result [模板字符串]\n  */\nexports.templateStrTransform = (varObj, templateStr) => {\n  if (typeof varObj !== 'object' || !templateStr) return templateStr;\n  for (const attr in varObj) {\n    if (varObj.hasOwnProperty(attr) && (!Number(attr) && Number(attr) !== 0 )) {\n      templateStr = templateStr.replace(new RegExp(`{${attr}}`, 'g'), varObj[attr]);\n    }\n  }\n  return templateStr;\n};\n\n /**\n  * api对象实例：\n    listFragmentUpload: {\n      url: '/{bucket}/{object}?uploadId={uploadId}', // 包含动态模板字符串\n      method: 'get',\n      port: '7480',\n      type: 'xml', // 表明需要将接口返回数据进行xml -> json转换\n      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -> xml转换\n    }\n  *\n */\ncommonApiConfig = (headers, api, data) => {\n  if (isEnvDev && !isEnvMock) {\n    return {\n      url: `http://10.0.9.149:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.149:${api.port}`,\n      hostname: `http://10.0.9.149`,\n      ip: '10.0.9.149',\n    };\n  } else if(isEnvDev && isEnvMock) {\n    return {\n      url: `http://10.0.7.15/mock/63${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.154:${api.port}`,\n      hostname: `http://10.0.9.154`,\n      ip: '10.0.9.154',\n    };\n  } else {\n    return {\n      url: `http://127.0.0.1:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://127.0.0.1:${api.port}`,\n      hostname: `http://127.0.0.1`,\n      ip: `127.0.0.1`,\n    };\n  }\n\n}\n\n/**\n  * aws4RequestSign [调用asw4的sign方法签名一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\n\n/**\n * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置\n *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档\n*/\naws4RequestSign = (req, path, api, data) => {\n  const aws4 = require('aws4');\n  var opts = {\n    host: `${(commonApiConfig(req.headers, api, data)).host}`,\n    path,\n    url: (commonApiConfig(req.headers, api, data)).hostname,\n    signQuery: true,\n    service: process.env.AWS_SERVICE,\n    region: process.env.AWS_REGION,\n    method: api.method.toUpperCase(),\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: req.body,\n    data: '',\n  }\n  // assumes AWS credentials are available in process.env\n  aws4.sign(opts)\n\n  return opts;\n}\n\n/**\n  * commonRequestAuth [签名并调用一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\nconst commonRequestAuth = (params, api, req, data) => {\n  const iAxios = axios.create();\n  iAxios.defaults.timeout = params['$no_timeout$'] ? 0 : 30e3;\n  // 使用params对象转换存在动态变量的url  \n  const parsedUrl = templateStrTransform(params, api.url);\n  // aws env set\n  awsEnvRegistry({\n    key: req.cookies.access_key,\n    secret: req.cookies.secret_key,\n  });\n  // 签署请求头\n  const postData = jsonToXml(data, api.reqType);\n  const awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);\n\n  return new Promise((resolve, reject) => {\n    iAxios.request({\n      baseURL: awsOpts.host,\n      url: awsOpts.path,\n      method: awsOpts.method,\n      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),\n      data: postData,\n      responseType: api.resType,\n    }).then((response) => {\n\n      // 设置header返回\n      if (api.type === 'header') return resolve({\n        result: response.headers,\n        code: 200,\n      });\n      \n      // 转换xml\n      if (api.type === 'xml') {\n        try {\n          xmlToJson(response.data, api.type, (data) => {\n            resolve({\n              result: data,\n              code: 200,\n              // data: jsonArrayToString(data),\n              headers: response.headers,\n            });\n          });\n        } catch (error) {\n          resolve({\n            code: 500,\n            result: global.lang.xml_parse_error,\n          });\n        }\n      }\n\n      resolve({\n        result: response.data,\n        code: 200,\n      });\n    }).catch((error) => {\n      console.log(error.response.data);\n      xmlToJson(error.response.data, 'xml', (data) => {\n        resolve({\n          code: 600,\n          result: { headers: error.config, data: data.Error ? data.Error : error.response.data}\n        })\n      })\n    });\n  });\n};\n```\n\n3. 在web端使用ak/sk预签名算法调用 s3 restful 原生接口  \n如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件[aws4-axios](https://github.com/jamesmbourne/aws4-axios)，用法如下：\n```js\nimport axios from \"axios\";\nimport { aws4Interceptor } from \"aws4-axios\";\n\nconst client = axios.create();\n\nconst interceptor = aws4Interceptor({\n  region: \"eu-west-2\",\n  service: \"execute-api\"\n}, {\n  accessKeyId: '',\n  secretAccessKey: ''\n});\n\nclient.interceptors.request.use(interceptor);\n\n// Requests made using Axios will now be signed\nclient.get(\"https://example.com/foo\").then(res => {\n  // ...\n});\n\n```\n","slug":"基于s3对象存储多文件分片上传的Javascript实现-一","published":1,"updated":"2020-08-25T03:10:04.563Z","_id":"ckba8cy9d000054959iqpg7oc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol><li><p>概述</p></li><li><p>浏览器文件操作限制</p></li><li><p>前端多文件分片上传的原理和实现</p></li></ol><h3 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h3><p><img src=\"/blogs/img/article/upload.png\" alt=\"upload\"></p><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。</p><h3 id=\"浏览器文件操作限制\"><a href=\"#浏览器文件操作限制\" class=\"headerlink\" title=\"浏览器文件操作限制\"></a>浏览器文件操作限制</h3><ul><li>HTML5新特性<code>input[type=file]</code>支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。</li><li>浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。</li><li>相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。</li></ul><h3 id=\"前端多文件分片上传的原理和实现\"><a href=\"#前端多文件分片上传的原理和实现\" class=\"headerlink\" title=\"前端多文件分片上传的原理和实现\"></a>前端多文件分片上传的原理和实现</h3><p><em>完整Github<a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">源码</a></em></p><blockquote><p>使用了React16/Webpack4/Mobx状态管理库</p></blockquote><ul><li>支持批量文件分割并行上传</li><li>多文件操作：暂停/恢复/终止/续传/重传</li><li>自定义上传任务数目、单个分片大小</li></ul><h4 id=\"运行流程图\"><a href=\"#运行流程图\" class=\"headerlink\" title=\"运行流程图\"></a>运行流程图</h4><p><img src=\"/blogs/img/article/shards_upload.jpg\" alt=\"upload\"></p><h4 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h4><ol><li><p>cacheFile<br>前端通过input组件拿到所有文件地址并缓存起来。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [cacheFile 缓存即将注册的文件]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> @action</span><br><span class=\"line\"> cacheFile = <span class=\"function\">(<span class=\"params\">files, bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> symbolArr = <span class=\"keyword\">this</span>.filesCache.map(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> <span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">   <span class=\"keyword\">const</span> filtedFiles = [];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> uploadingFileFound = <span class=\"literal\">false</span>;</span><br><span class=\"line\">   files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!symbolArr.includes(<span class=\"keyword\">this</span>.getSymbol(file))) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findIsUploading(<span class=\"keyword\">this</span>.getSymbol(file), bucket)) &#123;</span><br><span class=\"line\">         uploadingFileFound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         filtedFiles.push(file.name);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.filesCache.push(file);</span><br><span class=\"line\">         symbolArr.push(<span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!files.length) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.noFilCanBeUploaded);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (uploadingFileFound) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.uploadingFileReuploadTips + filtedFiles.join(<span class=\"string\">', '</span>));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>registry<br>根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [registry 注册上传文件信息]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [文件上传进程id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>state [文件初始化状态]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action registry = <span class=\"function\">(<span class=\"params\">files, region, prefix</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.includes(file)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.files.push(file);</span><br><span class=\"line\">      fileObj = &#123;</span><br><span class=\"line\">        name: file.webkitRelativePath || file.name,</span><br><span class=\"line\">        prefix: prefix || <span class=\"string\">''</span>,</span><br><span class=\"line\">        size: file.size,</span><br><span class=\"line\">        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split(<span class=\"string\">'.'</span>).pop()).type,</span><br><span class=\"line\">        state: <span class=\"string\">'uninitial'</span>,</span><br><span class=\"line\">        creationTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        completionTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        index: <span class=\"number\">0</span>,</span><br><span class=\"line\">        file,</span><br><span class=\"line\">        initialized: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        partEtags: [],</span><br><span class=\"line\">        region,</span><br><span class=\"line\">        blockSize: <span class=\"keyword\">this</span>.blockSize,</span><br><span class=\"line\">        total: <span class=\"built_in\">Math</span>.ceil(file.size / <span class=\"keyword\">this</span>.blockSize),</span><br><span class=\"line\">        activePoint: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">        speed: <span class=\"string\">'0 MB/S'</span>,</span><br><span class=\"line\">        id: <span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() + file.name + file.type + file.size),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obj = observable(fileObj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uninitial.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.series.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fileStorage.get(region)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.set(region, [obj]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.get(region).push(obj);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// this.fileStorageMap.set(file, obj);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>startTasks<br>获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [startTasks 开启上传任务队列]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  startTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据空闲任务类型和空闲任务并发限制开启空闲任务</span></span><br><span class=\"line\">    <span class=\"comment\">// let storageObject;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refreshTasks(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isUploadListEmpty(region)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxLength = <span class=\"keyword\">this</span>.multiTaskCount - <span class=\"keyword\">this</span>.taskType.uploading.length;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> taskSeries = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; (maxLength) &amp;&amp; <span class=\"keyword\">this</span>.taskType.series[i]; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// const file = this.taskType.series.shift();</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.taskType.series[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'uploading'</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 上传中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pause'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      taskSeries.push(storageObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">    taskSeries.forEach(<span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      index = <span class=\"keyword\">this</span>.taskType.series.indexOf(storageObject);</span><br><span class=\"line\">      index !== <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.taskType.series.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.uninitial.includes(storageObject)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initRequest(storageObject).then(<span class=\"function\">(<span class=\"params\">&#123; err, init &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; init) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>refreshTasks<br>根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 刷新任务列表 */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  refreshTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 统计空闲任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!storageObject) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length &gt;= <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; storageObject.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length === <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        storageObject[i].index !== storageObject[i].total</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        (storageObject[i].state === <span class=\"string\">'pending'</span> || storageObject[i].state === <span class=\"string\">'uninitial'</span>)</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        !<span class=\"keyword\">this</span>.taskType.series.includes(storageObject[i])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.taskType.series.push(storageObject[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>upload &amp; update<br>根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [upload 分割文件发起上传请求]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file    [description]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  upload = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">      bucket: storageObject.region,</span><br><span class=\"line\">      object: storageObject.name,</span><br><span class=\"line\">      prefix: storageObject.prefix,</span><br><span class=\"line\">      uploadId: storageObject.uploadId,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> single = <span class=\"literal\">false</span>; <span class=\"comment\">// 不分片</span></span><br><span class=\"line\">    <span class=\"comment\">/* 异常状态退出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isValidUploadingTask(storageObject)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.pending.splice(<span class=\"keyword\">this</span>.taskType.pending.indexOf(storageObject), <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uploading.push(storageObject);</span><br><span class=\"line\">      storageObject.state = <span class=\"string\">'uploading'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = storageObject.index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"number\">0</span> &amp;&amp; storageObject.size &lt;= storageObject.blockSize) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不用分片的情况</span></span><br><span class=\"line\">      single = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === storageObject.total) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 所有分片都已经发出</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextSize = <span class=\"built_in\">Math</span>.min((num + <span class=\"number\">1</span>) * storageObject.blockSize, storageObject.size);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);</span><br><span class=\"line\">    params = <span class=\"built_in\">Object</span>.assign(params, &#123;</span><br><span class=\"line\">      partNumber: num + <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.activePoint = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.uploadRequest(&#123; params, <span class=\"attr\">data</span>: fileData, single &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        openNotification(<span class=\"string\">'error'</span>, <span class=\"literal\">null</span>, (rsp.result.data ? rsp.result.data.Code : <span class=\"keyword\">this</span>.lang.lang.uploadError));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; completed, etags &#125; = <span class=\"keyword\">this</span>.update(&#123;</span><br><span class=\"line\">        region: params.bucket,</span><br><span class=\"line\">        etag: rsp.result.etag,</span><br><span class=\"line\">        size: fileData.size,</span><br><span class=\"line\">        id: storageObject.id,</span><br><span class=\"line\">        index: params.partNumber,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (completed) &#123;</span><br><span class=\"line\">        (single ?</span><br><span class=\"line\">          () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.complete(storageObject, params.bucket);</span><br><span class=\"line\">          &#125; :</span><br><span class=\"line\">          (partEtags) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.completeRequest(&#123;</span><br><span class=\"line\">              bucket: params.bucket,</span><br><span class=\"line\">              uploadId: params.uploadId,</span><br><span class=\"line\">              object: params.object,</span><br><span class=\"line\">              prefix: params.prefix,</span><br><span class=\"line\">              partEtags,</span><br><span class=\"line\">            &#125;, storageObject);</span><br><span class=\"line\">          &#125;)(etags);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;params.bucket&#125;</span>_<span class=\"subst\">$&#123;params.object&#125;</span> upload error: <span class=\"subst\">$&#123;error&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.index += <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>complete<br>当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [completeRequest 完成所有分片数据上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.partEtags [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action completeRequest = <span class=\"function\">(<span class=\"params\">params, file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    postDataPro(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ...&#123;</span><br><span class=\"line\">          ...params,</span><br><span class=\"line\">          ...&#123;</span><br><span class=\"line\">            object: params.prefix + params.object,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        partEtags: &#123;</span><br><span class=\"line\">          CompleteMultipartUpload: &#123;</span><br><span class=\"line\">            Part: params.partEtags.map(<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> (&#123;</span><br><span class=\"line\">              PartNumber: info.number,</span><br><span class=\"line\">              ETag: info.etag,</span><br><span class=\"line\">            &#125;)),</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      objectResourceApi.object.completeFragmentUpload</span><br><span class=\"line\">    ).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.complete(file, params.bucket);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [complete 完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>bucket [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  complete = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.taskType.uploading.indexOf(storageObject);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.uploading.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.break.push(storageObject);</span><br><span class=\"line\">    storageObject.completionTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString()).split(<span class=\"string\">' '</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    storageObject.state = <span class=\"string\">'break'</span>;</span><br><span class=\"line\">    storageObject.speed = <span class=\"string\">''</span>;</span><br><span class=\"line\">    storageObject.index = storageObject.total;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startTasks(storageObject.region);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"其它操作\"><a href=\"#其它操作\" class=\"headerlink\" title=\"其它操作\"></a>其它操作</h4><ol><li><p>暂停文件上传<br>将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。</p></li><li><p>开始暂停的上传任务<br>将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。</p></li><li><p>续传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。</p></li><li><p>重传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。</p></li></ol><h4 id=\"一些关键代码\"><a href=\"#一些关键代码\" class=\"headerlink\" title=\"一些关键代码\"></a>一些关键代码</h4><ol><li><p>一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [update 更新本地上传记录]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>etag [分片标志]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  update = (&#123;</span><br><span class=\"line\">    region, etag, size, id, index,</span><br><span class=\"line\">  &#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; target.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target[i].id === id) &#123;</span><br><span class=\"line\">        target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;(size <span class=\"regexp\">/ 1024 /</span> <span class=\"number\">1024</span> <span class=\"regexp\">/ (((new Date() - target[i].activePoint) /</span> <span class=\"number\">1000</span>))).toFixed(<span class=\"number\">2</span>)&#125;</span> MB/S`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].speed === <span class=\"string\">'0.00 MB/S'</span>) &#123;</span><br><span class=\"line\">          target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;formatSizeStr(size)&#125;</span>/S`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        target[i].partEtags = target[i].partEtags.filter(<span class=\"function\"><span class=\"params\">etagItem</span> =&gt;</span> etagItem.number !== index);</span><br><span class=\"line\">        target[i].partEtags.push(&#123;</span><br><span class=\"line\">          number: index,</span><br><span class=\"line\">          etag,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 最后一个分片恰好又暂停的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target[i].state === <span class=\"string\">'pause'</span>) &#123;</span><br><span class=\"line\">            index -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断上传是否完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].total === <span class=\"number\">0</span> || target[i].partEtags.toJS().length === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            etags: target[i].partEtags,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          completed: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口<br>之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库<a href=\"https://github.com/mhart/aws4\" target=\"_blank\" rel=\"noopener\">aws4</a>，用里面的签名方法对前端传过来的<code>ak/sk</code>进行url预签名，这里给出中间件<code>Request</code>方法的编写逻辑：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * params1: &#123;bucket: testBucket, uid: testUid, bucketId: testID&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * params2: /admin/bucket?format=json&amp;bucket=&#123;bucket&#125;&amp;uid=&#123;uid&#125;&amp;bucket-id=&#123;bucketId&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * return: /admin/bucket?format=json&amp;bucket=testBucket&amp;uid=testUid&amp;bucket-id=testID</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>varObj [替换变量对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>templateStr [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return <span class=\"type\">&#123;[String]&#125;</span> </span>result [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.templateStrTransform = <span class=\"function\">(<span class=\"params\">varObj, templateStr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> varObj !== <span class=\"string\">'object'</span> || !templateStr) <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> attr <span class=\"keyword\">in</span> varObj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (varObj.hasOwnProperty(attr) &amp;&amp; (!<span class=\"built_in\">Number</span>(attr) &amp;&amp; <span class=\"built_in\">Number</span>(attr) !== <span class=\"number\">0</span> )) &#123;</span><br><span class=\"line\">      templateStr = templateStr.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`&#123;<span class=\"subst\">$&#123;attr&#125;</span>&#125;`</span>, <span class=\"string\">'g'</span>), varObj[attr]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * api对象实例：</span></span><br><span class=\"line\"><span class=\"comment\">    listFragmentUpload: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      url: '/&#123;bucket&#125;/&#123;object&#125;?uploadId=&#123;uploadId&#125;', // 包含动态模板字符串</span></span><br><span class=\"line\"><span class=\"comment\">      method: 'get',</span></span><br><span class=\"line\"><span class=\"comment\">      port: '7480',</span></span><br><span class=\"line\"><span class=\"comment\">      type: 'xml', // 表明需要将接口返回数据进行xml -&gt; json转换</span></span><br><span class=\"line\"><span class=\"comment\">      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -&gt; xml转换</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">commonApiConfig = <span class=\"function\">(<span class=\"params\">headers, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isEnvDev &amp;&amp; !isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.149`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.149'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isEnvDev &amp;&amp; isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.7.15/mock/63<span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.154:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.154`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.154'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://127.0.0.1`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">`127.0.0.1`</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * aws4RequestSign [调用asw4的sign方法签名一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置</span></span><br><span class=\"line\"><span class=\"comment\"> *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">aws4RequestSign = <span class=\"function\">(<span class=\"params\">req, path, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> aws4 = <span class=\"built_in\">require</span>(<span class=\"string\">'aws4'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</span><br><span class=\"line\">    host: <span class=\"string\">`<span class=\"subst\">$&#123;(commonApiConfig(req.headers, api, data)).host&#125;</span>`</span>,</span><br><span class=\"line\">    path,</span><br><span class=\"line\">    url: (commonApiConfig(req.headers, api, data)).hostname,</span><br><span class=\"line\">    signQuery: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    service: process.env.AWS_SERVICE,</span><br><span class=\"line\">    region: process.env.AWS_REGION,</span><br><span class=\"line\">    method: api.method.toUpperCase(),</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: req.body,</span><br><span class=\"line\">    data: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// assumes AWS credentials are available in process.env</span></span><br><span class=\"line\">  aws4.sign(opts)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> opts;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * commonRequestAuth [签名并调用一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonRequestAuth = <span class=\"function\">(<span class=\"params\">params, api, req, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">  iAxios.defaults.timeout = params[<span class=\"string\">'$no_timeout$'</span>] ? <span class=\"number\">0</span> : <span class=\"number\">30e3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用params对象转换存在动态变量的url  </span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parsedUrl = templateStrTransform(params, api.url);</span><br><span class=\"line\">  <span class=\"comment\">// aws env set</span></span><br><span class=\"line\">  awsEnvRegistry(&#123;</span><br><span class=\"line\">    key: req.cookies.access_key,</span><br><span class=\"line\">    secret: req.cookies.secret_key,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 签署请求头</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> postData = jsonToXml(data, api.reqType);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iAxios.request(&#123;</span><br><span class=\"line\">      baseURL: awsOpts.host,</span><br><span class=\"line\">      url: awsOpts.path,</span><br><span class=\"line\">      method: awsOpts.method,</span><br><span class=\"line\">      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),</span><br><span class=\"line\">      data: postData,</span><br><span class=\"line\">      responseType: api.resType,</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 设置header返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'header'</span>) <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">        result: response.headers,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 转换xml</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'xml'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          xmlToJson(response.data, api.type, (data) =&gt; &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              result: data,</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              <span class=\"comment\">// data: jsonArrayToString(data),</span></span><br><span class=\"line\">              headers: response.headers,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">500</span>,</span><br><span class=\"line\">            result: global.lang.xml_parse_error,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        result: response.data,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      xmlToJson(error.response.data, <span class=\"string\">'xml'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: &#123; <span class=\"attr\">headers</span>: error.config, <span class=\"attr\">data</span>: data.Error ? data.Error : error.response.data&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在web端使用ak/sk预签名算法调用 s3 restful 原生接口<br>如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件<a href=\"https://github.com/jamesmbourne/aws4-axios\" target=\"_blank\" rel=\"noopener\">aws4-axios</a>，用法如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; aws4Interceptor &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"aws4-axios\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> interceptor = aws4Interceptor(&#123;</span><br><span class=\"line\">  region: <span class=\"string\">\"eu-west-2\"</span>,</span><br><span class=\"line\">  service: <span class=\"string\">\"execute-api\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  accessKeyId: <span class=\"string\">''</span>,</span><br><span class=\"line\">  secretAccessKey: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.interceptors.request.use(interceptor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Requests made using Axios will now be signed</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"https://example.com/foo\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li></ol>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol><li><p>概述</p></li><li><p>浏览器文件操作限制</p></li><li><p>前端多文件分片上传的原理和实现</p></li></ol><h3 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h3><p><img src=\"/blogs/img/article/upload.png\" alt=\"upload\"></p><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。</p><h3 id=\"浏览器文件操作限制\"><a href=\"#浏览器文件操作限制\" class=\"headerlink\" title=\"浏览器文件操作限制\"></a>浏览器文件操作限制</h3><ul><li>HTML5新特性<code>input[type=file]</code>支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。</li><li>浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。</li><li>相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。</li></ul><h3 id=\"前端多文件分片上传的原理和实现\"><a href=\"#前端多文件分片上传的原理和实现\" class=\"headerlink\" title=\"前端多文件分片上传的原理和实现\"></a>前端多文件分片上传的原理和实现</h3><p><em>完整Github<a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">源码</a></em></p><blockquote><p>使用了React16/Webpack4/Mobx状态管理库</p></blockquote><ul><li>支持批量文件分割并行上传</li><li>多文件操作：暂停/恢复/终止/续传/重传</li><li>自定义上传任务数目、单个分片大小</li></ul><h4 id=\"运行流程图\"><a href=\"#运行流程图\" class=\"headerlink\" title=\"运行流程图\"></a>运行流程图</h4><p><img src=\"/blogs/img/article/shards_upload.jpg\" alt=\"upload\"></p><h4 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h4><ol><li><p>cacheFile<br>前端通过input组件拿到所有文件地址并缓存起来。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [cacheFile 缓存即将注册的文件]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> @action</span><br><span class=\"line\"> cacheFile = <span class=\"function\">(<span class=\"params\">files, bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> symbolArr = <span class=\"keyword\">this</span>.filesCache.map(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> <span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">   <span class=\"keyword\">const</span> filtedFiles = [];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> uploadingFileFound = <span class=\"literal\">false</span>;</span><br><span class=\"line\">   files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!symbolArr.includes(<span class=\"keyword\">this</span>.getSymbol(file))) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findIsUploading(<span class=\"keyword\">this</span>.getSymbol(file), bucket)) &#123;</span><br><span class=\"line\">         uploadingFileFound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         filtedFiles.push(file.name);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.filesCache.push(file);</span><br><span class=\"line\">         symbolArr.push(<span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!files.length) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.noFilCanBeUploaded);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (uploadingFileFound) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.uploadingFileReuploadTips + filtedFiles.join(<span class=\"string\">', '</span>));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>registry<br>根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [registry 注册上传文件信息]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [文件上传进程id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>state [文件初始化状态]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action registry = <span class=\"function\">(<span class=\"params\">files, region, prefix</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.includes(file)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.files.push(file);</span><br><span class=\"line\">      fileObj = &#123;</span><br><span class=\"line\">        name: file.webkitRelativePath || file.name,</span><br><span class=\"line\">        prefix: prefix || <span class=\"string\">''</span>,</span><br><span class=\"line\">        size: file.size,</span><br><span class=\"line\">        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split(<span class=\"string\">'.'</span>).pop()).type,</span><br><span class=\"line\">        state: <span class=\"string\">'uninitial'</span>,</span><br><span class=\"line\">        creationTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        completionTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        index: <span class=\"number\">0</span>,</span><br><span class=\"line\">        file,</span><br><span class=\"line\">        initialized: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        partEtags: [],</span><br><span class=\"line\">        region,</span><br><span class=\"line\">        blockSize: <span class=\"keyword\">this</span>.blockSize,</span><br><span class=\"line\">        total: <span class=\"built_in\">Math</span>.ceil(file.size / <span class=\"keyword\">this</span>.blockSize),</span><br><span class=\"line\">        activePoint: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">        speed: <span class=\"string\">'0 MB/S'</span>,</span><br><span class=\"line\">        id: <span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() + file.name + file.type + file.size),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obj = observable(fileObj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uninitial.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.series.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fileStorage.get(region)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.set(region, [obj]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.get(region).push(obj);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// this.fileStorageMap.set(file, obj);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>startTasks<br>获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [startTasks 开启上传任务队列]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  startTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据空闲任务类型和空闲任务并发限制开启空闲任务</span></span><br><span class=\"line\">    <span class=\"comment\">// let storageObject;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refreshTasks(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isUploadListEmpty(region)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxLength = <span class=\"keyword\">this</span>.multiTaskCount - <span class=\"keyword\">this</span>.taskType.uploading.length;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> taskSeries = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; (maxLength) &amp;&amp; <span class=\"keyword\">this</span>.taskType.series[i]; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// const file = this.taskType.series.shift();</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.taskType.series[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'uploading'</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 上传中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pause'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      taskSeries.push(storageObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">    taskSeries.forEach(<span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      index = <span class=\"keyword\">this</span>.taskType.series.indexOf(storageObject);</span><br><span class=\"line\">      index !== <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.taskType.series.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.uninitial.includes(storageObject)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initRequest(storageObject).then(<span class=\"function\">(<span class=\"params\">&#123; err, init &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; init) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>refreshTasks<br>根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 刷新任务列表 */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  refreshTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 统计空闲任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!storageObject) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length &gt;= <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; storageObject.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length === <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        storageObject[i].index !== storageObject[i].total</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        (storageObject[i].state === <span class=\"string\">'pending'</span> || storageObject[i].state === <span class=\"string\">'uninitial'</span>)</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        !<span class=\"keyword\">this</span>.taskType.series.includes(storageObject[i])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.taskType.series.push(storageObject[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>upload &amp; update<br>根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [upload 分割文件发起上传请求]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file    [description]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  upload = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">      bucket: storageObject.region,</span><br><span class=\"line\">      object: storageObject.name,</span><br><span class=\"line\">      prefix: storageObject.prefix,</span><br><span class=\"line\">      uploadId: storageObject.uploadId,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> single = <span class=\"literal\">false</span>; <span class=\"comment\">// 不分片</span></span><br><span class=\"line\">    <span class=\"comment\">/* 异常状态退出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isValidUploadingTask(storageObject)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.pending.splice(<span class=\"keyword\">this</span>.taskType.pending.indexOf(storageObject), <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uploading.push(storageObject);</span><br><span class=\"line\">      storageObject.state = <span class=\"string\">'uploading'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = storageObject.index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"number\">0</span> &amp;&amp; storageObject.size &lt;= storageObject.blockSize) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不用分片的情况</span></span><br><span class=\"line\">      single = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === storageObject.total) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 所有分片都已经发出</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextSize = <span class=\"built_in\">Math</span>.min((num + <span class=\"number\">1</span>) * storageObject.blockSize, storageObject.size);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);</span><br><span class=\"line\">    params = <span class=\"built_in\">Object</span>.assign(params, &#123;</span><br><span class=\"line\">      partNumber: num + <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.activePoint = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.uploadRequest(&#123; params, <span class=\"attr\">data</span>: fileData, single &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        openNotification(<span class=\"string\">'error'</span>, <span class=\"literal\">null</span>, (rsp.result.data ? rsp.result.data.Code : <span class=\"keyword\">this</span>.lang.lang.uploadError));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; completed, etags &#125; = <span class=\"keyword\">this</span>.update(&#123;</span><br><span class=\"line\">        region: params.bucket,</span><br><span class=\"line\">        etag: rsp.result.etag,</span><br><span class=\"line\">        size: fileData.size,</span><br><span class=\"line\">        id: storageObject.id,</span><br><span class=\"line\">        index: params.partNumber,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (completed) &#123;</span><br><span class=\"line\">        (single ?</span><br><span class=\"line\">          () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.complete(storageObject, params.bucket);</span><br><span class=\"line\">          &#125; :</span><br><span class=\"line\">          (partEtags) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.completeRequest(&#123;</span><br><span class=\"line\">              bucket: params.bucket,</span><br><span class=\"line\">              uploadId: params.uploadId,</span><br><span class=\"line\">              object: params.object,</span><br><span class=\"line\">              prefix: params.prefix,</span><br><span class=\"line\">              partEtags,</span><br><span class=\"line\">            &#125;, storageObject);</span><br><span class=\"line\">          &#125;)(etags);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;params.bucket&#125;</span>_<span class=\"subst\">$&#123;params.object&#125;</span> upload error: <span class=\"subst\">$&#123;error&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.index += <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>complete<br>当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [completeRequest 完成所有分片数据上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.partEtags [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action completeRequest = <span class=\"function\">(<span class=\"params\">params, file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    postDataPro(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ...&#123;</span><br><span class=\"line\">          ...params,</span><br><span class=\"line\">          ...&#123;</span><br><span class=\"line\">            object: params.prefix + params.object,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        partEtags: &#123;</span><br><span class=\"line\">          CompleteMultipartUpload: &#123;</span><br><span class=\"line\">            Part: params.partEtags.map(<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> (&#123;</span><br><span class=\"line\">              PartNumber: info.number,</span><br><span class=\"line\">              ETag: info.etag,</span><br><span class=\"line\">            &#125;)),</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      objectResourceApi.object.completeFragmentUpload</span><br><span class=\"line\">    ).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.complete(file, params.bucket);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [complete 完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>bucket [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  complete = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.taskType.uploading.indexOf(storageObject);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.uploading.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.break.push(storageObject);</span><br><span class=\"line\">    storageObject.completionTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString()).split(<span class=\"string\">' '</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    storageObject.state = <span class=\"string\">'break'</span>;</span><br><span class=\"line\">    storageObject.speed = <span class=\"string\">''</span>;</span><br><span class=\"line\">    storageObject.index = storageObject.total;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startTasks(storageObject.region);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"其它操作\"><a href=\"#其它操作\" class=\"headerlink\" title=\"其它操作\"></a>其它操作</h4><ol><li><p>暂停文件上传<br>将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。</p></li><li><p>开始暂停的上传任务<br>将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。</p></li><li><p>续传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。</p></li><li><p>重传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。</p></li></ol><h4 id=\"一些关键代码\"><a href=\"#一些关键代码\" class=\"headerlink\" title=\"一些关键代码\"></a>一些关键代码</h4><ol><li><p>一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [update 更新本地上传记录]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>etag [分片标志]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  update = (&#123;</span><br><span class=\"line\">    region, etag, size, id, index,</span><br><span class=\"line\">  &#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; target.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target[i].id === id) &#123;</span><br><span class=\"line\">        target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;(size <span class=\"regexp\">/ 1024 /</span> <span class=\"number\">1024</span> <span class=\"regexp\">/ (((new Date() - target[i].activePoint) /</span> <span class=\"number\">1000</span>))).toFixed(<span class=\"number\">2</span>)&#125;</span> MB/S`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].speed === <span class=\"string\">'0.00 MB/S'</span>) &#123;</span><br><span class=\"line\">          target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;formatSizeStr(size)&#125;</span>/S`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        target[i].partEtags = target[i].partEtags.filter(<span class=\"function\"><span class=\"params\">etagItem</span> =&gt;</span> etagItem.number !== index);</span><br><span class=\"line\">        target[i].partEtags.push(&#123;</span><br><span class=\"line\">          number: index,</span><br><span class=\"line\">          etag,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 最后一个分片恰好又暂停的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target[i].state === <span class=\"string\">'pause'</span>) &#123;</span><br><span class=\"line\">            index -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断上传是否完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].total === <span class=\"number\">0</span> || target[i].partEtags.toJS().length === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            etags: target[i].partEtags,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          completed: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口<br>之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库<a href=\"https://github.com/mhart/aws4\" target=\"_blank\" rel=\"noopener\">aws4</a>，用里面的签名方法对前端传过来的<code>ak/sk</code>进行url预签名，这里给出中间件<code>Request</code>方法的编写逻辑：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * params1: &#123;bucket: testBucket, uid: testUid, bucketId: testID&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * params2: /admin/bucket?format=json&amp;bucket=&#123;bucket&#125;&amp;uid=&#123;uid&#125;&amp;bucket-id=&#123;bucketId&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * return: /admin/bucket?format=json&amp;bucket=testBucket&amp;uid=testUid&amp;bucket-id=testID</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>varObj [替换变量对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>templateStr [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return <span class=\"type\">&#123;[String]&#125;</span> </span>result [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.templateStrTransform = <span class=\"function\">(<span class=\"params\">varObj, templateStr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> varObj !== <span class=\"string\">'object'</span> || !templateStr) <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> attr <span class=\"keyword\">in</span> varObj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (varObj.hasOwnProperty(attr) &amp;&amp; (!<span class=\"built_in\">Number</span>(attr) &amp;&amp; <span class=\"built_in\">Number</span>(attr) !== <span class=\"number\">0</span> )) &#123;</span><br><span class=\"line\">      templateStr = templateStr.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`&#123;<span class=\"subst\">$&#123;attr&#125;</span>&#125;`</span>, <span class=\"string\">'g'</span>), varObj[attr]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * api对象实例：</span></span><br><span class=\"line\"><span class=\"comment\">    listFragmentUpload: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      url: '/&#123;bucket&#125;/&#123;object&#125;?uploadId=&#123;uploadId&#125;', // 包含动态模板字符串</span></span><br><span class=\"line\"><span class=\"comment\">      method: 'get',</span></span><br><span class=\"line\"><span class=\"comment\">      port: '7480',</span></span><br><span class=\"line\"><span class=\"comment\">      type: 'xml', // 表明需要将接口返回数据进行xml -&gt; json转换</span></span><br><span class=\"line\"><span class=\"comment\">      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -&gt; xml转换</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">commonApiConfig = <span class=\"function\">(<span class=\"params\">headers, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isEnvDev &amp;&amp; !isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.149`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.149'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isEnvDev &amp;&amp; isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.7.15/mock/63<span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.154:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.154`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.154'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://127.0.0.1`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">`127.0.0.1`</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * aws4RequestSign [调用asw4的sign方法签名一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置</span></span><br><span class=\"line\"><span class=\"comment\"> *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">aws4RequestSign = <span class=\"function\">(<span class=\"params\">req, path, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> aws4 = <span class=\"built_in\">require</span>(<span class=\"string\">'aws4'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</span><br><span class=\"line\">    host: <span class=\"string\">`<span class=\"subst\">$&#123;(commonApiConfig(req.headers, api, data)).host&#125;</span>`</span>,</span><br><span class=\"line\">    path,</span><br><span class=\"line\">    url: (commonApiConfig(req.headers, api, data)).hostname,</span><br><span class=\"line\">    signQuery: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    service: process.env.AWS_SERVICE,</span><br><span class=\"line\">    region: process.env.AWS_REGION,</span><br><span class=\"line\">    method: api.method.toUpperCase(),</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: req.body,</span><br><span class=\"line\">    data: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// assumes AWS credentials are available in process.env</span></span><br><span class=\"line\">  aws4.sign(opts)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> opts;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * commonRequestAuth [签名并调用一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonRequestAuth = <span class=\"function\">(<span class=\"params\">params, api, req, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">  iAxios.defaults.timeout = params[<span class=\"string\">'$no_timeout$'</span>] ? <span class=\"number\">0</span> : <span class=\"number\">30e3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用params对象转换存在动态变量的url  </span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parsedUrl = templateStrTransform(params, api.url);</span><br><span class=\"line\">  <span class=\"comment\">// aws env set</span></span><br><span class=\"line\">  awsEnvRegistry(&#123;</span><br><span class=\"line\">    key: req.cookies.access_key,</span><br><span class=\"line\">    secret: req.cookies.secret_key,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 签署请求头</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> postData = jsonToXml(data, api.reqType);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iAxios.request(&#123;</span><br><span class=\"line\">      baseURL: awsOpts.host,</span><br><span class=\"line\">      url: awsOpts.path,</span><br><span class=\"line\">      method: awsOpts.method,</span><br><span class=\"line\">      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),</span><br><span class=\"line\">      data: postData,</span><br><span class=\"line\">      responseType: api.resType,</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 设置header返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'header'</span>) <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">        result: response.headers,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 转换xml</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'xml'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          xmlToJson(response.data, api.type, (data) =&gt; &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              result: data,</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              <span class=\"comment\">// data: jsonArrayToString(data),</span></span><br><span class=\"line\">              headers: response.headers,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">500</span>,</span><br><span class=\"line\">            result: global.lang.xml_parse_error,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        result: response.data,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      xmlToJson(error.response.data, <span class=\"string\">'xml'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: &#123; <span class=\"attr\">headers</span>: error.config, <span class=\"attr\">data</span>: data.Error ? data.Error : error.response.data&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在web端使用ak/sk预签名算法调用 s3 restful 原生接口<br>如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件<a href=\"https://github.com/jamesmbourne/aws4-axios\" target=\"_blank\" rel=\"noopener\">aws4-axios</a>，用法如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; aws4Interceptor &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"aws4-axios\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> interceptor = aws4Interceptor(&#123;</span><br><span class=\"line\">  region: <span class=\"string\">\"eu-west-2\"</span>,</span><br><span class=\"line\">  service: <span class=\"string\">\"execute-api\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  accessKeyId: <span class=\"string\">''</span>,</span><br><span class=\"line\">  secretAccessKey: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.interceptors.request.use(interceptor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Requests made using Axios will now be signed</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"https://example.com/foo\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li></ol>"},{"title":"基于s3对象存储多文件分片上传的Javascript实现(二)","catalog":true,"toc_nav_num":true,"date":"2020-03-26T08:18:00.000Z","subtitle":"fileupload node fs","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-03-26T08:18:00.000Z","_content":"\n### 目录\n------------\n\n1. 概述\n\n2. 文件上传-Js向中间层Node发送分片数据\n\n3. 文件上传-中间层Node接收前端发送的分片数据\n\n4. 文件下载-中间层Node获取后端文件数据的两种处理\n\n5. 文件下载-Js下载中间层文件的两种不同方式\n\n### 预览\n-------\n\n![upload](/blogs/img/article/upload.png)\n\n### 概述\n-------\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n前一篇文章[基于s3对象存储多文件分片上传的Javascript实现(一)](./基于s3对象存储多文件分片上传的Javascript实现(一).md)主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。\n\n### 文件上传-Js向中间层Node发送分片数据\n----------------------------------\n\n#### 创建Axios实例\n```js\nconst XHR = axios.create({\n  baseURl: '',\n  timeout: 30e3,\n  headers: originHeaders,\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n});\n```\n\n#### 使用文件分片构造表单数据\n>fileShardsData为File.slice接口对文件截取得到的部分文件数据\n```js\nconst data = new FormData();\nformData.append('file', fileShardsData, 'file');\n```\n\n#### 发送分片\n>注意设置请求头的请求数据类型\n```js\nXHR({\n  api,\n  method,\n  data,\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n}).then((response) => {\n  ...\n});\n```\n\n### 文件上传-中间层Node接收前端发送的分片数据\n>Express没有自带文件处理功能，需要使用第三方middleware\n\n环境：\n* Express V4框架\n* Node.js V8\n\n#### 方法1：使用formidable中间件处理文件请求\n1. 编写公用中间处理组件\n```js\nconst formidable = require('formidable');\n/**\n  * parseFile [使用formidable进行文件解析 - 性能一般]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.formidableParseFile = (req, res, callback) => {\n  try {\n    const form = new formidable.IncomingForm();\n    form.parse(req, (err, fields, files) => {\n      if (fs.existsSync(files.file.path)) {\n        fs.readFile(files.file.path, (err, fileBuffer) => {\n          fs.unlink(files.file.path, (err) => {\n            if (err) console.log(err);\n          });\n          if (err) {\n            return callback(err);\n          }\n          callback(null, fileBuffer);\n        });\n      } else {\n        callback(null, '');\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    callback(error);\n  }\n}\n```\n\n2. 挂载路由\n```js\nrouter.post('/object/object/upload', function(req, res, next) {\n  console.log('upload');\n  const random = Math.random();\n  console.time(`${random} -> 1`);\n  formidableParseFile(req, res, (err, fileBuffer) => {\n    console.timeEnd(`${random} -> 1`);\n    if (err) {\n      return res.json({\n        code: 500,\n        result: err.toString(),\n      })\n    }\n    console.time(`${random} -> 2`);\n    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(\n      (response) => {\n        console.timeEnd(`${random} -> 2`);\n        res.json({\n          code: response.code,\n          result: {\n            ...{ etag: response.headers ? response.headers.etag : '' },\n            ...response.result\n          },\n        });\n      },\n      );\n    });\n});\n```\n\n#### 方法2：代码实现文件处理\n\n1. 声明方法\n```js\n/**\n  * parseFile [form-data原生文件解析 - 性能差]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.parseFile = (req, res, callback) => {\n  req.setEncoding('binary');\n  let body = '';   // 文件数据\n  let fileName = '';  // 文件名\n\n  // 边界字符串\n  const boundary = req.headers['content-type'].split('; ')[1].replace('boundary=', '');\n\n  req.on('data', function (chunk) {\n    body += chunk;\n  });\n\n  req.on('end', function () {\n    try {\n      // 分隔键值对(\\r\\n)和键值(:)\n      const file = querystring.parse(body, '\\r\\n', ':')\n      //获取文件名\n      const fileInfo = file['Content-Disposition'].split('; ');\n      for (value in fileInfo) {\n        if (fileInfo[value].indexOf(\"filename=\") != -1) {\n          fileName = fileInfo[value].substring(10, fileInfo[value].length - 1);\n\n          if (fileName.indexOf('\\\\') != -1) {\n            fileName = fileName.substring(fileName.lastIndexOf('\\\\') + 1);\n          }\n        }\n      }\n\n      // 获取图片类型(如：image/gif 或 image/png))\n      const entireData = body.toString();\n\n      contentType = file['Content-Type'].substring(1);\n\n      //获取文件二进制数据开始位置，即contentType的结尾\n      const upperBoundary = entireData.indexOf(contentType) + contentType.length;\n      const shorterData = entireData.substring(upperBoundary);\n\n      // 替换开始位置的空格\n      const binaryDataAlmost = shorterData.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n\n      // 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"\n      const binaryData = binaryDataAlmost.substring(0, binaryDataAlmost.indexOf('--' + boundary + '--'));\n\n      callback(null, binaryData);\n    } catch (error) {\n      callback(new Error('form-data parse error!'));\n    }\n\n  });\n};\n```\n2. 挂载路由同上\n\n### 文件下载-中间层Node获取后端文件数据的两种处理\n------------------------------------------\n>两种方式均使用Axios发送请求\n\n#### 小文件直传\n接收到接口数据后直接放入内存然后以文件的类型发送给前端\n\n1. 请求header注意设置`resType: \"arraybuffer\"`\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo/all', function(req, res, next) {\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfoAll, req).then((response) => {\n    res.type('file').send(response.result)\n  });\n});\n```\n\n#### 大文件转存为静态资源\n> Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。\n1. Node Pipe管道的概念\n![node pipe](/blogs/img/article/node_pipe.png)\n\n2. 请求header注意设置`resType: \"stream\"`\n\n3. 创建本地可写流\n使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在\n\n4. 接口返回的是可读流，可以直接连接到管道\n注意服务器是否支持以数据流方式返回二进制数据\n\n5. 可写流完成写入后向前端发送静态资源文件地址\n监听可写流的finish事件可以异步处理文件完成写入事件\n\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo', function(req, res, next) {\n  console.log('download');\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfo, req).then((response) => {\n    console.log('download callback');\n    const fileName = req.body.object.split('/').pop();\n    const fileSymbol = `${fileName}-${Date.now()}`;\n    const filePath = path.join(_path.public, 'download', fileSymbol);\n    const ws = fs.createWriteStream(filePath);\n    response.result.pipe(ws);\n    ws.on('finish', () => { \n      console.log('download finish');\n      res.header({\n        'Content-Disposition': fileName\n      });\n      res.json({\n        code: 200,\n        result: filePath.split('node-express-react/public/public')[1],\n      });\n    }); \n  });\n});\n```\n\n### 文件下载-Js下载中间层文件的两种不同方式\n-------------------------------------\n\n#### 小文件直接从接口拿到数据并生成DataURL触发下载  \n\n1. 请求header声明`responseType:arraybuffer`  \n指名返回的数据是可直接使用的二进制流数据  \n\n2. 接口数据返回后生成前端通用的大二进制块数据`Blob`\nnew Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg\n\n3. 使用HTML5 FileReader接口读取二进制块\nreader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL\n\n4. 构造a标签并指名download属性下载DataURL\n替代方法是使用window.open(dataUrl)\n\n```js\ndownloadObjectInMemory = (para, info) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo/all',\n      withCredentials: true,\n      responseType: 'arraybuffer',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    const readAsDataUrl = (data, emptyData) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(data);\n      reader.onload = (e) => {\n        const url = e.target.result;\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        a.href = url === 'data:' ? emptyData : url;\n        a.download = filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n      };\n    };\n    const typename = mapMimeType(info.name).mime;\n    iAxios.request(options)\n      .then((res) => {\n        const blobData = new Blob([res.data], { type: typename });\n        readAsDataUrl(blobData, `data:${typename};base64,`);\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n```\n\n#### 大文件通过接口返回的静态文件链接进行下载\n步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL\n\n```js\ndownloadObjectWithURL = (para) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo',\n      withCredentials: true,\n      responseType: 'json',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    let timer;\n    iAxios.request(options)\n      .then((res) => {\n        clearTimeout(timer);\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        const address = process.env.NODE_ENV === 'development' ? `${window.location.protocol}//10.0.6.206:3000${res.data.result}` : `${window.location.protocol}//${window.location.hostname}:3000${res.data.result}`;\n        a.href = address;\n        a.download = filename;\n        a.click();\n      }).catch((error) => {\n        console.log(error);\n      });\n    timer = setTimeout(() => {\n      openNotification('info', null, this.lang.lang.fileDownloadTips);\n    }, 1e3);\n  }\n```","source":"_posts/基于s3对象存储多文件分片上传的Javascript实现(二).md","raw":"---\ntitle: \"基于s3对象存储多文件分片上传的Javascript实现(二)\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-03-26 16:18:00\nsubtitle: \"fileupload node fs\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- upload\n- node\nupdateDate: 2020-03-26 16:18:00\ncategories:\n- Javascript\n- Node\n---\n\n### 目录\n------------\n\n1. 概述\n\n2. 文件上传-Js向中间层Node发送分片数据\n\n3. 文件上传-中间层Node接收前端发送的分片数据\n\n4. 文件下载-中间层Node获取后端文件数据的两种处理\n\n5. 文件下载-Js下载中间层文件的两种不同方式\n\n### 预览\n-------\n\n![upload](/blogs/img/article/upload.png)\n\n### 概述\n-------\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n前一篇文章[基于s3对象存储多文件分片上传的Javascript实现(一)](./基于s3对象存储多文件分片上传的Javascript实现(一).md)主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。\n\n### 文件上传-Js向中间层Node发送分片数据\n----------------------------------\n\n#### 创建Axios实例\n```js\nconst XHR = axios.create({\n  baseURl: '',\n  timeout: 30e3,\n  headers: originHeaders,\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n});\n```\n\n#### 使用文件分片构造表单数据\n>fileShardsData为File.slice接口对文件截取得到的部分文件数据\n```js\nconst data = new FormData();\nformData.append('file', fileShardsData, 'file');\n```\n\n#### 发送分片\n>注意设置请求头的请求数据类型\n```js\nXHR({\n  api,\n  method,\n  data,\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n}).then((response) => {\n  ...\n});\n```\n\n### 文件上传-中间层Node接收前端发送的分片数据\n>Express没有自带文件处理功能，需要使用第三方middleware\n\n环境：\n* Express V4框架\n* Node.js V8\n\n#### 方法1：使用formidable中间件处理文件请求\n1. 编写公用中间处理组件\n```js\nconst formidable = require('formidable');\n/**\n  * parseFile [使用formidable进行文件解析 - 性能一般]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.formidableParseFile = (req, res, callback) => {\n  try {\n    const form = new formidable.IncomingForm();\n    form.parse(req, (err, fields, files) => {\n      if (fs.existsSync(files.file.path)) {\n        fs.readFile(files.file.path, (err, fileBuffer) => {\n          fs.unlink(files.file.path, (err) => {\n            if (err) console.log(err);\n          });\n          if (err) {\n            return callback(err);\n          }\n          callback(null, fileBuffer);\n        });\n      } else {\n        callback(null, '');\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    callback(error);\n  }\n}\n```\n\n2. 挂载路由\n```js\nrouter.post('/object/object/upload', function(req, res, next) {\n  console.log('upload');\n  const random = Math.random();\n  console.time(`${random} -> 1`);\n  formidableParseFile(req, res, (err, fileBuffer) => {\n    console.timeEnd(`${random} -> 1`);\n    if (err) {\n      return res.json({\n        code: 500,\n        result: err.toString(),\n      })\n    }\n    console.time(`${random} -> 2`);\n    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(\n      (response) => {\n        console.timeEnd(`${random} -> 2`);\n        res.json({\n          code: response.code,\n          result: {\n            ...{ etag: response.headers ? response.headers.etag : '' },\n            ...response.result\n          },\n        });\n      },\n      );\n    });\n});\n```\n\n#### 方法2：代码实现文件处理\n\n1. 声明方法\n```js\n/**\n  * parseFile [form-data原生文件解析 - 性能差]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.parseFile = (req, res, callback) => {\n  req.setEncoding('binary');\n  let body = '';   // 文件数据\n  let fileName = '';  // 文件名\n\n  // 边界字符串\n  const boundary = req.headers['content-type'].split('; ')[1].replace('boundary=', '');\n\n  req.on('data', function (chunk) {\n    body += chunk;\n  });\n\n  req.on('end', function () {\n    try {\n      // 分隔键值对(\\r\\n)和键值(:)\n      const file = querystring.parse(body, '\\r\\n', ':')\n      //获取文件名\n      const fileInfo = file['Content-Disposition'].split('; ');\n      for (value in fileInfo) {\n        if (fileInfo[value].indexOf(\"filename=\") != -1) {\n          fileName = fileInfo[value].substring(10, fileInfo[value].length - 1);\n\n          if (fileName.indexOf('\\\\') != -1) {\n            fileName = fileName.substring(fileName.lastIndexOf('\\\\') + 1);\n          }\n        }\n      }\n\n      // 获取图片类型(如：image/gif 或 image/png))\n      const entireData = body.toString();\n\n      contentType = file['Content-Type'].substring(1);\n\n      //获取文件二进制数据开始位置，即contentType的结尾\n      const upperBoundary = entireData.indexOf(contentType) + contentType.length;\n      const shorterData = entireData.substring(upperBoundary);\n\n      // 替换开始位置的空格\n      const binaryDataAlmost = shorterData.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n\n      // 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"\n      const binaryData = binaryDataAlmost.substring(0, binaryDataAlmost.indexOf('--' + boundary + '--'));\n\n      callback(null, binaryData);\n    } catch (error) {\n      callback(new Error('form-data parse error!'));\n    }\n\n  });\n};\n```\n2. 挂载路由同上\n\n### 文件下载-中间层Node获取后端文件数据的两种处理\n------------------------------------------\n>两种方式均使用Axios发送请求\n\n#### 小文件直传\n接收到接口数据后直接放入内存然后以文件的类型发送给前端\n\n1. 请求header注意设置`resType: \"arraybuffer\"`\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo/all', function(req, res, next) {\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfoAll, req).then((response) => {\n    res.type('file').send(response.result)\n  });\n});\n```\n\n#### 大文件转存为静态资源\n> Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。\n1. Node Pipe管道的概念\n![node pipe](/blogs/img/article/node_pipe.png)\n\n2. 请求header注意设置`resType: \"stream\"`\n\n3. 创建本地可写流\n使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在\n\n4. 接口返回的是可读流，可以直接连接到管道\n注意服务器是否支持以数据流方式返回二进制数据\n\n5. 可写流完成写入后向前端发送静态资源文件地址\n监听可写流的finish事件可以异步处理文件完成写入事件\n\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo', function(req, res, next) {\n  console.log('download');\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfo, req).then((response) => {\n    console.log('download callback');\n    const fileName = req.body.object.split('/').pop();\n    const fileSymbol = `${fileName}-${Date.now()}`;\n    const filePath = path.join(_path.public, 'download', fileSymbol);\n    const ws = fs.createWriteStream(filePath);\n    response.result.pipe(ws);\n    ws.on('finish', () => { \n      console.log('download finish');\n      res.header({\n        'Content-Disposition': fileName\n      });\n      res.json({\n        code: 200,\n        result: filePath.split('node-express-react/public/public')[1],\n      });\n    }); \n  });\n});\n```\n\n### 文件下载-Js下载中间层文件的两种不同方式\n-------------------------------------\n\n#### 小文件直接从接口拿到数据并生成DataURL触发下载  \n\n1. 请求header声明`responseType:arraybuffer`  \n指名返回的数据是可直接使用的二进制流数据  \n\n2. 接口数据返回后生成前端通用的大二进制块数据`Blob`\nnew Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg\n\n3. 使用HTML5 FileReader接口读取二进制块\nreader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL\n\n4. 构造a标签并指名download属性下载DataURL\n替代方法是使用window.open(dataUrl)\n\n```js\ndownloadObjectInMemory = (para, info) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo/all',\n      withCredentials: true,\n      responseType: 'arraybuffer',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    const readAsDataUrl = (data, emptyData) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(data);\n      reader.onload = (e) => {\n        const url = e.target.result;\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        a.href = url === 'data:' ? emptyData : url;\n        a.download = filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n      };\n    };\n    const typename = mapMimeType(info.name).mime;\n    iAxios.request(options)\n      .then((res) => {\n        const blobData = new Blob([res.data], { type: typename });\n        readAsDataUrl(blobData, `data:${typename};base64,`);\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n```\n\n#### 大文件通过接口返回的静态文件链接进行下载\n步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL\n\n```js\ndownloadObjectWithURL = (para) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo',\n      withCredentials: true,\n      responseType: 'json',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    let timer;\n    iAxios.request(options)\n      .then((res) => {\n        clearTimeout(timer);\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        const address = process.env.NODE_ENV === 'development' ? `${window.location.protocol}//10.0.6.206:3000${res.data.result}` : `${window.location.protocol}//${window.location.hostname}:3000${res.data.result}`;\n        a.href = address;\n        a.download = filename;\n        a.click();\n      }).catch((error) => {\n        console.log(error);\n      });\n    timer = setTimeout(() => {\n      openNotification('info', null, this.lang.lang.fileDownloadTips);\n    }, 1e3);\n  }\n```","slug":"基于s3对象存储多文件分片上传的Javascript实现-二","published":1,"updated":"2020-08-20T04:59:40.579Z","_id":"ckba8cy9f00015495fo874lhe","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><hr>\n<ol>\n<li><p>概述</p>\n</li>\n<li><p>文件上传-Js向中间层Node发送分片数据</p>\n</li>\n<li><p>文件上传-中间层Node接收前端发送的分片数据</p>\n</li>\n<li><p>文件下载-中间层Node获取后端文件数据的两种处理</p>\n</li>\n<li><p>文件下载-Js下载中间层文件的两种不同方式</p>\n</li>\n</ol>\n<h3 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h3><hr>\n<p><img src=\"/blogs/img/article/upload.png\" alt=\"upload\"></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><hr>\n<p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>前一篇文章<a href=\"./基于s3对象存储多文件分片上传的Javascript实现(一\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>.md)主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。</p>\n<h3 id=\"文件上传-Js向中间层Node发送分片数据\"><a href=\"#文件上传-Js向中间层Node发送分片数据\" class=\"headerlink\" title=\"文件上传-Js向中间层Node发送分片数据\"></a>文件上传-Js向中间层Node发送分片数据</h3><hr>\n<h4 id=\"创建Axios实例\"><a href=\"#创建Axios实例\" class=\"headerlink\" title=\"创建Axios实例\"></a>创建Axios实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> XHR = axios.create(&#123;</span><br><span class=\"line\">  baseURl: <span class=\"string\">''</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">30e3</span>,</span><br><span class=\"line\">  headers: originHeaders,</span><br><span class=\"line\">  validateStatus(status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用文件分片构造表单数据\"><a href=\"#使用文件分片构造表单数据\" class=\"headerlink\" title=\"使用文件分片构造表单数据\"></a>使用文件分片构造表单数据</h4><blockquote>\n<p>fileShardsData为File.slice接口对文件截取得到的部分文件数据<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">'file'</span>, fileShardsData, <span class=\"string\">'file'</span>);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"发送分片\"><a href=\"#发送分片\" class=\"headerlink\" title=\"发送分片\"></a>发送分片</h4><blockquote>\n<p>注意设置请求头的请求数据类型<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XHR(&#123;</span><br><span class=\"line\">  api,</span><br><span class=\"line\">  method,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'multipart/form-data'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"文件上传-中间层Node接收前端发送的分片数据\"><a href=\"#文件上传-中间层Node接收前端发送的分片数据\" class=\"headerlink\" title=\"文件上传-中间层Node接收前端发送的分片数据\"></a>文件上传-中间层Node接收前端发送的分片数据</h3><blockquote>\n<p>Express没有自带文件处理功能，需要使用第三方middleware</p>\n</blockquote>\n<p>环境：</p>\n<ul>\n<li>Express V4框架</li>\n<li>Node.js V8</li>\n</ul>\n<h4 id=\"方法1：使用formidable中间件处理文件请求\"><a href=\"#方法1：使用formidable中间件处理文件请求\" class=\"headerlink\" title=\"方法1：使用formidable中间件处理文件请求\"></a>方法1：使用formidable中间件处理文件请求</h4><ol>\n<li><p>编写公用中间处理组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [使用formidable进行文件解析 - 性能一般]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.formidableParseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fs.existsSync(files.file.path)) &#123;</span><br><span class=\"line\">        fs.readFile(files.file.path, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">          fs.unlink(files.file.path, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          callback(<span class=\"literal\">null</span>, fileBuffer);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">    callback(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/object/object/upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'upload'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">  formidableParseFile(req, res, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">500</span>,</span><br><span class=\"line\">        result: err.toString(),</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">        res.json(&#123;</span><br><span class=\"line\">          code: response.code,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            ...&#123; <span class=\"attr\">etag</span>: response.headers ? response.headers.etag : <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">            ...response.result</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"方法2：代码实现文件处理\"><a href=\"#方法2：代码实现文件处理\" class=\"headerlink\" title=\"方法2：代码实现文件处理\"></a>方法2：代码实现文件处理</h4><ol>\n<li>声明方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [form-data原生文件解析 - 性能差]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.parseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  req.setEncoding(<span class=\"string\">'binary'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"string\">''</span>;   <span class=\"comment\">// 文件数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fileName = <span class=\"string\">''</span>;  <span class=\"comment\">// 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 边界字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundary = req.headers[<span class=\"string\">'content-type'</span>].split(<span class=\"string\">'; '</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'boundary='</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">    body += chunk;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 分隔键值对(\\r\\n)和键值(:)</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> file = querystring.parse(body, <span class=\"string\">'\\r\\n'</span>, <span class=\"string\">':'</span>)</span><br><span class=\"line\">      <span class=\"comment\">//获取文件名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fileInfo = file[<span class=\"string\">'Content-Disposition'</span>].split(<span class=\"string\">'; '</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (value <span class=\"keyword\">in</span> fileInfo) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fileInfo[value].indexOf(<span class=\"string\">\"filename=\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          fileName = fileInfo[value].substring(<span class=\"number\">10</span>, fileInfo[value].length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fileName.indexOf(<span class=\"string\">'\\\\'</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            fileName = fileName.substring(fileName.lastIndexOf(<span class=\"string\">'\\\\'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取图片类型(如：image/gif 或 image/png))</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> entireData = body.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">      contentType = file[<span class=\"string\">'Content-Type'</span>].substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//获取文件二进制数据开始位置，即contentType的结尾</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> upperBoundary = entireData.indexOf(contentType) + contentType.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> shorterData = entireData.substring(upperBoundary);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 替换开始位置的空格</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryDataAlmost = shorterData.replace(<span class=\"regexp\">/^\\s\\s*/</span>, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s\\s*$/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryData = binaryDataAlmost.substring(<span class=\"number\">0</span>, binaryDataAlmost.indexOf(<span class=\"string\">'--'</span> + boundary + <span class=\"string\">'--'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      callback(<span class=\"literal\">null</span>, binaryData);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'form-data parse error!'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>挂载路由同上</li>\n</ol>\n<h3 id=\"文件下载-中间层Node获取后端文件数据的两种处理\"><a href=\"#文件下载-中间层Node获取后端文件数据的两种处理\" class=\"headerlink\" title=\"文件下载-中间层Node获取后端文件数据的两种处理\"></a>文件下载-中间层Node获取后端文件数据的两种处理</h3><hr>\n<blockquote>\n<p>两种方式均使用Axios发送请求</p>\n</blockquote>\n<h4 id=\"小文件直传\"><a href=\"#小文件直传\" class=\"headerlink\" title=\"小文件直传\"></a>小文件直传</h4><p>接收到接口数据后直接放入内存然后以文件的类型发送给前端</p>\n<ol>\n<li>请求header注意设置<code>resType: &quot;arraybuffer&quot;</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo/all'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfoAll, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.type(<span class=\"string\">'file'</span>).send(response.result)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"大文件转存为静态资源\"><a href=\"#大文件转存为静态资源\" class=\"headerlink\" title=\"大文件转存为静态资源\"></a>大文件转存为静态资源</h4><blockquote>\n<p>Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。</p>\n<ol>\n<li>Node Pipe管道的概念<br><img src=\"/blogs/img/article/node_pipe.png\" alt=\"node pipe\"></li>\n</ol>\n</blockquote>\n<ol>\n<li><p>请求header注意设置<code>resType: &quot;stream&quot;</code></p>\n</li>\n<li><p>创建本地可写流<br>使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在</p>\n</li>\n<li><p>接口返回的是可读流，可以直接连接到管道<br>注意服务器是否支持以数据流方式返回二进制数据</p>\n</li>\n<li><p>可写流完成写入后向前端发送静态资源文件地址<br>监听可写流的finish事件可以异步处理文件完成写入事件</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'download'</span>);</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfo, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'download callback'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = req.body.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileSymbol = <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.join(_path.public, <span class=\"string\">'download'</span>, fileSymbol);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ws = fs.createWriteStream(filePath);</span><br><span class=\"line\">    response.result.pipe(ws);</span><br><span class=\"line\">    ws.on(<span class=\"string\">'finish'</span>, () =&gt; &#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'download finish'</span>);</span><br><span class=\"line\">      res.header(&#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Disposition'</span>: fileName</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        result: filePath.split(<span class=\"string\">'node-express-react/public/public'</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件下载-Js下载中间层文件的两种不同方式\"><a href=\"#文件下载-Js下载中间层文件的两种不同方式\" class=\"headerlink\" title=\"文件下载-Js下载中间层文件的两种不同方式\"></a>文件下载-Js下载中间层文件的两种不同方式</h3><hr>\n<h4 id=\"小文件直接从接口拿到数据并生成DataURL触发下载\"><a href=\"#小文件直接从接口拿到数据并生成DataURL触发下载\" class=\"headerlink\" title=\"小文件直接从接口拿到数据并生成DataURL触发下载\"></a>小文件直接从接口拿到数据并生成DataURL触发下载</h4><ol>\n<li><p>请求header声明<code>responseType:arraybuffer</code><br>指名返回的数据是可直接使用的二进制流数据  </p>\n</li>\n<li><p>接口数据返回后生成前端通用的大二进制块数据<code>Blob</code><br>new Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg</p>\n</li>\n<li><p>使用HTML5 FileReader接口读取二进制块<br>reader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL</p>\n</li>\n<li><p>构造a标签并指名download属性下载DataURL<br>替代方法是使用window.open(dataUrl)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectInMemory = <span class=\"function\">(<span class=\"params\">para, info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo/all'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'arraybuffer'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> readAsDataUrl = <span class=\"function\">(<span class=\"params\">data, emptyData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">      reader.readAsDataURL(data);</span><br><span class=\"line\">      reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = e.target.result;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        a.href = url === <span class=\"string\">'data:'</span> ? emptyData : url;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(url);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> typename = mapMimeType(info.name).mime;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> blobData = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: typename &#125;);</span><br><span class=\"line\">        readAsDataUrl(blobData, <span class=\"string\">`data:<span class=\"subst\">$&#123;typename&#125;</span>;base64,`</span>);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"大文件通过接口返回的静态文件链接进行下载\"><a href=\"#大文件通过接口返回的静态文件链接进行下载\" class=\"headerlink\" title=\"大文件通过接口返回的静态文件链接进行下载\"></a>大文件通过接口返回的静态文件链接进行下载</h4><p>步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectWithURL = <span class=\"function\">(<span class=\"params\">para</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> address = process.env.NODE_ENV === <span class=\"string\">'development'</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//10.0.6.206:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.hostname&#125;</span>:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span>;</span><br><span class=\"line\">        a.href = address;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      openNotification(<span class=\"string\">'info'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.fileDownloadTips);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><hr>\n<ol>\n<li><p>概述</p>\n</li>\n<li><p>文件上传-Js向中间层Node发送分片数据</p>\n</li>\n<li><p>文件上传-中间层Node接收前端发送的分片数据</p>\n</li>\n<li><p>文件下载-中间层Node获取后端文件数据的两种处理</p>\n</li>\n<li><p>文件下载-Js下载中间层文件的两种不同方式</p>\n</li>\n</ol>\n<h3 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h3><hr>\n<p><img src=\"/blogs/img/article/upload.png\" alt=\"upload\"></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><hr>\n<p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>前一篇文章<a href=\"./基于s3对象存储多文件分片上传的Javascript实现(一\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>.md)主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。</p>\n<h3 id=\"文件上传-Js向中间层Node发送分片数据\"><a href=\"#文件上传-Js向中间层Node发送分片数据\" class=\"headerlink\" title=\"文件上传-Js向中间层Node发送分片数据\"></a>文件上传-Js向中间层Node发送分片数据</h3><hr>\n<h4 id=\"创建Axios实例\"><a href=\"#创建Axios实例\" class=\"headerlink\" title=\"创建Axios实例\"></a>创建Axios实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> XHR = axios.create(&#123;</span><br><span class=\"line\">  baseURl: <span class=\"string\">''</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">30e3</span>,</span><br><span class=\"line\">  headers: originHeaders,</span><br><span class=\"line\">  validateStatus(status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用文件分片构造表单数据\"><a href=\"#使用文件分片构造表单数据\" class=\"headerlink\" title=\"使用文件分片构造表单数据\"></a>使用文件分片构造表单数据</h4><blockquote>\n<p>fileShardsData为File.slice接口对文件截取得到的部分文件数据<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">'file'</span>, fileShardsData, <span class=\"string\">'file'</span>);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"发送分片\"><a href=\"#发送分片\" class=\"headerlink\" title=\"发送分片\"></a>发送分片</h4><blockquote>\n<p>注意设置请求头的请求数据类型<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XHR(&#123;</span><br><span class=\"line\">  api,</span><br><span class=\"line\">  method,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'multipart/form-data'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"文件上传-中间层Node接收前端发送的分片数据\"><a href=\"#文件上传-中间层Node接收前端发送的分片数据\" class=\"headerlink\" title=\"文件上传-中间层Node接收前端发送的分片数据\"></a>文件上传-中间层Node接收前端发送的分片数据</h3><blockquote>\n<p>Express没有自带文件处理功能，需要使用第三方middleware</p>\n</blockquote>\n<p>环境：</p>\n<ul>\n<li>Express V4框架</li>\n<li>Node.js V8</li>\n</ul>\n<h4 id=\"方法1：使用formidable中间件处理文件请求\"><a href=\"#方法1：使用formidable中间件处理文件请求\" class=\"headerlink\" title=\"方法1：使用formidable中间件处理文件请求\"></a>方法1：使用formidable中间件处理文件请求</h4><ol>\n<li><p>编写公用中间处理组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [使用formidable进行文件解析 - 性能一般]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.formidableParseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fs.existsSync(files.file.path)) &#123;</span><br><span class=\"line\">        fs.readFile(files.file.path, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">          fs.unlink(files.file.path, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          callback(<span class=\"literal\">null</span>, fileBuffer);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">    callback(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/object/object/upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'upload'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">  formidableParseFile(req, res, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">500</span>,</span><br><span class=\"line\">        result: err.toString(),</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">        res.json(&#123;</span><br><span class=\"line\">          code: response.code,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            ...&#123; <span class=\"attr\">etag</span>: response.headers ? response.headers.etag : <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">            ...response.result</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"方法2：代码实现文件处理\"><a href=\"#方法2：代码实现文件处理\" class=\"headerlink\" title=\"方法2：代码实现文件处理\"></a>方法2：代码实现文件处理</h4><ol>\n<li>声明方法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [form-data原生文件解析 - 性能差]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.parseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  req.setEncoding(<span class=\"string\">'binary'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"string\">''</span>;   <span class=\"comment\">// 文件数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fileName = <span class=\"string\">''</span>;  <span class=\"comment\">// 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 边界字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundary = req.headers[<span class=\"string\">'content-type'</span>].split(<span class=\"string\">'; '</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'boundary='</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">    body += chunk;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 分隔键值对(\\r\\n)和键值(:)</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> file = querystring.parse(body, <span class=\"string\">'\\r\\n'</span>, <span class=\"string\">':'</span>)</span><br><span class=\"line\">      <span class=\"comment\">//获取文件名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fileInfo = file[<span class=\"string\">'Content-Disposition'</span>].split(<span class=\"string\">'; '</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (value <span class=\"keyword\">in</span> fileInfo) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fileInfo[value].indexOf(<span class=\"string\">\"filename=\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          fileName = fileInfo[value].substring(<span class=\"number\">10</span>, fileInfo[value].length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fileName.indexOf(<span class=\"string\">'\\\\'</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            fileName = fileName.substring(fileName.lastIndexOf(<span class=\"string\">'\\\\'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取图片类型(如：image/gif 或 image/png))</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> entireData = body.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">      contentType = file[<span class=\"string\">'Content-Type'</span>].substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//获取文件二进制数据开始位置，即contentType的结尾</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> upperBoundary = entireData.indexOf(contentType) + contentType.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> shorterData = entireData.substring(upperBoundary);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 替换开始位置的空格</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryDataAlmost = shorterData.replace(<span class=\"regexp\">/^\\s\\s*/</span>, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s\\s*$/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryData = binaryDataAlmost.substring(<span class=\"number\">0</span>, binaryDataAlmost.indexOf(<span class=\"string\">'--'</span> + boundary + <span class=\"string\">'--'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      callback(<span class=\"literal\">null</span>, binaryData);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'form-data parse error!'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>挂载路由同上</li>\n</ol>\n<h3 id=\"文件下载-中间层Node获取后端文件数据的两种处理\"><a href=\"#文件下载-中间层Node获取后端文件数据的两种处理\" class=\"headerlink\" title=\"文件下载-中间层Node获取后端文件数据的两种处理\"></a>文件下载-中间层Node获取后端文件数据的两种处理</h3><hr>\n<blockquote>\n<p>两种方式均使用Axios发送请求</p>\n</blockquote>\n<h4 id=\"小文件直传\"><a href=\"#小文件直传\" class=\"headerlink\" title=\"小文件直传\"></a>小文件直传</h4><p>接收到接口数据后直接放入内存然后以文件的类型发送给前端</p>\n<ol>\n<li>请求header注意设置<code>resType: &quot;arraybuffer&quot;</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo/all'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfoAll, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.type(<span class=\"string\">'file'</span>).send(response.result)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"大文件转存为静态资源\"><a href=\"#大文件转存为静态资源\" class=\"headerlink\" title=\"大文件转存为静态资源\"></a>大文件转存为静态资源</h4><blockquote>\n<p>Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。</p>\n<ol>\n<li>Node Pipe管道的概念<br><img src=\"/blogs/img/article/node_pipe.png\" alt=\"node pipe\"></li>\n</ol>\n</blockquote>\n<ol>\n<li><p>请求header注意设置<code>resType: &quot;stream&quot;</code></p>\n</li>\n<li><p>创建本地可写流<br>使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在</p>\n</li>\n<li><p>接口返回的是可读流，可以直接连接到管道<br>注意服务器是否支持以数据流方式返回二进制数据</p>\n</li>\n<li><p>可写流完成写入后向前端发送静态资源文件地址<br>监听可写流的finish事件可以异步处理文件完成写入事件</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'download'</span>);</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfo, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'download callback'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = req.body.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileSymbol = <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.join(_path.public, <span class=\"string\">'download'</span>, fileSymbol);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ws = fs.createWriteStream(filePath);</span><br><span class=\"line\">    response.result.pipe(ws);</span><br><span class=\"line\">    ws.on(<span class=\"string\">'finish'</span>, () =&gt; &#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'download finish'</span>);</span><br><span class=\"line\">      res.header(&#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Disposition'</span>: fileName</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        result: filePath.split(<span class=\"string\">'node-express-react/public/public'</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件下载-Js下载中间层文件的两种不同方式\"><a href=\"#文件下载-Js下载中间层文件的两种不同方式\" class=\"headerlink\" title=\"文件下载-Js下载中间层文件的两种不同方式\"></a>文件下载-Js下载中间层文件的两种不同方式</h3><hr>\n<h4 id=\"小文件直接从接口拿到数据并生成DataURL触发下载\"><a href=\"#小文件直接从接口拿到数据并生成DataURL触发下载\" class=\"headerlink\" title=\"小文件直接从接口拿到数据并生成DataURL触发下载\"></a>小文件直接从接口拿到数据并生成DataURL触发下载</h4><ol>\n<li><p>请求header声明<code>responseType:arraybuffer</code><br>指名返回的数据是可直接使用的二进制流数据  </p>\n</li>\n<li><p>接口数据返回后生成前端通用的大二进制块数据<code>Blob</code><br>new Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg</p>\n</li>\n<li><p>使用HTML5 FileReader接口读取二进制块<br>reader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL</p>\n</li>\n<li><p>构造a标签并指名download属性下载DataURL<br>替代方法是使用window.open(dataUrl)</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectInMemory = <span class=\"function\">(<span class=\"params\">para, info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo/all'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'arraybuffer'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> readAsDataUrl = <span class=\"function\">(<span class=\"params\">data, emptyData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">      reader.readAsDataURL(data);</span><br><span class=\"line\">      reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = e.target.result;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        a.href = url === <span class=\"string\">'data:'</span> ? emptyData : url;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(url);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> typename = mapMimeType(info.name).mime;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> blobData = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: typename &#125;);</span><br><span class=\"line\">        readAsDataUrl(blobData, <span class=\"string\">`data:<span class=\"subst\">$&#123;typename&#125;</span>;base64,`</span>);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"大文件通过接口返回的静态文件链接进行下载\"><a href=\"#大文件通过接口返回的静态文件链接进行下载\" class=\"headerlink\" title=\"大文件通过接口返回的静态文件链接进行下载\"></a>大文件通过接口返回的静态文件链接进行下载</h4><p>步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectWithURL = <span class=\"function\">(<span class=\"params\">para</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> address = process.env.NODE_ENV === <span class=\"string\">'development'</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//10.0.6.206:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.hostname&#125;</span>:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span>;</span><br><span class=\"line\">        a.href = address;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      openNotification(<span class=\"string\">'info'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.fileDownloadTips);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>"},{"title":"简单实现一个Javascript动画处理类","catalog":true,"toc_nav_num":true,"date":"2018-11-04T17:10:00.000Z","subtitle":"animation javascript","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-11-04T17:10:00.000Z","_content":"\n#### 目录\n\n1. 预览图\n\n2. 代码实现\n\n3. 总结\n\n#### 预览图\n----------------\n> Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~  \n\n[=> 源代码](https://github.com/NoJsJa/javascript-learning/tree/master/js-animation)\n\n![animation.gif](/blogs/img/article/animation.gif)\n\n#### 代码实现\n-------------------\n\n##### 缓动函数\n> 涉及一些数学原理，感兴趣的可以单独了解一下。\n```js\n/**\n * [tween 缓动算法]\n * @param {[Number]}  t [动画已经消耗的时间]\n * @param {[String]}  b [目标开始的位置]\n * @param {[String]}  c [目标开始位置和结束位置的距离]\n * @param {[Number]}  d [动画总持续时间]\n */\nvar tween = {\n  linear: function( time, start, distance, duration ) { return distance*time/duration + start; },\n  easeIn: function( time, start, distance, duration ) { return distance * ( time /= duration ) * time + start; },\n  strongEaseIn: function(time, start, distance, duration) { return distance * ( time /= duration ) * time * time * time * time + start; },\n  strongEaseOut: function(time, start, distance, duration) { return distance * ( ( time = time / duration - 1) * time * time * time * time + 1 ) + start; },\n  sinEaseIn: function( time, start, distance, duration ) { return distance * ( time /= duration) * time * time + start; },\n  sinEaseOut: function(time,start,distance,duration){ return distance * ( ( time = time / duration - 1) * time * time + 1 ) + start; },\n};\n```\n\n##### 帧请求函数兼容写法\n> requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。\n```js\n// 动画帧请求函数兼容写法\nwindow.requestAnimationFrame = (function(){\n  return  window.requestAnimationFrame       ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame    ||\n          window.oRequestAnimationFrame      ||\n          window.msRequestAnimationFrame     ||\n          function( callback ){\n            return window.setTimeout(callback, 1000 / 60);\n          };\n})();\n```\n\n##### 编写Animation动画类\n> 使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。  \n\n* 初始化执行动画的某个dom元素\n\n```js\n/* ------------------- 动画控制类 ------------------- */\nvar Animation = function () {\n  this.store = { // status store\n  };\n};\n\n/* ------------------- 初始化处理元素 ------------------- */\nAnimation.prototype.setTarget = function (selector) {\n  var element = document.querySelector(selector);\n  if (element) {\n    this.store[selector] = {\n      selector: selector,\n      element: document.querySelector(selector),\n      status: 'pending',\n      queue: [\n      ],\n      timeStart: '',\n      positionStart: {\n        x: '',\n        y: '',\n      },\n      positionEnd: {\n        x: '',\n        y: '',\n      },\n    };\n  }\n};\n```\n* 动画调用主要函数`update`的编写\n\n> 运用了设计模式中`享元模式`的思想来分离变化(`Animation.store属性`)和不变的部分。  \n\n```js\n/**\n * [start 开始动画]\n * @param  {[String]} selector [选择器]\n * @param  {[type]} func     [缓动动画]\n */\nAnimation.prototype.start = function (selector, func) {\n  var that = this;\n  var target = this.store[selector];\n  target.status = 'running';\n\n  // 帧调用函数\n  that.update({x: 0, y: 0}, selector);\n};\n\n/**\n * [update 更新位置]\n * @param  {[type]} selector [description]\n */\nAnimation.prototype.update =  function (position, selector) {\n  var target = this.store[selector],\n    that = this,\n    timeUsed,\n    positionX, positionY;\n  //\n  if (!target || !target.queue.length) {\n    target.status = 'pending';\n    return;\n  };\n\n  // reset position\n  target.element.style.left = position.x + 'px';\n  target.element.style.top = position.y + 'px';\n\n  // position\n  target.positionStart = {\n    x: position.x,\n    y: position.y,\n  };\n  target.positionEnd = {\n    x: position.x + target.queue[0].x,\n    y: position.y + target.queue[0].y,\n  };\n  // time\n  target.timeStart = new Date().getTime();\n\n  // 递归调用\n  var callback = function () {\n    timeUsed = new Date().getTime() - target.timeStart;\n    // 当前动画完成\n    if (timeUsed >= target.queue[0].duration) {\n      target.queue.shift();\n      // 误差矫正\n      that.step(target.element, target.positionEnd.x, target.positionEnd.y);\n      target.status = 'running';\n      // var position = target.element.getBoundingClientRect();\n      var position = {\n        x: parseInt(target.element.style.left),\n        y: parseInt(target.element.style.top),\n      };\n      // 下一个动画\n      that.update(position, selector);\n      return;\n    }\n    // 计算元素坐标\n    positionX = target.queue[0].func(\n      timeUsed,\n      target.positionStart.x,\n      target.positionEnd.x - target.positionStart.x,\n      target.queue[0].duration,\n    );\n    positionY = target.queue[0].func(\n      timeUsed,\n      target.positionStart.y,\n      target.positionEnd.y - target.positionStart.y,\n      target.queue[0].duration,\n    );\n    that.step(target.element, positionX, positionY);\n\n    // 递归帧函数调用\n    requestAnimationFrame(callback);\n  };\n\n  requestAnimationFrame(callback);\n};\n```\n\n* 其它一些方法(部分暂未实现)\n\n```js\n/**\n * [step dom操作]\n * @param  {[DOM]} element [dom 元素]\n * @param  {[Number]} x        [x坐标]\n * @param  {[Number]} y        [y坐标]\n */\nAnimation.prototype.step = function (element, x, y) {\n  element.style.left = x + 'px';\n  element.style.top = y + 'px';\n};\n\n/* ------------------- 暂停动画 ------------------- */\nAnimation.prototype.pause = function (selector) {\n  // 尚待实现\n};\n\n/* ------------------- 结束动画 ------------------- */\nAnimation.prototype.stop = function (selector) {\n    // 尚待实现\n};\n\n/**\n * [push 加入动画队列]\n * @param  {[String]} selector [dom选择器]\n * @param  {[Object]} conf     [相对位置数据]\n */\nAnimation.prototype.push = function (selector, conf) {\n  if (this.store[selector]) {\n    this.store[selector].queue.push({\n      x: conf.x,\n      y: conf.y,\n      duration: conf.duration || 1000,\n      func: tween[conf.func] || tween['linear'],\n    });\n  }\n};\n\n/* ------------------- 动画出队列 ------------------- */\nAnimation.prototype.pop = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.pop();\n  }\n};\n\n/* ------------------- 清空动画队列 ------------------- */\nAnimation.prototype.clear = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.length = 1;\n  }\n};\n```\n##### Animation调用方式\n1. 初始化元素\n2. 插入多个动画数据(坐标相对值、动画执行时间、缓动方式)\n3. 开始执行动画\n\n```js\nvar anime = new Animation();\nanime.setTarget('#animationTarget');\n// 右下角移动50px\nanime.push('#animationTarget', { x: 50, y: 50, duration: 1000, func: 'easeIn' });\n// 右上角移动50px\nanime.push('#animationTarget', { x: -50, y: -50, duration: 500, func: 'linear' });\n// 横向移动50px\nanime.push('#animationTarget', { x: 50, y: 0, duration: 1000, func: 'easeIn' });\n// 纵向移动50px\nanime.push('#animationTarget', { x: 0, y: 50, duration: 500, func: 'linear' });\n// 开始执行动画\nanime.start('#animationTarget');\n```\n\n#### 总结\n-------------\nJavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。\n\n##### 感谢阅读\n","source":"_posts/简单实现一个Javascript动画处理类.md","raw":"---\ntitle: \"简单实现一个Javascript动画处理类\"\ncatalog: true\ntoc_nav_num: true\ndate: 2018-11-05 01:10:00\nsubtitle: \"animation javascript\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- animation\ncategories:\n- Javascript\nupdateDate: 2018-11-05 01:10:00\n---\n\n#### 目录\n\n1. 预览图\n\n2. 代码实现\n\n3. 总结\n\n#### 预览图\n----------------\n> Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~  \n\n[=> 源代码](https://github.com/NoJsJa/javascript-learning/tree/master/js-animation)\n\n![animation.gif](/blogs/img/article/animation.gif)\n\n#### 代码实现\n-------------------\n\n##### 缓动函数\n> 涉及一些数学原理，感兴趣的可以单独了解一下。\n```js\n/**\n * [tween 缓动算法]\n * @param {[Number]}  t [动画已经消耗的时间]\n * @param {[String]}  b [目标开始的位置]\n * @param {[String]}  c [目标开始位置和结束位置的距离]\n * @param {[Number]}  d [动画总持续时间]\n */\nvar tween = {\n  linear: function( time, start, distance, duration ) { return distance*time/duration + start; },\n  easeIn: function( time, start, distance, duration ) { return distance * ( time /= duration ) * time + start; },\n  strongEaseIn: function(time, start, distance, duration) { return distance * ( time /= duration ) * time * time * time * time + start; },\n  strongEaseOut: function(time, start, distance, duration) { return distance * ( ( time = time / duration - 1) * time * time * time * time + 1 ) + start; },\n  sinEaseIn: function( time, start, distance, duration ) { return distance * ( time /= duration) * time * time + start; },\n  sinEaseOut: function(time,start,distance,duration){ return distance * ( ( time = time / duration - 1) * time * time + 1 ) + start; },\n};\n```\n\n##### 帧请求函数兼容写法\n> requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。\n```js\n// 动画帧请求函数兼容写法\nwindow.requestAnimationFrame = (function(){\n  return  window.requestAnimationFrame       ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame    ||\n          window.oRequestAnimationFrame      ||\n          window.msRequestAnimationFrame     ||\n          function( callback ){\n            return window.setTimeout(callback, 1000 / 60);\n          };\n})();\n```\n\n##### 编写Animation动画类\n> 使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。  \n\n* 初始化执行动画的某个dom元素\n\n```js\n/* ------------------- 动画控制类 ------------------- */\nvar Animation = function () {\n  this.store = { // status store\n  };\n};\n\n/* ------------------- 初始化处理元素 ------------------- */\nAnimation.prototype.setTarget = function (selector) {\n  var element = document.querySelector(selector);\n  if (element) {\n    this.store[selector] = {\n      selector: selector,\n      element: document.querySelector(selector),\n      status: 'pending',\n      queue: [\n      ],\n      timeStart: '',\n      positionStart: {\n        x: '',\n        y: '',\n      },\n      positionEnd: {\n        x: '',\n        y: '',\n      },\n    };\n  }\n};\n```\n* 动画调用主要函数`update`的编写\n\n> 运用了设计模式中`享元模式`的思想来分离变化(`Animation.store属性`)和不变的部分。  \n\n```js\n/**\n * [start 开始动画]\n * @param  {[String]} selector [选择器]\n * @param  {[type]} func     [缓动动画]\n */\nAnimation.prototype.start = function (selector, func) {\n  var that = this;\n  var target = this.store[selector];\n  target.status = 'running';\n\n  // 帧调用函数\n  that.update({x: 0, y: 0}, selector);\n};\n\n/**\n * [update 更新位置]\n * @param  {[type]} selector [description]\n */\nAnimation.prototype.update =  function (position, selector) {\n  var target = this.store[selector],\n    that = this,\n    timeUsed,\n    positionX, positionY;\n  //\n  if (!target || !target.queue.length) {\n    target.status = 'pending';\n    return;\n  };\n\n  // reset position\n  target.element.style.left = position.x + 'px';\n  target.element.style.top = position.y + 'px';\n\n  // position\n  target.positionStart = {\n    x: position.x,\n    y: position.y,\n  };\n  target.positionEnd = {\n    x: position.x + target.queue[0].x,\n    y: position.y + target.queue[0].y,\n  };\n  // time\n  target.timeStart = new Date().getTime();\n\n  // 递归调用\n  var callback = function () {\n    timeUsed = new Date().getTime() - target.timeStart;\n    // 当前动画完成\n    if (timeUsed >= target.queue[0].duration) {\n      target.queue.shift();\n      // 误差矫正\n      that.step(target.element, target.positionEnd.x, target.positionEnd.y);\n      target.status = 'running';\n      // var position = target.element.getBoundingClientRect();\n      var position = {\n        x: parseInt(target.element.style.left),\n        y: parseInt(target.element.style.top),\n      };\n      // 下一个动画\n      that.update(position, selector);\n      return;\n    }\n    // 计算元素坐标\n    positionX = target.queue[0].func(\n      timeUsed,\n      target.positionStart.x,\n      target.positionEnd.x - target.positionStart.x,\n      target.queue[0].duration,\n    );\n    positionY = target.queue[0].func(\n      timeUsed,\n      target.positionStart.y,\n      target.positionEnd.y - target.positionStart.y,\n      target.queue[0].duration,\n    );\n    that.step(target.element, positionX, positionY);\n\n    // 递归帧函数调用\n    requestAnimationFrame(callback);\n  };\n\n  requestAnimationFrame(callback);\n};\n```\n\n* 其它一些方法(部分暂未实现)\n\n```js\n/**\n * [step dom操作]\n * @param  {[DOM]} element [dom 元素]\n * @param  {[Number]} x        [x坐标]\n * @param  {[Number]} y        [y坐标]\n */\nAnimation.prototype.step = function (element, x, y) {\n  element.style.left = x + 'px';\n  element.style.top = y + 'px';\n};\n\n/* ------------------- 暂停动画 ------------------- */\nAnimation.prototype.pause = function (selector) {\n  // 尚待实现\n};\n\n/* ------------------- 结束动画 ------------------- */\nAnimation.prototype.stop = function (selector) {\n    // 尚待实现\n};\n\n/**\n * [push 加入动画队列]\n * @param  {[String]} selector [dom选择器]\n * @param  {[Object]} conf     [相对位置数据]\n */\nAnimation.prototype.push = function (selector, conf) {\n  if (this.store[selector]) {\n    this.store[selector].queue.push({\n      x: conf.x,\n      y: conf.y,\n      duration: conf.duration || 1000,\n      func: tween[conf.func] || tween['linear'],\n    });\n  }\n};\n\n/* ------------------- 动画出队列 ------------------- */\nAnimation.prototype.pop = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.pop();\n  }\n};\n\n/* ------------------- 清空动画队列 ------------------- */\nAnimation.prototype.clear = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.length = 1;\n  }\n};\n```\n##### Animation调用方式\n1. 初始化元素\n2. 插入多个动画数据(坐标相对值、动画执行时间、缓动方式)\n3. 开始执行动画\n\n```js\nvar anime = new Animation();\nanime.setTarget('#animationTarget');\n// 右下角移动50px\nanime.push('#animationTarget', { x: 50, y: 50, duration: 1000, func: 'easeIn' });\n// 右上角移动50px\nanime.push('#animationTarget', { x: -50, y: -50, duration: 500, func: 'linear' });\n// 横向移动50px\nanime.push('#animationTarget', { x: 50, y: 0, duration: 1000, func: 'easeIn' });\n// 纵向移动50px\nanime.push('#animationTarget', { x: 0, y: 50, duration: 500, func: 'linear' });\n// 开始执行动画\nanime.start('#animationTarget');\n```\n\n#### 总结\n-------------\nJavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。\n\n##### 感谢阅读\n","slug":"简单实现一个Javascript动画处理类","published":1,"updated":"2020-08-20T05:00:00.007Z","_id":"ckba8cy9g00035495f9a416ly","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><ol>\n<li><p>预览图</p>\n</li>\n<li><p>代码实现</p>\n</li>\n<li><p>总结</p>\n</li>\n</ol>\n<h4 id=\"预览图\"><a href=\"#预览图\" class=\"headerlink\" title=\"预览图\"></a>预览图</h4><hr>\n<blockquote>\n<p>Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~  </p>\n</blockquote>\n<p><a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/js-animation\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p>\n<p><img src=\"/blogs/img/article/animation.gif\" alt=\"animation.gif\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><hr>\n<h5 id=\"缓动函数\"><a href=\"#缓动函数\" class=\"headerlink\" title=\"缓动函数\"></a>缓动函数</h5><blockquote>\n<p>涉及一些数学原理，感兴趣的可以单独了解一下。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [tween 缓动算法]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>t [动画已经消耗的时间]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>b [目标开始的位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>c [目标开始位置和结束位置的距离]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>d [动画总持续时间]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tween = &#123;</span><br><span class=\"line\">  linear: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance*time/duration + start; &#125;,</span><br><span class=\"line\">  easeIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time + start; &#125;,</span><br><span class=\"line\">  strongEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time * time * time * time + start; &#125;,</span><br><span class=\"line\">  strongEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">  sinEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration) * time * time + start; &#125;,</span><br><span class=\"line\">  sinEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time,start,distance,duration</span>)</span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"帧请求函数兼容写法\"><a href=\"#帧请求函数兼容写法\" class=\"headerlink\" title=\"帧请求函数兼容写法\"></a>帧请求函数兼容写法</h5><blockquote>\n<p>requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动画帧请求函数兼容写法</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"built_in\">window</span>.requestAnimationFrame       ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.webkitRequestAnimationFrame ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.mozRequestAnimationFrame    ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.oRequestAnimationFrame      ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.msRequestAnimationFrame     ||</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> callback </span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"编写Animation动画类\"><a href=\"#编写Animation动画类\" class=\"headerlink\" title=\"编写Animation动画类\"></a>编写Animation动画类</h5><blockquote>\n<p>使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。  </p>\n</blockquote>\n<ul>\n<li>初始化执行动画的某个dom元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- 动画控制类 ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store = &#123; <span class=\"comment\">// status store</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 初始化处理元素 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.setTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector] = &#123;</span><br><span class=\"line\">      selector: selector,</span><br><span class=\"line\">      element: <span class=\"built_in\">document</span>.querySelector(selector),</span><br><span class=\"line\">      status: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">      queue: [</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      timeStart: <span class=\"string\">''</span>,</span><br><span class=\"line\">      positionStart: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      positionEnd: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>动画调用主要函数<code>update</code>的编写</li>\n</ul>\n<blockquote>\n<p>运用了设计模式中<code>享元模式</code>的思想来分离变化(<code>Animation.store属性</code>)和不变的部分。  </p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [start 开始动画]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>func     [缓动动画]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector];</span><br><span class=\"line\">  target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 帧调用函数</span></span><br><span class=\"line\">  that.update(&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;, selector);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [update 更新位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>selector [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.update =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector],</span><br><span class=\"line\">    that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    timeUsed,</span><br><span class=\"line\">    positionX, positionY;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !target.queue.length) &#123;</span><br><span class=\"line\">    target.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset position</span></span><br><span class=\"line\">  target.element.style.left = position.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  target.element.style.top = position.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// position</span></span><br><span class=\"line\">  target.positionStart = &#123;</span><br><span class=\"line\">    x: position.x,</span><br><span class=\"line\">    y: position.y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  target.positionEnd = &#123;</span><br><span class=\"line\">    x: position.x + target.queue[<span class=\"number\">0</span>].x,</span><br><span class=\"line\">    y: position.y + target.queue[<span class=\"number\">0</span>].y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// time</span></span><br><span class=\"line\">  target.timeStart = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    timeUsed = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - target.timeStart;</span><br><span class=\"line\">    <span class=\"comment\">// 当前动画完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeUsed &gt;= target.queue[<span class=\"number\">0</span>].duration) &#123;</span><br><span class=\"line\">      target.queue.shift();</span><br><span class=\"line\">      <span class=\"comment\">// 误差矫正</span></span><br><span class=\"line\">      that.step(target.element, target.positionEnd.x, target.positionEnd.y);</span><br><span class=\"line\">      target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// var position = target.element.getBoundingClientRect();</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> position = &#123;</span><br><span class=\"line\">        x: <span class=\"built_in\">parseInt</span>(target.element.style.left),</span><br><span class=\"line\">        y: <span class=\"built_in\">parseInt</span>(target.element.style.top),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 下一个动画</span></span><br><span class=\"line\">      that.update(position, selector);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算元素坐标</span></span><br><span class=\"line\">    positionX = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.x,</span><br><span class=\"line\">      target.positionEnd.x - target.positionStart.x,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    positionY = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.y,</span><br><span class=\"line\">      target.positionEnd.y - target.positionStart.y,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    that.step(target.element, positionX, positionY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归帧函数调用</span></span><br><span class=\"line\">    requestAnimationFrame(callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(callback);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其它一些方法(部分暂未实现)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [step dom操作]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[DOM]&#125;</span> </span>element [dom 元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>x        [x坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>y        [y坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, x, y</span>) </span>&#123;</span><br><span class=\"line\">  element.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  element.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 暂停动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pause = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 结束动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.stop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [push 加入动画队列]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [dom选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>conf     [相对位置数据]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, conf</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.push(&#123;</span><br><span class=\"line\">      x: conf.x,</span><br><span class=\"line\">      y: conf.y,</span><br><span class=\"line\">      duration: conf.duration || <span class=\"number\">1000</span>,</span><br><span class=\"line\">      func: tween[conf.func] || tween[<span class=\"string\">'linear'</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画出队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 清空动画队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.clear = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Animation调用方式\"><a href=\"#Animation调用方式\" class=\"headerlink\" title=\"Animation调用方式\"></a>Animation调用方式</h5><ol>\n<li>初始化元素</li>\n<li>插入多个动画数据(坐标相对值、动画执行时间、缓动方式)</li>\n<li>开始执行动画</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anime = <span class=\"keyword\">new</span> Animation();</span><br><span class=\"line\">anime.setTarget(<span class=\"string\">'#animationTarget'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 右下角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 右上角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">-50</span>, <span class=\"attr\">y</span>: <span class=\"number\">-50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 横向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 纵向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 开始执行动画</span></span><br><span class=\"line\">anime.start(<span class=\"string\">'#animationTarget'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><hr>\n<p>JavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。</p>\n<h5 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h5>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><ol>\n<li><p>预览图</p>\n</li>\n<li><p>代码实现</p>\n</li>\n<li><p>总结</p>\n</li>\n</ol>\n<h4 id=\"预览图\"><a href=\"#预览图\" class=\"headerlink\" title=\"预览图\"></a>预览图</h4><hr>\n<blockquote>\n<p>Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~  </p>\n</blockquote>\n<p><a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/js-animation\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p>\n<p><img src=\"/blogs/img/article/animation.gif\" alt=\"animation.gif\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><hr>\n<h5 id=\"缓动函数\"><a href=\"#缓动函数\" class=\"headerlink\" title=\"缓动函数\"></a>缓动函数</h5><blockquote>\n<p>涉及一些数学原理，感兴趣的可以单独了解一下。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [tween 缓动算法]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>t [动画已经消耗的时间]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>b [目标开始的位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>c [目标开始位置和结束位置的距离]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>d [动画总持续时间]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tween = &#123;</span><br><span class=\"line\">  linear: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance*time/duration + start; &#125;,</span><br><span class=\"line\">  easeIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time + start; &#125;,</span><br><span class=\"line\">  strongEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time * time * time * time + start; &#125;,</span><br><span class=\"line\">  strongEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">  sinEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration) * time * time + start; &#125;,</span><br><span class=\"line\">  sinEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time,start,distance,duration</span>)</span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"帧请求函数兼容写法\"><a href=\"#帧请求函数兼容写法\" class=\"headerlink\" title=\"帧请求函数兼容写法\"></a>帧请求函数兼容写法</h5><blockquote>\n<p>requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动画帧请求函数兼容写法</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"built_in\">window</span>.requestAnimationFrame       ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.webkitRequestAnimationFrame ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.mozRequestAnimationFrame    ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.oRequestAnimationFrame      ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.msRequestAnimationFrame     ||</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> callback </span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"编写Animation动画类\"><a href=\"#编写Animation动画类\" class=\"headerlink\" title=\"编写Animation动画类\"></a>编写Animation动画类</h5><blockquote>\n<p>使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。  </p>\n</blockquote>\n<ul>\n<li>初始化执行动画的某个dom元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- 动画控制类 ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store = &#123; <span class=\"comment\">// status store</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 初始化处理元素 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.setTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector] = &#123;</span><br><span class=\"line\">      selector: selector,</span><br><span class=\"line\">      element: <span class=\"built_in\">document</span>.querySelector(selector),</span><br><span class=\"line\">      status: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">      queue: [</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      timeStart: <span class=\"string\">''</span>,</span><br><span class=\"line\">      positionStart: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      positionEnd: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>动画调用主要函数<code>update</code>的编写</li>\n</ul>\n<blockquote>\n<p>运用了设计模式中<code>享元模式</code>的思想来分离变化(<code>Animation.store属性</code>)和不变的部分。  </p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [start 开始动画]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>func     [缓动动画]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector];</span><br><span class=\"line\">  target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 帧调用函数</span></span><br><span class=\"line\">  that.update(&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;, selector);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [update 更新位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>selector [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.update =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector],</span><br><span class=\"line\">    that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    timeUsed,</span><br><span class=\"line\">    positionX, positionY;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !target.queue.length) &#123;</span><br><span class=\"line\">    target.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset position</span></span><br><span class=\"line\">  target.element.style.left = position.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  target.element.style.top = position.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// position</span></span><br><span class=\"line\">  target.positionStart = &#123;</span><br><span class=\"line\">    x: position.x,</span><br><span class=\"line\">    y: position.y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  target.positionEnd = &#123;</span><br><span class=\"line\">    x: position.x + target.queue[<span class=\"number\">0</span>].x,</span><br><span class=\"line\">    y: position.y + target.queue[<span class=\"number\">0</span>].y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// time</span></span><br><span class=\"line\">  target.timeStart = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    timeUsed = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - target.timeStart;</span><br><span class=\"line\">    <span class=\"comment\">// 当前动画完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeUsed &gt;= target.queue[<span class=\"number\">0</span>].duration) &#123;</span><br><span class=\"line\">      target.queue.shift();</span><br><span class=\"line\">      <span class=\"comment\">// 误差矫正</span></span><br><span class=\"line\">      that.step(target.element, target.positionEnd.x, target.positionEnd.y);</span><br><span class=\"line\">      target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// var position = target.element.getBoundingClientRect();</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> position = &#123;</span><br><span class=\"line\">        x: <span class=\"built_in\">parseInt</span>(target.element.style.left),</span><br><span class=\"line\">        y: <span class=\"built_in\">parseInt</span>(target.element.style.top),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 下一个动画</span></span><br><span class=\"line\">      that.update(position, selector);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算元素坐标</span></span><br><span class=\"line\">    positionX = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.x,</span><br><span class=\"line\">      target.positionEnd.x - target.positionStart.x,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    positionY = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.y,</span><br><span class=\"line\">      target.positionEnd.y - target.positionStart.y,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    that.step(target.element, positionX, positionY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归帧函数调用</span></span><br><span class=\"line\">    requestAnimationFrame(callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(callback);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其它一些方法(部分暂未实现)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [step dom操作]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[DOM]&#125;</span> </span>element [dom 元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>x        [x坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>y        [y坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, x, y</span>) </span>&#123;</span><br><span class=\"line\">  element.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  element.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 暂停动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pause = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 结束动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.stop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [push 加入动画队列]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [dom选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>conf     [相对位置数据]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, conf</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.push(&#123;</span><br><span class=\"line\">      x: conf.x,</span><br><span class=\"line\">      y: conf.y,</span><br><span class=\"line\">      duration: conf.duration || <span class=\"number\">1000</span>,</span><br><span class=\"line\">      func: tween[conf.func] || tween[<span class=\"string\">'linear'</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画出队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 清空动画队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.clear = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Animation调用方式\"><a href=\"#Animation调用方式\" class=\"headerlink\" title=\"Animation调用方式\"></a>Animation调用方式</h5><ol>\n<li>初始化元素</li>\n<li>插入多个动画数据(坐标相对值、动画执行时间、缓动方式)</li>\n<li>开始执行动画</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anime = <span class=\"keyword\">new</span> Animation();</span><br><span class=\"line\">anime.setTarget(<span class=\"string\">'#animationTarget'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 右下角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 右上角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">-50</span>, <span class=\"attr\">y</span>: <span class=\"number\">-50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 横向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 纵向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 开始执行动画</span></span><br><span class=\"line\">anime.start(<span class=\"string\">'#animationTarget'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><hr>\n<p>JavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。</p>\n<h5 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h5>"},{"title":"联想y7000安装ubuntu18.04显卡驱动解决方案","catalog":true,"toc_nav_num":true,"date":"2019-09-29T02:49:00.000Z","subtitle":"y7000 ubuntu18.04","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-09-29T02:49:00.000Z","_content":"\n\n![Desktop](/blogs/img/article/Desktop3.png)\n![Desktop](/blogs/img/article/Desktop2.png)\n![Desktop](/blogs/img/article/Desktop.png)\n\n### 目录\n\n1. 笔记本配置和操作系统版本\n\n2. 安装Ubuntu18.04-3后出现的异常\n\n3. 解决方案\n\n### 笔记本配置\n\n* CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8\n\n* GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显\n\n* 操作系统: Ubuntu 18.04.3 bionic\n\n* 内核版本: Linux 5.0.0-27-generic\n\n* 内存: 16G\n\n* 分区:  GPT磁盘分区 + UEFI引导方案 ，创建`efi`系统分区和`/`根分区\n\n### 安装Ubuntu18.04-3后出现的异常\n\n* 开机卡死或登录卡死\n\n* 登录后不能检测到无线网卡\n\n* 屏幕亮度不可调节\n\n* HDMI外接屏幕不可用\n\n### 解决方案\n\n卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会\n出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能\n进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：\n\n#### 1.  强制使用集显\n\n在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash”`为`“quiet splash nomodeset”`，之后F10，重新启动正常进入Ubuntu系统\n进入系统后让这个设置一直有效的方法是：\n\n```sh\n$: sudo gedit /etc/default/grub\n```\n\n跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：\n\n```sh\n$: sudo update-grub\n```\n\n#### 2. 重新安装Nvidia显卡驱动\n\n禁用ubuntu默认显卡(集显)驱动\n\n```sh\n$: sudo vi /etc/modprobe.d/blacklist.conf\n```\n\n在文件最末尾添加如下参数加入黑名单：\n\n```sh\nblacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist rivatv\nblacklist nvidiafb\n```\n\n卸载干净所有安装过的nvidia驱动：\n\n```sh\n$: sudo apt-get remove  --purge nvidia-*\n```\n\n查看驱动状态，无输出则说明已经被屏蔽掉\n\n```sh\n$: lsmod | grep nouveau\n```\n\n添加驱动源：\n\n```sh\n$: sudo add-apt-repository ppa:graphics-drivers/ppa\n$: sudo apt-get update\n```\n\n查看合适驱动版本：\n\n```sh\nubuntu-drivers devices\n```\n\n这里推荐直接使用`nvidia-driver-390`或`nvidia-driver-430`驱动\n\n```sh\n$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime\n```\n\n重启\n\n```sh\n$: sudo update-initramfs -u\n$: sudo reboot\n```\n\n重启时，在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash nomodeset”`为`“quiet splash acpi_osi=linux”`，之后F10，重新启动正常进入Ubuntu系统\n\n开机后查看驱动安装状态：\n\n```sh\n$: sudo nvidia-smi\n```\n\n编辑grab文件执行上一步相同的参数修改，最后更新：\n\n```sh\n$: sudo gedit /etc/default/grub\n$: sudo update-grub\n```\n\n#### 3. 解决无线网络不能使用的问题\n\n原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可\n\n将联想驱动加入黑名单:\n\n```sh\n$: sudo gedit /etc/modprobe.d/blacklist.conf\n```\n\n在文件中添加：\n\n```sh\nblacklist ideapad_laptop\n```\n\n即时生效：\n\n```sh\n$: sudo modprobe -r ideapad_laptop\n```\n\n_关于Ubuntu主题美化和其它问题解决请移步：[Ubuntu 18.04 踩坑记录](https://www.jianshu.com/p/23b0d3015db8)_","source":"_posts/联想y7000安装ubuntu18.04显卡驱动解决方案.md","raw":"---\ntitle: \"联想y7000安装ubuntu18.04显卡驱动解决方案\"\ncatalog: true\ntoc_nav_num: true\ndate: 2019-09-29 10:49:00\nsubtitle: \"y7000 ubuntu18.04\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- ubuntu18.04\ncategories:\n- Linux\nupdateDate: 2019-09-29 10:49:00\n---\n\n\n![Desktop](/blogs/img/article/Desktop3.png)\n![Desktop](/blogs/img/article/Desktop2.png)\n![Desktop](/blogs/img/article/Desktop.png)\n\n### 目录\n\n1. 笔记本配置和操作系统版本\n\n2. 安装Ubuntu18.04-3后出现的异常\n\n3. 解决方案\n\n### 笔记本配置\n\n* CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8\n\n* GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显\n\n* 操作系统: Ubuntu 18.04.3 bionic\n\n* 内核版本: Linux 5.0.0-27-generic\n\n* 内存: 16G\n\n* 分区:  GPT磁盘分区 + UEFI引导方案 ，创建`efi`系统分区和`/`根分区\n\n### 安装Ubuntu18.04-3后出现的异常\n\n* 开机卡死或登录卡死\n\n* 登录后不能检测到无线网卡\n\n* 屏幕亮度不可调节\n\n* HDMI外接屏幕不可用\n\n### 解决方案\n\n卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会\n出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能\n进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：\n\n#### 1.  强制使用集显\n\n在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash”`为`“quiet splash nomodeset”`，之后F10，重新启动正常进入Ubuntu系统\n进入系统后让这个设置一直有效的方法是：\n\n```sh\n$: sudo gedit /etc/default/grub\n```\n\n跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：\n\n```sh\n$: sudo update-grub\n```\n\n#### 2. 重新安装Nvidia显卡驱动\n\n禁用ubuntu默认显卡(集显)驱动\n\n```sh\n$: sudo vi /etc/modprobe.d/blacklist.conf\n```\n\n在文件最末尾添加如下参数加入黑名单：\n\n```sh\nblacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist rivatv\nblacklist nvidiafb\n```\n\n卸载干净所有安装过的nvidia驱动：\n\n```sh\n$: sudo apt-get remove  --purge nvidia-*\n```\n\n查看驱动状态，无输出则说明已经被屏蔽掉\n\n```sh\n$: lsmod | grep nouveau\n```\n\n添加驱动源：\n\n```sh\n$: sudo add-apt-repository ppa:graphics-drivers/ppa\n$: sudo apt-get update\n```\n\n查看合适驱动版本：\n\n```sh\nubuntu-drivers devices\n```\n\n这里推荐直接使用`nvidia-driver-390`或`nvidia-driver-430`驱动\n\n```sh\n$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime\n```\n\n重启\n\n```sh\n$: sudo update-initramfs -u\n$: sudo reboot\n```\n\n重启时，在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash nomodeset”`为`“quiet splash acpi_osi=linux”`，之后F10，重新启动正常进入Ubuntu系统\n\n开机后查看驱动安装状态：\n\n```sh\n$: sudo nvidia-smi\n```\n\n编辑grab文件执行上一步相同的参数修改，最后更新：\n\n```sh\n$: sudo gedit /etc/default/grub\n$: sudo update-grub\n```\n\n#### 3. 解决无线网络不能使用的问题\n\n原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可\n\n将联想驱动加入黑名单:\n\n```sh\n$: sudo gedit /etc/modprobe.d/blacklist.conf\n```\n\n在文件中添加：\n\n```sh\nblacklist ideapad_laptop\n```\n\n即时生效：\n\n```sh\n$: sudo modprobe -r ideapad_laptop\n```\n\n_关于Ubuntu主题美化和其它问题解决请移步：[Ubuntu 18.04 踩坑记录](https://www.jianshu.com/p/23b0d3015db8)_","slug":"联想y7000安装ubuntu18-04显卡驱动解决方案","published":1,"updated":"2020-08-20T05:00:08.927Z","_id":"ckba8cy9h000454953gec62gg","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/blogs/img/article/Desktop3.png\" alt=\"Desktop\"><br><img src=\"/blogs/img/article/Desktop2.png\" alt=\"Desktop\"><br><img src=\"/blogs/img/article/Desktop.png\" alt=\"Desktop\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li><p>笔记本配置和操作系统版本</p>\n</li>\n<li><p>安装Ubuntu18.04-3后出现的异常</p>\n</li>\n<li><p>解决方案</p>\n</li>\n</ol>\n<h3 id=\"笔记本配置\"><a href=\"#笔记本配置\" class=\"headerlink\" title=\"笔记本配置\"></a>笔记本配置</h3><ul>\n<li><p>CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8</p>\n</li>\n<li><p>GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显</p>\n</li>\n<li><p>操作系统: Ubuntu 18.04.3 bionic</p>\n</li>\n<li><p>内核版本: Linux 5.0.0-27-generic</p>\n</li>\n<li><p>内存: 16G</p>\n</li>\n<li><p>分区:  GPT磁盘分区 + UEFI引导方案 ，创建<code>efi</code>系统分区和<code>/</code>根分区</p>\n</li>\n</ul>\n<h3 id=\"安装Ubuntu18-04-3后出现的异常\"><a href=\"#安装Ubuntu18-04-3后出现的异常\" class=\"headerlink\" title=\"安装Ubuntu18.04-3后出现的异常\"></a>安装Ubuntu18.04-3后出现的异常</h3><ul>\n<li><p>开机卡死或登录卡死</p>\n</li>\n<li><p>登录后不能检测到无线网卡</p>\n</li>\n<li><p>屏幕亮度不可调节</p>\n</li>\n<li><p>HDMI外接屏幕不可用</p>\n</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会<br>出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能<br>进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：</p>\n<h4 id=\"1-强制使用集显\"><a href=\"#1-强制使用集显\" class=\"headerlink\" title=\"1.  强制使用集显\"></a>1.  强制使用集显</h4><p>在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash”</code>为<code>“quiet splash nomodeset”</code>，之后F10，重新启动正常进入Ubuntu系统<br>进入系统后让这个设置一直有效的方法是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-重新安装Nvidia显卡驱动\"><a href=\"#2-重新安装Nvidia显卡驱动\" class=\"headerlink\" title=\"2. 重新安装Nvidia显卡驱动\"></a>2. 重新安装Nvidia显卡驱动</h4><p>禁用ubuntu默认显卡(集显)驱动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo vi /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>在文件最末尾添加如下参数加入黑名单：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure>\n<p>卸载干净所有安装过的nvidia驱动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get remove  --purge nvidia-*</span><br></pre></td></tr></table></figure>\n<p>查看驱动状态，无输出则说明已经被屏蔽掉</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>添加驱动源：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class=\"line\">$: sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>查看合适驱动版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices</span><br></pre></td></tr></table></figure>\n<p>这里推荐直接使用<code>nvidia-driver-390</code>或<code>nvidia-driver-430</code>驱动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-initramfs -u</span><br><span class=\"line\">$: sudo reboot</span><br></pre></td></tr></table></figure>\n<p>重启时，在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash nomodeset”</code>为<code>“quiet splash acpi_osi=linux”</code>，之后F10，重新启动正常进入Ubuntu系统</p>\n<p>开机后查看驱动安装状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>编辑grab文件执行上一步相同的参数修改，最后更新：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-解决无线网络不能使用的问题\"><a href=\"#3-解决无线网络不能使用的问题\" class=\"headerlink\" title=\"3. 解决无线网络不能使用的问题\"></a>3. 解决无线网络不能使用的问题</h4><p>原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可</p>\n<p>将联想驱动加入黑名单:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>在文件中添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist ideapad_laptop</span><br></pre></td></tr></table></figure>\n<p>即时生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure>\n<p><em>关于Ubuntu主题美化和其它问题解决请移步：<a href=\"https://www.jianshu.com/p/23b0d3015db8\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 踩坑记录</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blogs/img/article/Desktop3.png\" alt=\"Desktop\"><br><img src=\"/blogs/img/article/Desktop2.png\" alt=\"Desktop\"><br><img src=\"/blogs/img/article/Desktop.png\" alt=\"Desktop\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li><p>笔记本配置和操作系统版本</p>\n</li>\n<li><p>安装Ubuntu18.04-3后出现的异常</p>\n</li>\n<li><p>解决方案</p>\n</li>\n</ol>\n<h3 id=\"笔记本配置\"><a href=\"#笔记本配置\" class=\"headerlink\" title=\"笔记本配置\"></a>笔记本配置</h3><ul>\n<li><p>CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8</p>\n</li>\n<li><p>GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显</p>\n</li>\n<li><p>操作系统: Ubuntu 18.04.3 bionic</p>\n</li>\n<li><p>内核版本: Linux 5.0.0-27-generic</p>\n</li>\n<li><p>内存: 16G</p>\n</li>\n<li><p>分区:  GPT磁盘分区 + UEFI引导方案 ，创建<code>efi</code>系统分区和<code>/</code>根分区</p>\n</li>\n</ul>\n<h3 id=\"安装Ubuntu18-04-3后出现的异常\"><a href=\"#安装Ubuntu18-04-3后出现的异常\" class=\"headerlink\" title=\"安装Ubuntu18.04-3后出现的异常\"></a>安装Ubuntu18.04-3后出现的异常</h3><ul>\n<li><p>开机卡死或登录卡死</p>\n</li>\n<li><p>登录后不能检测到无线网卡</p>\n</li>\n<li><p>屏幕亮度不可调节</p>\n</li>\n<li><p>HDMI外接屏幕不可用</p>\n</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会<br>出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能<br>进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：</p>\n<h4 id=\"1-强制使用集显\"><a href=\"#1-强制使用集显\" class=\"headerlink\" title=\"1.  强制使用集显\"></a>1.  强制使用集显</h4><p>在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash”</code>为<code>“quiet splash nomodeset”</code>，之后F10，重新启动正常进入Ubuntu系统<br>进入系统后让这个设置一直有效的方法是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-重新安装Nvidia显卡驱动\"><a href=\"#2-重新安装Nvidia显卡驱动\" class=\"headerlink\" title=\"2. 重新安装Nvidia显卡驱动\"></a>2. 重新安装Nvidia显卡驱动</h4><p>禁用ubuntu默认显卡(集显)驱动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo vi /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>在文件最末尾添加如下参数加入黑名单：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure>\n<p>卸载干净所有安装过的nvidia驱动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get remove  --purge nvidia-*</span><br></pre></td></tr></table></figure>\n<p>查看驱动状态，无输出则说明已经被屏蔽掉</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>添加驱动源：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class=\"line\">$: sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>查看合适驱动版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices</span><br></pre></td></tr></table></figure>\n<p>这里推荐直接使用<code>nvidia-driver-390</code>或<code>nvidia-driver-430</code>驱动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-initramfs -u</span><br><span class=\"line\">$: sudo reboot</span><br></pre></td></tr></table></figure>\n<p>重启时，在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash nomodeset”</code>为<code>“quiet splash acpi_osi=linux”</code>，之后F10，重新启动正常进入Ubuntu系统</p>\n<p>开机后查看驱动安装状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>编辑grab文件执行上一步相同的参数修改，最后更新：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-解决无线网络不能使用的问题\"><a href=\"#3-解决无线网络不能使用的问题\" class=\"headerlink\" title=\"3. 解决无线网络不能使用的问题\"></a>3. 解决无线网络不能使用的问题</h4><p>原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可</p>\n<p>将联想驱动加入黑名单:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>在文件中添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist ideapad_laptop</span><br></pre></td></tr></table></figure>\n<p>即时生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure>\n<p><em>关于Ubuntu主题美化和其它问题解决请移步：<a href=\"https://www.jianshu.com/p/23b0d3015db8\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 踩坑记录</a></em></p>\n"},{"title":"Docker 运行容器化的Tim和wechat","catalog":true,"toc_nav_num":true,"date":"2018-11-06T11:16:00.000Z","subtitle":"docker linux-qq/wechat","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-11-06T11:16:00.000Z","top":null,"_content":"\n### Contents\n* 安装docker\n* 安装容器\n* 容器管理\n\n### 安装docker\n\n> \n> Docker Engine-Community 支持以下的 Ubuntu 版本：\n> \n> -   Xenial 16.04 (LTS)\n> -   Bionic 18.04 (LTS)\n> -   Cosmic 18.10\n> -   Disco 19.04\n> -   其他更新的版本……\n> \n> Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。\n> \n> * * *\n> \n> #### 卸载旧版本\n> \n> Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：\n> \n`$ sudo apt-get remove docker docker-engine docker.io containerd runc`\n> \n> 当前称为 Docker Engine-Community 软件包 docker-ce 。\n> \n> 安装 Docker Engine-Community，以下介绍两种方式。\n> \n> * * *\n> \n> #### 使用 Docker 仓库进行安装\n> \n> 在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。\n> \n> #### 设置仓库\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装 apt 依赖包，用于通过HTTPS来获取仓库:\n> \n`$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common`\n> \n> 添加 Docker 的官方 GPG 密钥：\n> \n`$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -`\n> \n> 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。\n> \n`$ sudo apt-key fingerprint 0EBFCD88`\n>      \n> pub   rsa4096 2017-02-22 \\[SCEA\\]  \n>       9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88  \n> uid           \\[ unknown\\] Docker Release (CE deb) <docker@docker.com>  \n> sub   rsa4096 2017-02-22 \\[S\\]  \n> \n> 使用以下指令设置稳定版仓库\n> \n`$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable\"`\n> \n> #### 安装 Docker Engine-Community\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：\n> \n`$ sudo apt-get install docker-ce docker-ce-cli containerd.io`\n> \n> 要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：\n> \n`$ apt-cache madison docker-ce `\n>   \n>   docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   ...  \n> \n> 使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。\n> \n`$ sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io`\n> \n> 测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:\n> \n`$ sudo docker run hello-world`\n> #### 安装 docker-compose\n`$ sudo apt install docker-compose`\n> #### 切换docker源为国内的源\n`$ sudo gedit /etc/docker/daemon.json`\n>\n> 写入配置\n> ```\n>  {\n>    \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n>  }\n> ```\n>\n\n### 安装容器\n* Tim => `sudo docker pull bestwu/qq`\n* wechat => `sudo docker pull bestwu/wechat`\n\n### 容器管理\n1. 获取audio的组ID  \n`getent group audio | cut -d: -f3`\n2. 容器启动文件  \n接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：\n```yml\nversion: '2'\nservices:\n qq:\n   image: bestwu/qq:office    # 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim\n   container_name: qq\n   devices:\n     - /dev/snd #声音\n   volumes:\n     - /tmp/.X11-unix:/tmp/.X11-unix\n     - $HOME/TencentFiles:/TencentFiles\n   environment:\n     - DISPLAY=unix$DISPLAY\n     - XMODIFIERS=@im=ibus #中文输入\n     - QT_IM_MODULE=ibus\n     - GTK_IM_MODULE=ibus\n     - AUDIO_GID=29 # 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题\n     - GID=1000 # 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题\n     - UID=1000 # 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题\n```\n\n3. 容器启动命令  \n编写start-tim.sh：\n```yml\n#!/bin/sh\n# 密码更改为自己的\n# -d 指定为后台启动\necho \"yw020154\" | sudo docker-compose -f docker-tim.yml up -d\n```\n\n4. 容器的常用操作\n```sh\n# 启动/停止/重启\nsudo docker start/stop/restart qq\n# 终止容器进程\nsudo docker kill qq\n# 查看运行容器\nsudo docker ps\n```","source":"_posts/Docker运行容器化的Tim和wechat.md","raw":"---\ntitle: \"Docker 运行容器化的Tim和wechat\"\ncatalog: true\ntoc_nav_num: true\ndate:  2018-11-06 19:16:00\nsubtitle: \"docker linux-qq/wechat\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- linux\n- docker\n- desktop\ncategories:\n- Linux\nupdateDate: 2018-11-06 19:16:00\ntop: \n---\n\n### Contents\n* 安装docker\n* 安装容器\n* 容器管理\n\n### 安装docker\n\n> \n> Docker Engine-Community 支持以下的 Ubuntu 版本：\n> \n> -   Xenial 16.04 (LTS)\n> -   Bionic 18.04 (LTS)\n> -   Cosmic 18.10\n> -   Disco 19.04\n> -   其他更新的版本……\n> \n> Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。\n> \n> * * *\n> \n> #### 卸载旧版本\n> \n> Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：\n> \n`$ sudo apt-get remove docker docker-engine docker.io containerd runc`\n> \n> 当前称为 Docker Engine-Community 软件包 docker-ce 。\n> \n> 安装 Docker Engine-Community，以下介绍两种方式。\n> \n> * * *\n> \n> #### 使用 Docker 仓库进行安装\n> \n> 在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。\n> \n> #### 设置仓库\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装 apt 依赖包，用于通过HTTPS来获取仓库:\n> \n`$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common`\n> \n> 添加 Docker 的官方 GPG 密钥：\n> \n`$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -`\n> \n> 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。\n> \n`$ sudo apt-key fingerprint 0EBFCD88`\n>      \n> pub   rsa4096 2017-02-22 \\[SCEA\\]  \n>       9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88  \n> uid           \\[ unknown\\] Docker Release (CE deb) <docker@docker.com>  \n> sub   rsa4096 2017-02-22 \\[S\\]  \n> \n> 使用以下指令设置稳定版仓库\n> \n`$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable\"`\n> \n> #### 安装 Docker Engine-Community\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：\n> \n`$ sudo apt-get install docker-ce docker-ce-cli containerd.io`\n> \n> 要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：\n> \n`$ apt-cache madison docker-ce `\n>   \n>   docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   ...  \n> \n> 使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。\n> \n`$ sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io`\n> \n> 测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:\n> \n`$ sudo docker run hello-world`\n> #### 安装 docker-compose\n`$ sudo apt install docker-compose`\n> #### 切换docker源为国内的源\n`$ sudo gedit /etc/docker/daemon.json`\n>\n> 写入配置\n> ```\n>  {\n>    \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n>  }\n> ```\n>\n\n### 安装容器\n* Tim => `sudo docker pull bestwu/qq`\n* wechat => `sudo docker pull bestwu/wechat`\n\n### 容器管理\n1. 获取audio的组ID  \n`getent group audio | cut -d: -f3`\n2. 容器启动文件  \n接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：\n```yml\nversion: '2'\nservices:\n qq:\n   image: bestwu/qq:office    # 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim\n   container_name: qq\n   devices:\n     - /dev/snd #声音\n   volumes:\n     - /tmp/.X11-unix:/tmp/.X11-unix\n     - $HOME/TencentFiles:/TencentFiles\n   environment:\n     - DISPLAY=unix$DISPLAY\n     - XMODIFIERS=@im=ibus #中文输入\n     - QT_IM_MODULE=ibus\n     - GTK_IM_MODULE=ibus\n     - AUDIO_GID=29 # 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题\n     - GID=1000 # 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题\n     - UID=1000 # 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题\n```\n\n3. 容器启动命令  \n编写start-tim.sh：\n```yml\n#!/bin/sh\n# 密码更改为自己的\n# -d 指定为后台启动\necho \"yw020154\" | sudo docker-compose -f docker-tim.yml up -d\n```\n\n4. 容器的常用操作\n```sh\n# 启动/停止/重启\nsudo docker start/stop/restart qq\n# 终止容器进程\nsudo docker kill qq\n# 查看运行容器\nsudo docker ps\n```","slug":"Docker运行容器化的Tim和wechat","published":1,"updated":"2020-08-20T05:01:11.247Z","_id":"ckba8cy9s000m5495ghl6ah39","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h3><ul>\n<li>安装docker</li>\n<li>安装容器</li>\n<li>容器管理</li>\n</ul>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><blockquote>\n<p>Docker Engine-Community 支持以下的 Ubuntu 版本：</p>\n<ul>\n<li>Xenial 16.04 (LTS)</li>\n<li>Bionic 18.04 (LTS)</li>\n<li>Cosmic 18.10</li>\n<li>Disco 19.04</li>\n<li>其他更新的版本……</li>\n</ul>\n<p>Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。</p>\n<hr>\n<h4 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h4><p>Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：</p>\n<p><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></p>\n<p>当前称为 Docker Engine-Community 软件包 docker-ce 。</p>\n<p>安装 Docker Engine-Community，以下介绍两种方式。</p>\n<hr>\n<h4 id=\"使用-Docker-仓库进行安装\"><a href=\"#使用-Docker-仓库进行安装\" class=\"headerlink\" title=\"使用 Docker 仓库进行安装\"></a>使用 Docker 仓库进行安装</h4><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。</p>\n<h4 id=\"设置仓库\"><a href=\"#设置仓库\" class=\"headerlink\" title=\"设置仓库\"></a>设置仓库</h4><p>更新 apt 包索引。</p>\n<p><code>$ sudo apt-get update</code></p>\n<p>安装 apt 依赖包，用于通过HTTPS来获取仓库:</p>\n<p><code>$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code></p>\n<p>添加 Docker 的官方 GPG 密钥：</p>\n<p><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></p>\n<p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p>\n<p><code>$ sudo apt-key fingerprint 0EBFCD88</code></p>\n<p>pub   rsa4096 2017-02-22 [SCEA]<br>      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>uid           [ unknown] Docker Release (CE deb) <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#x64;&#x6f;&#99;&#x6b;&#101;&#x72;&#64;&#100;&#x6f;&#99;&#x6b;&#101;&#x72;&#46;&#x63;&#x6f;&#x6d;\">&#x64;&#x6f;&#99;&#x6b;&#101;&#x72;&#64;&#100;&#x6f;&#99;&#x6b;&#101;&#x72;&#46;&#x63;&#x6f;&#x6d;</a><br>sub   rsa4096 2017-02-22 [S]  </p>\n<p>使用以下指令设置稳定版仓库</p>\n<p><code>$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable&quot;</code></p>\n<h4 id=\"安装-Docker-Engine-Community\"><a href=\"#安装-Docker-Engine-Community\" class=\"headerlink\" title=\"安装 Docker Engine-Community\"></a>安装 Docker Engine-Community</h4><p>更新 apt 包索引。</p>\n<p><code>$ sudo apt-get update</code></p>\n<p>安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：</p>\n<p><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p>\n<p>要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：</p>\n<p><code>$ apt-cache madison docker-ce</code></p>\n<p>  docker-ce | 5:18.09.1~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.1~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.0~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  …  </p>\n<p>使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。</p>\n<p><code>$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</code></p>\n<p>测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:</p>\n<p><code>$ sudo docker run hello-world</code></p>\n<h4 id=\"安装-docker-compose\"><a href=\"#安装-docker-compose\" class=\"headerlink\" title=\"安装 docker-compose\"></a>安装 docker-compose</h4><p><code>$ sudo apt install docker-compose</code></p>\n<h4 id=\"切换docker源为国内的源\"><a href=\"#切换docker源为国内的源\" class=\"headerlink\" title=\"切换docker源为国内的源\"></a>切换docker源为国内的源</h4><p><code>$ sudo gedit /etc/docker/daemon.json</code></p>\n<p>写入配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"安装容器\"><a href=\"#安装容器\" class=\"headerlink\" title=\"安装容器\"></a>安装容器</h3><ul>\n<li>Tim =&gt; <code>sudo docker pull bestwu/qq</code></li>\n<li>wechat =&gt; <code>sudo docker pull bestwu/wechat</code></li>\n</ul>\n<h3 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h3><ol>\n<li>获取audio的组ID<br><code>getent group audio | cut -d: -f3</code></li>\n<li><p>容器启动文件<br>接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> <span class=\"attr\">qq:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">bestwu/qq:office</span>    <span class=\"comment\"># 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">qq</span></span><br><span class=\"line\">   <span class=\"attr\">devices:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/dev/snd</span> <span class=\"comment\">#声音</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/tmp/.X11-unix:/tmp/.X11-unix</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">$HOME/TencentFiles:/TencentFiles</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">DISPLAY=unix$DISPLAY</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">XMODIFIERS=@im=ibus</span> <span class=\"comment\">#中文输入</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">QT_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GTK_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">AUDIO_GID=29</span> <span class=\"comment\"># 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">UID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>容器启动命令<br>编写start-tim.sh：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 密码更改为自己的</span></span><br><span class=\"line\"><span class=\"comment\"># -d 指定为后台启动</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">\"yw020154\"</span> <span class=\"string\">|</span> <span class=\"string\">sudo</span> <span class=\"string\">docker-compose</span> <span class=\"string\">-f</span> <span class=\"string\">docker-tim.yml</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>容器的常用操作</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动/停止/重启</span></span><br><span class=\"line\">sudo docker start/stop/restart qq</span><br><span class=\"line\"><span class=\"comment\"># 终止容器进程</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">kill</span> qq</span><br><span class=\"line\"><span class=\"comment\"># 查看运行容器</span></span><br><span class=\"line\">sudo docker ps</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h3><ul>\n<li>安装docker</li>\n<li>安装容器</li>\n<li>容器管理</li>\n</ul>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><blockquote>\n<p>Docker Engine-Community 支持以下的 Ubuntu 版本：</p>\n<ul>\n<li>Xenial 16.04 (LTS)</li>\n<li>Bionic 18.04 (LTS)</li>\n<li>Cosmic 18.10</li>\n<li>Disco 19.04</li>\n<li>其他更新的版本……</li>\n</ul>\n<p>Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。</p>\n<hr>\n<h4 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h4><p>Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：</p>\n<p><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></p>\n<p>当前称为 Docker Engine-Community 软件包 docker-ce 。</p>\n<p>安装 Docker Engine-Community，以下介绍两种方式。</p>\n<hr>\n<h4 id=\"使用-Docker-仓库进行安装\"><a href=\"#使用-Docker-仓库进行安装\" class=\"headerlink\" title=\"使用 Docker 仓库进行安装\"></a>使用 Docker 仓库进行安装</h4><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。</p>\n<h4 id=\"设置仓库\"><a href=\"#设置仓库\" class=\"headerlink\" title=\"设置仓库\"></a>设置仓库</h4><p>更新 apt 包索引。</p>\n<p><code>$ sudo apt-get update</code></p>\n<p>安装 apt 依赖包，用于通过HTTPS来获取仓库:</p>\n<p><code>$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code></p>\n<p>添加 Docker 的官方 GPG 密钥：</p>\n<p><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></p>\n<p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p>\n<p><code>$ sudo apt-key fingerprint 0EBFCD88</code></p>\n<p>pub   rsa4096 2017-02-22 [SCEA]<br>      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>uid           [ unknown] Docker Release (CE deb) <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#x64;&#x6f;&#99;&#x6b;&#101;&#x72;&#64;&#100;&#x6f;&#99;&#x6b;&#101;&#x72;&#46;&#x63;&#x6f;&#x6d;\">&#x64;&#x6f;&#99;&#x6b;&#101;&#x72;&#64;&#100;&#x6f;&#99;&#x6b;&#101;&#x72;&#46;&#x63;&#x6f;&#x6d;</a><br>sub   rsa4096 2017-02-22 [S]  </p>\n<p>使用以下指令设置稳定版仓库</p>\n<p><code>$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable&quot;</code></p>\n<h4 id=\"安装-Docker-Engine-Community\"><a href=\"#安装-Docker-Engine-Community\" class=\"headerlink\" title=\"安装 Docker Engine-Community\"></a>安装 Docker Engine-Community</h4><p>更新 apt 包索引。</p>\n<p><code>$ sudo apt-get update</code></p>\n<p>安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：</p>\n<p><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p>\n<p>要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：</p>\n<p><code>$ apt-cache madison docker-ce</code></p>\n<p>  docker-ce | 5:18.09.1~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.1~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.0~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  …  </p>\n<p>使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。</p>\n<p><code>$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</code></p>\n<p>测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:</p>\n<p><code>$ sudo docker run hello-world</code></p>\n<h4 id=\"安装-docker-compose\"><a href=\"#安装-docker-compose\" class=\"headerlink\" title=\"安装 docker-compose\"></a>安装 docker-compose</h4><p><code>$ sudo apt install docker-compose</code></p>\n<h4 id=\"切换docker源为国内的源\"><a href=\"#切换docker源为国内的源\" class=\"headerlink\" title=\"切换docker源为国内的源\"></a>切换docker源为国内的源</h4><p><code>$ sudo gedit /etc/docker/daemon.json</code></p>\n<p>写入配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"安装容器\"><a href=\"#安装容器\" class=\"headerlink\" title=\"安装容器\"></a>安装容器</h3><ul>\n<li>Tim =&gt; <code>sudo docker pull bestwu/qq</code></li>\n<li>wechat =&gt; <code>sudo docker pull bestwu/wechat</code></li>\n</ul>\n<h3 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h3><ol>\n<li>获取audio的组ID<br><code>getent group audio | cut -d: -f3</code></li>\n<li><p>容器启动文件<br>接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> <span class=\"attr\">qq:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">bestwu/qq:office</span>    <span class=\"comment\"># 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">qq</span></span><br><span class=\"line\">   <span class=\"attr\">devices:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/dev/snd</span> <span class=\"comment\">#声音</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/tmp/.X11-unix:/tmp/.X11-unix</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">$HOME/TencentFiles:/TencentFiles</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">DISPLAY=unix$DISPLAY</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">XMODIFIERS=@im=ibus</span> <span class=\"comment\">#中文输入</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">QT_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GTK_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">AUDIO_GID=29</span> <span class=\"comment\"># 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">UID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>容器启动命令<br>编写start-tim.sh：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 密码更改为自己的</span></span><br><span class=\"line\"><span class=\"comment\"># -d 指定为后台启动</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">\"yw020154\"</span> <span class=\"string\">|</span> <span class=\"string\">sudo</span> <span class=\"string\">docker-compose</span> <span class=\"string\">-f</span> <span class=\"string\">docker-tim.yml</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>容器的常用操作</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动/停止/重启</span></span><br><span class=\"line\">sudo docker start/stop/restart qq</span><br><span class=\"line\"><span class=\"comment\"># 终止容器进程</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">kill</span> qq</span><br><span class=\"line\"><span class=\"comment\"># 查看运行容器</span></span><br><span class=\"line\">sudo docker ps</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Electron+Mobx+React开发记录","catalog":true,"toc_nav_num":true,"date":"2019-10-14T08:18:46.000Z","subtitle":"Electron Mobx React","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-10-14T08:18:46.000Z","_content":"\n![Hello World](/blogs/img/article/Fly.jpg)\n\n### 目录\n1. 前言\n2. 开发环境搭建\n3. 引入Webpack4.0前端打包工具\n4. Electron代码结构和代码热更新\n5. 前端界面React + Mobx 代码结构和热更新\n6. Linux桌面客户端开发遇到的问题\n\n### 前言\n-----------\n最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - [electronux](https://github.com/NoJsJa/electronux.git)\n作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。\n\n![clean_detail.png](/blogs/img/article/mobx1.png)\n\n![clean_search.png](/blogs/img/article/mobx2.png)\n\n![electron_pssword.png](/blogs/img/article/mobx3.png)\n\n![info_total.png](/blogs/img/article/mobx4.png)\n\n![install_detail.png](/blogs/img/article/mobx5.png)\n\n![install_list.png](/blogs/img/article/mobx6.png)\n\n![install_permission.png](/blogs/img/article/mobx7.png)\n\n![startup_list.png](/blogs/img/article/mobx8.png)\n\n### 开发环境搭建\n------------------------\n#### 代码目录结构\n```sh\nelectronux  \n|---- [dir ] app ( 主代码目录 )\n|----------- [dir ] app/configure ( 应用配置更新 )\n|----------- [dir ] app/runtime ( 运行数据文件 )\n|\n|----------- [dir ] app/services ( 后台服务存放目录 )\n|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )\n|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )\n|------------------------ [dir ] app/services/main-serv ( 主进程服务 )\n|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )\n|\n|----------- [dir ] app/stores ( 前端状态管理文件目录 )\n|----------- [dir ] app/styles  ( 公用样式表文件 )\n|----------- [dir ] app/utils  ( 公用工具函数 )\n|\n|----------- [dir ] app/views  ( UI界面代码 )\n|------------------------ [dir ] app/views/module1  ( 界面模块1 )\n|------------------------ [dir ] app/views/module2  ( 界面模块2)\n|------------------------ [dir ] app/views/module3  ( 界面模块3 )\n|\n|----------- [file] app/App.js  ( 前端应用入口文件 )\n|----------- [file] app/index.js ( 前端应用热加载文件 )\n|\n|---- [dir ] dist ( 前端代码编译打包文件存放目录 )\n|---- [dir ] resources ( 前端静态资源存放目录 )\n|\n|---- [file] .babelrc ( babel配置文件 )\n|---- [file] .editorconfig (编辑器编码规范文件)\n|---- [file] .eslintrc ( 代码格式检查配置文件 )\n|---- [file] .gitignore ( git忽略追踪配置文件 )\n|---- [file] electron-builder.json ( electron-builder打包配置文件 )\n|---- [file] index.html  ( 应用渲染入口页面 )\n|---- [file] index.js ( 应用主进程入口文件 )\n|---- [file] package.json (前端模块和框架配置文件)\n|---- [file] webpack.config.js (webpack开发环境配置文件)\n|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )\n\n```\n\n#### 项目环境依赖配置文件\n```json\n{\n  \"name\": \"electronux\",\n  \"description\": \"linux manager-software powered by electron & react & Mobx \",\n  \"version\": \"1.0.0\",\n  \"author\": {\n    \"name\": \"NoJsJa\",\n    \"email\": \"yangwei020154@gmail.com\"\n  },\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\",\n    \"start-production\": \"cross-env NODE_ENV=production electron --inspect=5858 index\",\n    \"build-all\": \"npm run dist && npm run build\",\n    \"dist\": \"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\",\n    \"build\": \"electron-builder -l\"\n  },\n  \"keywords\": [\n    \"electron\",\n    \"react\",\n    \"mobx\",\n    \"react-router\",\n    \"webpack4\"\n  ],\n  \"license\": \"\",\n  \"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"build/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\",\n      \"electron-builder.yml\"\n    ],\n    \"delay\": \"1000\"\n  },\n  \"dependencies\": {\n    \"semantic-ui-css\": \"^2.4.0\",\n    \"semantic-ui-react\": \"^0.82.5\",\n    \"mobx\": \"^4.4.1\",\n    \"mobx-react\": \"^5.2.8\",\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"^16.5.1\",\n    \"react-dom\": \"^16.5.1\",\n    \"react-hot-loader\": \"^4.3.8\",\n    \"react-router\": \"^4.3.1\",\n    \"react-router-dom\": \"^4.3.1\",\n    \"history\": \"^4.7.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.5\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"clean-webpack-plugin\": \"^0.1.19\",\n    \"concurrently\": \"^3.6.1\",\n    \"cross-env\": \"^5.2.0\",\n    \"css-loader\": \"^0.28.11\",\n    \"electron\": \"^2.0.9\",\n    \"electron-builder\": \"^20.28.4\",\n    \"eslint\": \"^5.6.1\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.2\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    \"file-loader\": \"^2.0.0\",\n    \"html-loader\": \"^0.5.5\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"node-sass\": \"^4.9.4\",\n    \"nodemon\": \"^1.18.4\",\n    \"sass-loader\": \"^7.1.0\",\n    \"source-map-support\": \"^0.5.9\",\n    \"style-loader\": \"^0.21.0\",\n    \"url-loader\": \"^1.1.2\",\n    \"webpack\": \"^4.19.0\",\n    \"webpack-cli\": \"^2.1.5\",\n    \"webpack-dev-server\": \"^3.1.8\"\n  }\n}\n\n```\n\n### 引入Webpack4.0前端打包工具\n---------------------------------------------\n\n#### webpack开发环境配置文件\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\n\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n\nmodule.exports = {\n  devtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n  resolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.html$/,\n        use: {\n          loader: 'html-loader',\n        },\n      },\n      {\n        test: /\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[path][name].[ext]',\n            },\n          },\n        ],\n      },\n    ],\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    new webpack.HotModuleReplacementPlugin(),\n    new CleanWebpackPlugin(['dist']),\n    new webpack.NamedModulesPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n  ],\n\n  devServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n  target: 'electron-renderer',\n};\n\n```\n\n### Electron基本原理和代码热更新\n----------------------------------------------\n> Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。\n由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。\n在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 创建主进程\n在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用`http协议`加载由webpack-dev-server启动的http服务，生产环境下使用`file协议`加载本地由webpack打包好的前端bundle.js文件，所以开发环境下`npm start`指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。\n\n#### 主进程代码热更新\n我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 `npm start-electron`命令实际是执行`cross-env NODE_ENV=development electron index`，就是简单的用electron启动主进程文件，使用nodemon之后`npm start-electron`实际上是执行`nodemon --exec 'cross-env NODE_ENV=development electron index'`，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。\n\n=> package.json中定义的启动脚本：\n```json\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",\n    \"build\": \"npm run dist && npm run build-all\",\n    \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",\n    \"build-all\": \"build -lmw\"\n  },\n```\n\n=> package.json中nodemonConfig字段\n```json\n\"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\"\n    ],\n    \"delay\": \"1000\"\n  },\n```\n\n=> 项目启动文件index.js：\n```js\n...\n// 根据运行环境加载窗口 //\nfunction loadWindow(window, env) {\n  if (env === 'development') {\n    // wait for webpack-dev-server start\n    setTimeout(() => {\n      window.loadURL(url.format({\n        pathname: 'localhost:3000',\n        protocol: 'http:',\n        slashes: true,\n      }));\n      // window.webContents.openDevTools();\n    }, 1e3);\n  } else {\n    window.loadURL(url.format({\n      pathname: path.join(path.resolve(__dirname, './dist'), 'index.html'),\n      protocol: 'file:',\n      slashes: true,\n    }));\n  }\n}\n\n/* ------------------- main window ------------------- */\n\nfunction createWindow() {\n  const { width, height } = getAppConf();\n  win = new BrowserWindow({\n    width,\n    height,\n    title: 'electronux',\n    autoHideMenuBar: true,\n  });\n\n  win.on('resize', () => {\n    const [_width, _height] = win.getContentSize();\n    viewConf.set({\n      width: _width,\n      height: _height,\n    });\n  });\n\n  loadWindow(win, nodeEnv);\n}\n\n/* ------------------- electron event ------------------- */\n\napp.on('ready', () => {\n  if (nodeEnv === 'development') {\n    sourceMapSupport.install();\n  }\n  createWindow();\n});\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('will-quit', () => {\n  viewConf.write().then(() => 0, (err) => {\n    console.error(err);\n    throw new Error('App quit: view-conf write error !');\n  });\n});\n\napp.on('activate', () => {\n  if (win === null) {\n    createWindow();\n  }\n});\n```\n\n### 前端界面React + Mobx 代码结构和热更新\n-------------------------------------------------------------\n\n#### 代码结构\n1. App.js前端入口文件\n入口文件基本是整个前端应用的关键点，我们使用`mobx-react`包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器`@inject`就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档[react-router4](https://reacttraining.com/react-router/web/guides/quick-start)\n\n```js\n/* ------------------- export global history ------------------- */\nexport const history = createHistory();\n\nconst stores = {\n  install: new InstallState(),\n  startup: new StartupState(),\n  info: new InfoState(),\n  clean: new CleanState(),\n  pub: new PublicState(),\n};\n\nfunction App() {\n  return (\n    <Provider {...stores}>\n      <Router history={history}>\n        <Route path=\"/\" component={HomePage} />\n      </Router>\n    </Provider>\n  );\n}\n\n/* ------------------- export provider ------------------- */\nexport default App;\n\n```\n\n2. mobx store 存储\n这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构`翻译`成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。\n并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写`computed`、`autorun`来自动生成数据，使用`action`修饰一些需要更改store属性的方法。\n\n```js\nclass Clean {\n  constructor() { }\n  /* ------------------- observable ------------------- */\n\n  // 所有检查项目 //\n  @observable items = {\n    appCache: false,\n    appLog: false,\n    trash: false,\n    packageCache: false,\n  };\n\n  // 主界面加载 //\n  @observable loadingMain = false;\n\n  // 清理路径 //\n  cleanPaths = {\n    appCache: [`/home/${this.userinfo.username}/.cache`],\n    appLog: ['/var/log/'],\n    trash: [`/home/${this.userinfo.username}/.local/share/Trash/files`],\n    packageCache: ['/var/cache/pacman/pkg'],\n  }\n\n  // 路径模块映射 //\n  @observable cleanPathMap = {\n    appCache: [], // '/var/log/pacman.log'\n    appLog: [],\n    trash: [],\n    packageCache: [],\n  }\n\n  // 清理内容 //\n  @observable cleanContents = observable.map({})\n\n  // 清理大小 //\n  cleanSizes = {\n    // '/var/log//pacman.log': '10kb',\n  }\n\n  // ---- 清理选项细节-数据对象逻辑树结构 ---- //\n  // @observable cleanDetails = {\n  //   appCache: {\n  //     url: [`/home/${this.userinfo.username}/.cache`], // 指定扫描路径多个\n  //     contents: { // 绝对路径\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,\n  //     },\n  //     size: {\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',\n  //     },\n  //   },\n  //   appLog: {\n  //     url: ['/var/log/'],\n  //     contents: {\n  //       // '/var/log//pacman.log': false,\n  //     },\n  //     size: {\n  //       // '/var/log//pacman.log': '10kb',\n  //     },\n  //   }\n  // }\n\n  /* ------------------- static ------------------- */\n\n\n  /* ------------------- computed ------------------- */\n\n  // 获取所有被选中的detail item //\n  @computed get allCheckedDetail() {\n    const a = [];\n    this.cleanContents.forEach((v, k) => {\n      if (v) a.push(k);\n    });\n    return a;\n  }\n\n  // 清理路径详细信息 //\n  @computed get cleanDetail() {\n    const result = [];\n    Object.keys(this.cleanPathMap).forEach((item) => {\n      if (this.items[item]) {\n        const oneResult = {\n          label: item,\n          contents: [],\n        };\n        this.cleanPathMap[item].forEach((it) => {\n          oneResult.contents.push({\n            content: it,\n            size: this.cleanSizes[it] || 0,\n          });\n        });\n\n        result.push(oneResult);\n      }\n    });\n\n    return result;\n  }\n}\n\nexport default Clean;\n\n```\n\n3. 页面组件划分\n在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用`@inject`修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。\n使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把`关键性数据`以及`关键性数据加工方法`存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态`visible`没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。\n\n4. 渲染进程和主进程ipc通信的问题\n页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。\n\n\n#### 前端代码热更新\n1. webpack.config.js中启动webpack-dev-server的热更新功能\n\n```js\ndevServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n```\n2. 使用`react-hot-loader`的AppContainer组件\n\n```js\nimport { AppContainer } from 'react-hot-loader';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './styles/public.css';\n\nimport App from './App';\n\nrender(\n  <AppContainer>\n    <App />\n  </AppContainer>,\n  document.getElementById('root')\n);\n```\n### Linux桌面客户端开发遇到的问题\n-------------------------------------------------------\n#### 使用node.js子进程child_process执行shell脚本时无法取得系统root权限\n项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，`spawn`、`exec`、`execFile`、`fork`，它们都能创建子进程以执行指定文件或命令，具体的使用方法见[Node API](http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation)，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：\n1. 调用获取系统权限的系统自带组件来执行自定义命令和脚本\n2. 封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。  \n\n![electron_pssword.png](/blogs/img/article/mobx9.png)\n\n![install_permission.png](/blogs/img/article/mobx10.png)\n\n\n__具体代码见__：[github/nojsja/electronux/app/utils/sudo-prompt.js](/blogs/img/article/mobx10.png)  \n\n_感谢阅读，文章中出现的错误之处还请多指正~_  \n\n### 未完待续\n","source":"_posts/Electron+Mobx+React开发记录(一).md","raw":"---\ntitle: \"Electron+Mobx+React开发记录\"\ncatalog: true\ntoc_nav_num: true\ndate:   2019-10-14 16:18:46\nsubtitle: \"Electron Mobx React\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- es6\n- react\n- mobx\n- electron\ncategories:\n- Mobx\n- Electron\nupdateDate: 2019-10-14 16:18:46\n---\n\n![Hello World](/blogs/img/article/Fly.jpg)\n\n### 目录\n1. 前言\n2. 开发环境搭建\n3. 引入Webpack4.0前端打包工具\n4. Electron代码结构和代码热更新\n5. 前端界面React + Mobx 代码结构和热更新\n6. Linux桌面客户端开发遇到的问题\n\n### 前言\n-----------\n最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - [electronux](https://github.com/NoJsJa/electronux.git)\n作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。\n\n![clean_detail.png](/blogs/img/article/mobx1.png)\n\n![clean_search.png](/blogs/img/article/mobx2.png)\n\n![electron_pssword.png](/blogs/img/article/mobx3.png)\n\n![info_total.png](/blogs/img/article/mobx4.png)\n\n![install_detail.png](/blogs/img/article/mobx5.png)\n\n![install_list.png](/blogs/img/article/mobx6.png)\n\n![install_permission.png](/blogs/img/article/mobx7.png)\n\n![startup_list.png](/blogs/img/article/mobx8.png)\n\n### 开发环境搭建\n------------------------\n#### 代码目录结构\n```sh\nelectronux  \n|---- [dir ] app ( 主代码目录 )\n|----------- [dir ] app/configure ( 应用配置更新 )\n|----------- [dir ] app/runtime ( 运行数据文件 )\n|\n|----------- [dir ] app/services ( 后台服务存放目录 )\n|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )\n|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )\n|------------------------ [dir ] app/services/main-serv ( 主进程服务 )\n|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )\n|\n|----------- [dir ] app/stores ( 前端状态管理文件目录 )\n|----------- [dir ] app/styles  ( 公用样式表文件 )\n|----------- [dir ] app/utils  ( 公用工具函数 )\n|\n|----------- [dir ] app/views  ( UI界面代码 )\n|------------------------ [dir ] app/views/module1  ( 界面模块1 )\n|------------------------ [dir ] app/views/module2  ( 界面模块2)\n|------------------------ [dir ] app/views/module3  ( 界面模块3 )\n|\n|----------- [file] app/App.js  ( 前端应用入口文件 )\n|----------- [file] app/index.js ( 前端应用热加载文件 )\n|\n|---- [dir ] dist ( 前端代码编译打包文件存放目录 )\n|---- [dir ] resources ( 前端静态资源存放目录 )\n|\n|---- [file] .babelrc ( babel配置文件 )\n|---- [file] .editorconfig (编辑器编码规范文件)\n|---- [file] .eslintrc ( 代码格式检查配置文件 )\n|---- [file] .gitignore ( git忽略追踪配置文件 )\n|---- [file] electron-builder.json ( electron-builder打包配置文件 )\n|---- [file] index.html  ( 应用渲染入口页面 )\n|---- [file] index.js ( 应用主进程入口文件 )\n|---- [file] package.json (前端模块和框架配置文件)\n|---- [file] webpack.config.js (webpack开发环境配置文件)\n|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )\n\n```\n\n#### 项目环境依赖配置文件\n```json\n{\n  \"name\": \"electronux\",\n  \"description\": \"linux manager-software powered by electron & react & Mobx \",\n  \"version\": \"1.0.0\",\n  \"author\": {\n    \"name\": \"NoJsJa\",\n    \"email\": \"yangwei020154@gmail.com\"\n  },\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\",\n    \"start-production\": \"cross-env NODE_ENV=production electron --inspect=5858 index\",\n    \"build-all\": \"npm run dist && npm run build\",\n    \"dist\": \"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\",\n    \"build\": \"electron-builder -l\"\n  },\n  \"keywords\": [\n    \"electron\",\n    \"react\",\n    \"mobx\",\n    \"react-router\",\n    \"webpack4\"\n  ],\n  \"license\": \"\",\n  \"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"build/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\",\n      \"electron-builder.yml\"\n    ],\n    \"delay\": \"1000\"\n  },\n  \"dependencies\": {\n    \"semantic-ui-css\": \"^2.4.0\",\n    \"semantic-ui-react\": \"^0.82.5\",\n    \"mobx\": \"^4.4.1\",\n    \"mobx-react\": \"^5.2.8\",\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"^16.5.1\",\n    \"react-dom\": \"^16.5.1\",\n    \"react-hot-loader\": \"^4.3.8\",\n    \"react-router\": \"^4.3.1\",\n    \"react-router-dom\": \"^4.3.1\",\n    \"history\": \"^4.7.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.5\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"clean-webpack-plugin\": \"^0.1.19\",\n    \"concurrently\": \"^3.6.1\",\n    \"cross-env\": \"^5.2.0\",\n    \"css-loader\": \"^0.28.11\",\n    \"electron\": \"^2.0.9\",\n    \"electron-builder\": \"^20.28.4\",\n    \"eslint\": \"^5.6.1\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.2\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    \"file-loader\": \"^2.0.0\",\n    \"html-loader\": \"^0.5.5\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"node-sass\": \"^4.9.4\",\n    \"nodemon\": \"^1.18.4\",\n    \"sass-loader\": \"^7.1.0\",\n    \"source-map-support\": \"^0.5.9\",\n    \"style-loader\": \"^0.21.0\",\n    \"url-loader\": \"^1.1.2\",\n    \"webpack\": \"^4.19.0\",\n    \"webpack-cli\": \"^2.1.5\",\n    \"webpack-dev-server\": \"^3.1.8\"\n  }\n}\n\n```\n\n### 引入Webpack4.0前端打包工具\n---------------------------------------------\n\n#### webpack开发环境配置文件\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\n\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n\nmodule.exports = {\n  devtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n  resolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.html$/,\n        use: {\n          loader: 'html-loader',\n        },\n      },\n      {\n        test: /\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[path][name].[ext]',\n            },\n          },\n        ],\n      },\n    ],\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    new webpack.HotModuleReplacementPlugin(),\n    new CleanWebpackPlugin(['dist']),\n    new webpack.NamedModulesPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n  ],\n\n  devServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n  target: 'electron-renderer',\n};\n\n```\n\n### Electron基本原理和代码热更新\n----------------------------------------------\n> Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。\n由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。\n在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 创建主进程\n在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用`http协议`加载由webpack-dev-server启动的http服务，生产环境下使用`file协议`加载本地由webpack打包好的前端bundle.js文件，所以开发环境下`npm start`指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。\n\n#### 主进程代码热更新\n我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 `npm start-electron`命令实际是执行`cross-env NODE_ENV=development electron index`，就是简单的用electron启动主进程文件，使用nodemon之后`npm start-electron`实际上是执行`nodemon --exec 'cross-env NODE_ENV=development electron index'`，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。\n\n=> package.json中定义的启动脚本：\n```json\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",\n    \"build\": \"npm run dist && npm run build-all\",\n    \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",\n    \"build-all\": \"build -lmw\"\n  },\n```\n\n=> package.json中nodemonConfig字段\n```json\n\"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\"\n    ],\n    \"delay\": \"1000\"\n  },\n```\n\n=> 项目启动文件index.js：\n```js\n...\n// 根据运行环境加载窗口 //\nfunction loadWindow(window, env) {\n  if (env === 'development') {\n    // wait for webpack-dev-server start\n    setTimeout(() => {\n      window.loadURL(url.format({\n        pathname: 'localhost:3000',\n        protocol: 'http:',\n        slashes: true,\n      }));\n      // window.webContents.openDevTools();\n    }, 1e3);\n  } else {\n    window.loadURL(url.format({\n      pathname: path.join(path.resolve(__dirname, './dist'), 'index.html'),\n      protocol: 'file:',\n      slashes: true,\n    }));\n  }\n}\n\n/* ------------------- main window ------------------- */\n\nfunction createWindow() {\n  const { width, height } = getAppConf();\n  win = new BrowserWindow({\n    width,\n    height,\n    title: 'electronux',\n    autoHideMenuBar: true,\n  });\n\n  win.on('resize', () => {\n    const [_width, _height] = win.getContentSize();\n    viewConf.set({\n      width: _width,\n      height: _height,\n    });\n  });\n\n  loadWindow(win, nodeEnv);\n}\n\n/* ------------------- electron event ------------------- */\n\napp.on('ready', () => {\n  if (nodeEnv === 'development') {\n    sourceMapSupport.install();\n  }\n  createWindow();\n});\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('will-quit', () => {\n  viewConf.write().then(() => 0, (err) => {\n    console.error(err);\n    throw new Error('App quit: view-conf write error !');\n  });\n});\n\napp.on('activate', () => {\n  if (win === null) {\n    createWindow();\n  }\n});\n```\n\n### 前端界面React + Mobx 代码结构和热更新\n-------------------------------------------------------------\n\n#### 代码结构\n1. App.js前端入口文件\n入口文件基本是整个前端应用的关键点，我们使用`mobx-react`包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器`@inject`就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档[react-router4](https://reacttraining.com/react-router/web/guides/quick-start)\n\n```js\n/* ------------------- export global history ------------------- */\nexport const history = createHistory();\n\nconst stores = {\n  install: new InstallState(),\n  startup: new StartupState(),\n  info: new InfoState(),\n  clean: new CleanState(),\n  pub: new PublicState(),\n};\n\nfunction App() {\n  return (\n    <Provider {...stores}>\n      <Router history={history}>\n        <Route path=\"/\" component={HomePage} />\n      </Router>\n    </Provider>\n  );\n}\n\n/* ------------------- export provider ------------------- */\nexport default App;\n\n```\n\n2. mobx store 存储\n这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构`翻译`成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。\n并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写`computed`、`autorun`来自动生成数据，使用`action`修饰一些需要更改store属性的方法。\n\n```js\nclass Clean {\n  constructor() { }\n  /* ------------------- observable ------------------- */\n\n  // 所有检查项目 //\n  @observable items = {\n    appCache: false,\n    appLog: false,\n    trash: false,\n    packageCache: false,\n  };\n\n  // 主界面加载 //\n  @observable loadingMain = false;\n\n  // 清理路径 //\n  cleanPaths = {\n    appCache: [`/home/${this.userinfo.username}/.cache`],\n    appLog: ['/var/log/'],\n    trash: [`/home/${this.userinfo.username}/.local/share/Trash/files`],\n    packageCache: ['/var/cache/pacman/pkg'],\n  }\n\n  // 路径模块映射 //\n  @observable cleanPathMap = {\n    appCache: [], // '/var/log/pacman.log'\n    appLog: [],\n    trash: [],\n    packageCache: [],\n  }\n\n  // 清理内容 //\n  @observable cleanContents = observable.map({})\n\n  // 清理大小 //\n  cleanSizes = {\n    // '/var/log//pacman.log': '10kb',\n  }\n\n  // ---- 清理选项细节-数据对象逻辑树结构 ---- //\n  // @observable cleanDetails = {\n  //   appCache: {\n  //     url: [`/home/${this.userinfo.username}/.cache`], // 指定扫描路径多个\n  //     contents: { // 绝对路径\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,\n  //     },\n  //     size: {\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',\n  //     },\n  //   },\n  //   appLog: {\n  //     url: ['/var/log/'],\n  //     contents: {\n  //       // '/var/log//pacman.log': false,\n  //     },\n  //     size: {\n  //       // '/var/log//pacman.log': '10kb',\n  //     },\n  //   }\n  // }\n\n  /* ------------------- static ------------------- */\n\n\n  /* ------------------- computed ------------------- */\n\n  // 获取所有被选中的detail item //\n  @computed get allCheckedDetail() {\n    const a = [];\n    this.cleanContents.forEach((v, k) => {\n      if (v) a.push(k);\n    });\n    return a;\n  }\n\n  // 清理路径详细信息 //\n  @computed get cleanDetail() {\n    const result = [];\n    Object.keys(this.cleanPathMap).forEach((item) => {\n      if (this.items[item]) {\n        const oneResult = {\n          label: item,\n          contents: [],\n        };\n        this.cleanPathMap[item].forEach((it) => {\n          oneResult.contents.push({\n            content: it,\n            size: this.cleanSizes[it] || 0,\n          });\n        });\n\n        result.push(oneResult);\n      }\n    });\n\n    return result;\n  }\n}\n\nexport default Clean;\n\n```\n\n3. 页面组件划分\n在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用`@inject`修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。\n使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把`关键性数据`以及`关键性数据加工方法`存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态`visible`没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。\n\n4. 渲染进程和主进程ipc通信的问题\n页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。\n\n\n#### 前端代码热更新\n1. webpack.config.js中启动webpack-dev-server的热更新功能\n\n```js\ndevServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n```\n2. 使用`react-hot-loader`的AppContainer组件\n\n```js\nimport { AppContainer } from 'react-hot-loader';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './styles/public.css';\n\nimport App from './App';\n\nrender(\n  <AppContainer>\n    <App />\n  </AppContainer>,\n  document.getElementById('root')\n);\n```\n### Linux桌面客户端开发遇到的问题\n-------------------------------------------------------\n#### 使用node.js子进程child_process执行shell脚本时无法取得系统root权限\n项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，`spawn`、`exec`、`execFile`、`fork`，它们都能创建子进程以执行指定文件或命令，具体的使用方法见[Node API](http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation)，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：\n1. 调用获取系统权限的系统自带组件来执行自定义命令和脚本\n2. 封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。  \n\n![electron_pssword.png](/blogs/img/article/mobx9.png)\n\n![install_permission.png](/blogs/img/article/mobx10.png)\n\n\n__具体代码见__：[github/nojsja/electronux/app/utils/sudo-prompt.js](/blogs/img/article/mobx10.png)  \n\n_感谢阅读，文章中出现的错误之处还请多指正~_  \n\n### 未完待续\n","slug":"Electron-Mobx-React开发记录-一","published":1,"updated":"2020-08-20T05:01:35.363Z","_id":"ckba8cy9t000n5495bagp5ef5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/blogs/img/article/Fly.jpg\" alt=\"Hello World\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li>前言</li>\n<li>开发环境搭建</li>\n<li>引入Webpack4.0前端打包工具</li>\n<li>Electron代码结构和代码热更新</li>\n<li>前端界面React + Mobx 代码结构和热更新</li>\n<li>Linux桌面客户端开发遇到的问题</li>\n</ol>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - <a href=\"https://github.com/NoJsJa/electronux.git\" target=\"_blank\" rel=\"noopener\">electronux</a><br>作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。</p>\n<p><img src=\"/blogs/img/article/mobx1.png\" alt=\"clean_detail.png\"></p>\n<p><img src=\"/blogs/img/article/mobx2.png\" alt=\"clean_search.png\"></p>\n<p><img src=\"/blogs/img/article/mobx3.png\" alt=\"electron_pssword.png\"></p>\n<p><img src=\"/blogs/img/article/mobx4.png\" alt=\"info_total.png\"></p>\n<p><img src=\"/blogs/img/article/mobx5.png\" alt=\"install_detail.png\"></p>\n<p><img src=\"/blogs/img/article/mobx6.png\" alt=\"install_list.png\"></p>\n<p><img src=\"/blogs/img/article/mobx7.png\" alt=\"install_permission.png\"></p>\n<p><img src=\"/blogs/img/article/mobx8.png\" alt=\"startup_list.png\"></p>\n<h3 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h3><hr>\n<h4 id=\"代码目录结构\"><a href=\"#代码目录结构\" class=\"headerlink\" title=\"代码目录结构\"></a>代码目录结构</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electronux  </span><br><span class=\"line\">|---- [dir ] app ( 主代码目录 )</span><br><span class=\"line\">|----------- [dir ] app/configure ( 应用配置更新 )</span><br><span class=\"line\">|----------- [dir ] app/runtime ( 运行数据文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/services ( 后台服务存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/main-serv ( 主进程服务 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/stores ( 前端状态管理文件目录 )</span><br><span class=\"line\">|----------- [dir ] app/styles  ( 公用样式表文件 )</span><br><span class=\"line\">|----------- [dir ] app/utils  ( 公用工具函数 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/views  ( UI界面代码 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module1  ( 界面模块1 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module2  ( 界面模块2)</span><br><span class=\"line\">|------------------------ [dir ] app/views/module3  ( 界面模块3 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [file] app/App.js  ( 前端应用入口文件 )</span><br><span class=\"line\">|----------- [file] app/index.js ( 前端应用热加载文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [dir ] dist ( 前端代码编译打包文件存放目录 )</span><br><span class=\"line\">|---- [dir ] resources ( 前端静态资源存放目录 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [file] .babelrc ( babel配置文件 )</span><br><span class=\"line\">|---- [file] .editorconfig (编辑器编码规范文件)</span><br><span class=\"line\">|---- [file] .eslintrc ( 代码格式检查配置文件 )</span><br><span class=\"line\">|---- [file] .gitignore ( git忽略追踪配置文件 )</span><br><span class=\"line\">|---- [file] electron-builder.json ( electron-builder打包配置文件 )</span><br><span class=\"line\">|---- [file] index.html  ( 应用渲染入口页面 )</span><br><span class=\"line\">|---- [file] index.js ( 应用主进程入口文件 )</span><br><span class=\"line\">|---- [file] package.json (前端模块和框架配置文件)</span><br><span class=\"line\">|---- [file] webpack.config.js (webpack开发环境配置文件)</span><br><span class=\"line\">|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )</span><br></pre></td></tr></table></figure>\n<h4 id=\"项目环境依赖配置文件\"><a href=\"#项目环境依赖配置文件\" class=\"headerlink\" title=\"项目环境依赖配置文件\"></a>项目环境依赖配置文件</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"linux manager-software powered by electron &amp; react &amp; Mobx \"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"NoJsJa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"yangwei020154@gmail.com\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-dev\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development webpack-dev-server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-electron\"</span>: <span class=\"string\">\"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-production\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production electron --inspect=5858 index\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build-all\"</span>: <span class=\"string\">\"npm run dist &amp;&amp; npm run build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"electron-builder -l\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"electron\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack4\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"nodemonConfig\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ignore\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"resources/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"build/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/stores/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/styles/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/services/shell/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/configure/view.conf\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/views/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/App.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/main.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"electron-builder.yml\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"delay\"</span>: <span class=\"string\">\"1000\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-css\"</span>: <span class=\"string\">\"^2.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-react\"</span>: <span class=\"string\">\"^0.82.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx\"</span>: <span class=\"string\">\"^4.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx-react\"</span>: <span class=\"string\">\"^5.2.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prop-types\"</span>: <span class=\"string\">\"^15.6.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-hot-loader\"</span>: <span class=\"string\">\"^4.3.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router-dom\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"history\"</span>: <span class=\"string\">\"^4.7.2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-eslint\"</span>: <span class=\"string\">\"^10.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^0.1.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"concurrently\"</span>: <span class=\"string\">\"^3.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"cross-env\"</span>: <span class=\"string\">\"^5.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron\"</span>: <span class=\"string\">\"^2.0.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron-builder\"</span>: <span class=\"string\">\"^20.28.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^5.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^17.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.14.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^6.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^7.11.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"^4.0.0-beta.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-loader\"</span>: <span class=\"string\">\"^0.5.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.9.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"nodemon\"</span>: <span class=\"string\">\"^1.18.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^7.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"source-map-support\"</span>: <span class=\"string\">\"^0.5.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^4.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-cli\"</span>: <span class=\"string\">\"^2.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^3.1.8\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引入Webpack4-0前端打包工具\"><a href=\"#引入Webpack4-0前端打包工具\" class=\"headerlink\" title=\"引入Webpack4.0前端打包工具\"></a>引入Webpack4.0前端打包工具</h3><hr>\n<h4 id=\"webpack开发环境配置文件\"><a href=\"#webpack开发环境配置文件\" class=\"headerlink\" title=\"webpack开发环境配置文件\"></a>webpack开发环境配置文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'react-hot-loader/patch'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/only-dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./app/index'</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, <span class=\"string\">'resources'</span>),</span><br><span class=\"line\">      app: path.resolve(__dirname, <span class=\"string\">'app'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[path][name].[ext]'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  target: <span class=\"string\">'electron-renderer'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Electron基本原理和代码热更新\"><a href=\"#Electron基本原理和代码热更新\" class=\"headerlink\" title=\"Electron基本原理和代码热更新\"></a>Electron基本原理和代码热更新</h3><hr>\n<blockquote>\n<p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。<br>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。<br>在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p>\n</blockquote>\n<h4 id=\"创建主进程\"><a href=\"#创建主进程\" class=\"headerlink\" title=\"创建主进程\"></a>创建主进程</h4><p>在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用<code>http协议</code>加载由webpack-dev-server启动的http服务，生产环境下使用<code>file协议</code>加载本地由webpack打包好的前端bundle.js文件，所以开发环境下<code>npm start</code>指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。</p>\n<h4 id=\"主进程代码热更新\"><a href=\"#主进程代码热更新\" class=\"headerlink\" title=\"主进程代码热更新\"></a>主进程代码热更新</h4><p>我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 <code>npm start-electron</code>命令实际是执行<code>cross-env NODE_ENV=development electron index</code>，就是简单的用electron启动主进程文件，使用nodemon之后<code>npm start-electron</code>实际上是执行<code>nodemon --exec &#39;cross-env NODE_ENV=development electron index&#39;</code>，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。</p>\n<p>=&gt; package.json中定义的启动脚本：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",</span><br><span class=\"line\">  \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",</span><br><span class=\"line\">  \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",</span><br><span class=\"line\">  \"build\": \"npm run dist &amp;&amp; npm run build-all\",</span><br><span class=\"line\">  \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",</span><br><span class=\"line\">  \"build-all\": \"build -lmw\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>=&gt; package.json中nodemonConfig字段<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"nodemonConfig\": &#123;</span><br><span class=\"line\">    \"ignore\": [</span><br><span class=\"line\">      \"resources/*\",</span><br><span class=\"line\">      \"node_modules/*\",</span><br><span class=\"line\">      \"dist/*\",</span><br><span class=\"line\">      \"app/stores/*\",</span><br><span class=\"line\">      \"app/styles/*\",</span><br><span class=\"line\">      \"app/services/shell/*\",</span><br><span class=\"line\">      \"app/configure/view.conf\",</span><br><span class=\"line\">      \"app/views/*\",</span><br><span class=\"line\">      \"app/App.js\",</span><br><span class=\"line\">      \"app/main.js\",</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"delay\": \"1000\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>=&gt; 项目启动文件index.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 根据运行环境加载窗口 //</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWindow</span>(<span class=\"params\">window, env</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// wait for webpack-dev-server start</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">        pathname: <span class=\"string\">'localhost:3000'</span>,</span><br><span class=\"line\">        protocol: <span class=\"string\">'http:'</span>,</span><br><span class=\"line\">        slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">      <span class=\"comment\">// window.webContents.openDevTools();</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">      pathname: path.join(path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">      protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">      slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- main window ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWindow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; width, height &#125; = getAppConf();</span><br><span class=\"line\">  win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">    width,</span><br><span class=\"line\">    height,</span><br><span class=\"line\">    title: <span class=\"string\">'electronux'</span>,</span><br><span class=\"line\">    autoHideMenuBar: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  win.on(<span class=\"string\">'resize'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [_width, _height] = win.getContentSize();</span><br><span class=\"line\">    viewConf.set(&#123;</span><br><span class=\"line\">      width: _width,</span><br><span class=\"line\">      height: _height,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  loadWindow(win, nodeEnv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- electron event ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'ready'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nodeEnv === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    sourceMapSupport.install();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  createWindow();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.platform !== <span class=\"string\">'darwin'</span>) &#123;</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'will-quit'</span>, () =&gt; &#123;</span><br><span class=\"line\">  viewConf.write().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">0</span>, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'App quit: view-conf write error !'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'activate'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (win === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    createWindow();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"前端界面React-Mobx-代码结构和热更新\"><a href=\"#前端界面React-Mobx-代码结构和热更新\" class=\"headerlink\" title=\"前端界面React + Mobx 代码结构和热更新\"></a>前端界面React + Mobx 代码结构和热更新</h3><hr>\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><ol>\n<li>App.js前端入口文件<br>入口文件基本是整个前端应用的关键点，我们使用<code>mobx-react</code>包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器<code>@inject</code>就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档<a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener\">react-router4</a></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- export global history ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> history = createHistory();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stores = &#123;</span><br><span class=\"line\">  install: <span class=\"keyword\">new</span> InstallState(),</span><br><span class=\"line\">  startup: <span class=\"keyword\">new</span> StartupState(),</span><br><span class=\"line\">  info: <span class=\"keyword\">new</span> InfoState(),</span><br><span class=\"line\">  clean: <span class=\"keyword\">new</span> CleanState(),</span><br><span class=\"line\">  pub: <span class=\"keyword\">new</span> PublicState(),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Provider &#123;...stores&#125;&gt;</span><br><span class=\"line\">      &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- export provider ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>mobx store 存储<br>这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构<code>翻译</code>成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。<br>并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写<code>computed</code>、<code>autorun</code>来自动生成数据，使用<code>action</code>修饰一些需要更改store属性的方法。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- observable ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 所有检查项目 //</span></span><br><span class=\"line\">  @observable items = &#123;</span><br><span class=\"line\">    appCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    appLog: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    trash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    packageCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主界面加载 //</span></span><br><span class=\"line\">  @observable loadingMain = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径 //</span></span><br><span class=\"line\">  cleanPaths = &#123;</span><br><span class=\"line\">    appCache: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.cache`</span>],</span><br><span class=\"line\">    appLog: [<span class=\"string\">'/var/log/'</span>],</span><br><span class=\"line\">    trash: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.local/share/Trash/files`</span>],</span><br><span class=\"line\">    packageCache: [<span class=\"string\">'/var/cache/pacman/pkg'</span>],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 路径模块映射 //</span></span><br><span class=\"line\">  @observable cleanPathMap = &#123;</span><br><span class=\"line\">    appCache: [], <span class=\"comment\">// '/var/log/pacman.log'</span></span><br><span class=\"line\">    appLog: [],</span><br><span class=\"line\">    trash: [],</span><br><span class=\"line\">    packageCache: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理内容 //</span></span><br><span class=\"line\">  @observable cleanContents = observable.map(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理大小 //</span></span><br><span class=\"line\">  cleanSizes = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ---- 清理选项细节-数据对象逻辑树结构 ---- //</span></span><br><span class=\"line\">  <span class=\"comment\">// @observable cleanDetails = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   appCache: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: [`/home/$&#123;this.userinfo.username&#125;/.cache`], // 指定扫描路径多个</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123; // 绝对路径</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   appLog: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: ['/var/log/'],</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- static ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- computed ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取所有被选中的detail item //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> allCheckedDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cleanContents.forEach(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (v) a.push(k);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径详细信息 //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> cleanDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.cleanPathMap).forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.items[item]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oneResult = &#123;</span><br><span class=\"line\">          label: item,</span><br><span class=\"line\">          contents: [],</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cleanPathMap[item].forEach(<span class=\"function\">(<span class=\"params\">it</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          oneResult.contents.push(&#123;</span><br><span class=\"line\">            content: it,</span><br><span class=\"line\">            size: <span class=\"keyword\">this</span>.cleanSizes[it] || <span class=\"number\">0</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(oneResult);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Clean;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>页面组件划分<br>在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用<code>@inject</code>修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。<br>使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把<code>关键性数据</code>以及<code>关键性数据加工方法</code>存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态<code>visible</code>没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。</p>\n</li>\n<li><p>渲染进程和主进程ipc通信的问题<br>页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。</p>\n</li>\n</ol>\n<h4 id=\"前端代码热更新\"><a href=\"#前端代码热更新\" class=\"headerlink\" title=\"前端代码热更新\"></a>前端代码热更新</h4><ol>\n<li>webpack.config.js中启动webpack-dev-server的热更新功能</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用<code>react-hot-loader</code>的AppContainer组件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-hot-loader'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'semantic-ui-css/semantic.min.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./styles/public.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;AppContainer&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/AppContainer&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Linux桌面客户端开发遇到的问题\"><a href=\"#Linux桌面客户端开发遇到的问题\" class=\"headerlink\" title=\"Linux桌面客户端开发遇到的问题\"></a>Linux桌面客户端开发遇到的问题</h3><hr>\n<h4 id=\"使用node-js子进程child-process执行shell脚本时无法取得系统root权限\"><a href=\"#使用node-js子进程child-process执行shell脚本时无法取得系统root权限\" class=\"headerlink\" title=\"使用node.js子进程child_process执行shell脚本时无法取得系统root权限\"></a>使用node.js子进程child_process执行shell脚本时无法取得系统root权限</h4><p>项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，<code>spawn</code>、<code>exec</code>、<code>execFile</code>、<code>fork</code>，它们都能创建子进程以执行指定文件或命令，具体的使用方法见<a href=\"http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation\" target=\"_blank\" rel=\"noopener\">Node API</a>，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：</p>\n<ol>\n<li>调用获取系统权限的系统自带组件来执行自定义命令和脚本</li>\n<li>封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。  </li>\n</ol>\n<p><img src=\"/blogs/img/article/mobx9.png\" alt=\"electron_pssword.png\"></p>\n<p><img src=\"/blogs/img/article/mobx10.png\" alt=\"install_permission.png\"></p>\n<p><strong>具体代码见</strong>：<a href=\"/blogs/img/article/mobx10.png\">github/nojsja/electronux/app/utils/sudo-prompt.js</a>  </p>\n<p><em>感谢阅读，文章中出现的错误之处还请多指正~</em>  </p>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blogs/img/article/Fly.jpg\" alt=\"Hello World\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li>前言</li>\n<li>开发环境搭建</li>\n<li>引入Webpack4.0前端打包工具</li>\n<li>Electron代码结构和代码热更新</li>\n<li>前端界面React + Mobx 代码结构和热更新</li>\n<li>Linux桌面客户端开发遇到的问题</li>\n</ol>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - <a href=\"https://github.com/NoJsJa/electronux.git\" target=\"_blank\" rel=\"noopener\">electronux</a><br>作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。</p>\n<p><img src=\"/blogs/img/article/mobx1.png\" alt=\"clean_detail.png\"></p>\n<p><img src=\"/blogs/img/article/mobx2.png\" alt=\"clean_search.png\"></p>\n<p><img src=\"/blogs/img/article/mobx3.png\" alt=\"electron_pssword.png\"></p>\n<p><img src=\"/blogs/img/article/mobx4.png\" alt=\"info_total.png\"></p>\n<p><img src=\"/blogs/img/article/mobx5.png\" alt=\"install_detail.png\"></p>\n<p><img src=\"/blogs/img/article/mobx6.png\" alt=\"install_list.png\"></p>\n<p><img src=\"/blogs/img/article/mobx7.png\" alt=\"install_permission.png\"></p>\n<p><img src=\"/blogs/img/article/mobx8.png\" alt=\"startup_list.png\"></p>\n<h3 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h3><hr>\n<h4 id=\"代码目录结构\"><a href=\"#代码目录结构\" class=\"headerlink\" title=\"代码目录结构\"></a>代码目录结构</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electronux  </span><br><span class=\"line\">|---- [dir ] app ( 主代码目录 )</span><br><span class=\"line\">|----------- [dir ] app/configure ( 应用配置更新 )</span><br><span class=\"line\">|----------- [dir ] app/runtime ( 运行数据文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/services ( 后台服务存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/main-serv ( 主进程服务 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/stores ( 前端状态管理文件目录 )</span><br><span class=\"line\">|----------- [dir ] app/styles  ( 公用样式表文件 )</span><br><span class=\"line\">|----------- [dir ] app/utils  ( 公用工具函数 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/views  ( UI界面代码 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module1  ( 界面模块1 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module2  ( 界面模块2)</span><br><span class=\"line\">|------------------------ [dir ] app/views/module3  ( 界面模块3 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [file] app/App.js  ( 前端应用入口文件 )</span><br><span class=\"line\">|----------- [file] app/index.js ( 前端应用热加载文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [dir ] dist ( 前端代码编译打包文件存放目录 )</span><br><span class=\"line\">|---- [dir ] resources ( 前端静态资源存放目录 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [file] .babelrc ( babel配置文件 )</span><br><span class=\"line\">|---- [file] .editorconfig (编辑器编码规范文件)</span><br><span class=\"line\">|---- [file] .eslintrc ( 代码格式检查配置文件 )</span><br><span class=\"line\">|---- [file] .gitignore ( git忽略追踪配置文件 )</span><br><span class=\"line\">|---- [file] electron-builder.json ( electron-builder打包配置文件 )</span><br><span class=\"line\">|---- [file] index.html  ( 应用渲染入口页面 )</span><br><span class=\"line\">|---- [file] index.js ( 应用主进程入口文件 )</span><br><span class=\"line\">|---- [file] package.json (前端模块和框架配置文件)</span><br><span class=\"line\">|---- [file] webpack.config.js (webpack开发环境配置文件)</span><br><span class=\"line\">|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )</span><br></pre></td></tr></table></figure>\n<h4 id=\"项目环境依赖配置文件\"><a href=\"#项目环境依赖配置文件\" class=\"headerlink\" title=\"项目环境依赖配置文件\"></a>项目环境依赖配置文件</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"linux manager-software powered by electron &amp; react &amp; Mobx \"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"NoJsJa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"yangwei020154@gmail.com\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-dev\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development webpack-dev-server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-electron\"</span>: <span class=\"string\">\"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-production\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production electron --inspect=5858 index\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build-all\"</span>: <span class=\"string\">\"npm run dist &amp;&amp; npm run build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"electron-builder -l\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"electron\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack4\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"nodemonConfig\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ignore\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"resources/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"build/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/stores/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/styles/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/services/shell/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/configure/view.conf\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/views/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/App.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/main.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"electron-builder.yml\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"delay\"</span>: <span class=\"string\">\"1000\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-css\"</span>: <span class=\"string\">\"^2.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-react\"</span>: <span class=\"string\">\"^0.82.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx\"</span>: <span class=\"string\">\"^4.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx-react\"</span>: <span class=\"string\">\"^5.2.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prop-types\"</span>: <span class=\"string\">\"^15.6.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-hot-loader\"</span>: <span class=\"string\">\"^4.3.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router-dom\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"history\"</span>: <span class=\"string\">\"^4.7.2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-eslint\"</span>: <span class=\"string\">\"^10.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^0.1.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"concurrently\"</span>: <span class=\"string\">\"^3.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"cross-env\"</span>: <span class=\"string\">\"^5.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron\"</span>: <span class=\"string\">\"^2.0.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron-builder\"</span>: <span class=\"string\">\"^20.28.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^5.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^17.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.14.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^6.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^7.11.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"^4.0.0-beta.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-loader\"</span>: <span class=\"string\">\"^0.5.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.9.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"nodemon\"</span>: <span class=\"string\">\"^1.18.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^7.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"source-map-support\"</span>: <span class=\"string\">\"^0.5.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^4.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-cli\"</span>: <span class=\"string\">\"^2.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^3.1.8\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引入Webpack4-0前端打包工具\"><a href=\"#引入Webpack4-0前端打包工具\" class=\"headerlink\" title=\"引入Webpack4.0前端打包工具\"></a>引入Webpack4.0前端打包工具</h3><hr>\n<h4 id=\"webpack开发环境配置文件\"><a href=\"#webpack开发环境配置文件\" class=\"headerlink\" title=\"webpack开发环境配置文件\"></a>webpack开发环境配置文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'react-hot-loader/patch'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/only-dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./app/index'</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, <span class=\"string\">'resources'</span>),</span><br><span class=\"line\">      app: path.resolve(__dirname, <span class=\"string\">'app'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[path][name].[ext]'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  target: <span class=\"string\">'electron-renderer'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Electron基本原理和代码热更新\"><a href=\"#Electron基本原理和代码热更新\" class=\"headerlink\" title=\"Electron基本原理和代码热更新\"></a>Electron基本原理和代码热更新</h3><hr>\n<blockquote>\n<p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。<br>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。<br>在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p>\n</blockquote>\n<h4 id=\"创建主进程\"><a href=\"#创建主进程\" class=\"headerlink\" title=\"创建主进程\"></a>创建主进程</h4><p>在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用<code>http协议</code>加载由webpack-dev-server启动的http服务，生产环境下使用<code>file协议</code>加载本地由webpack打包好的前端bundle.js文件，所以开发环境下<code>npm start</code>指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。</p>\n<h4 id=\"主进程代码热更新\"><a href=\"#主进程代码热更新\" class=\"headerlink\" title=\"主进程代码热更新\"></a>主进程代码热更新</h4><p>我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 <code>npm start-electron</code>命令实际是执行<code>cross-env NODE_ENV=development electron index</code>，就是简单的用electron启动主进程文件，使用nodemon之后<code>npm start-electron</code>实际上是执行<code>nodemon --exec &#39;cross-env NODE_ENV=development electron index&#39;</code>，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。</p>\n<p>=&gt; package.json中定义的启动脚本：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",</span><br><span class=\"line\">  \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",</span><br><span class=\"line\">  \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",</span><br><span class=\"line\">  \"build\": \"npm run dist &amp;&amp; npm run build-all\",</span><br><span class=\"line\">  \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",</span><br><span class=\"line\">  \"build-all\": \"build -lmw\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>=&gt; package.json中nodemonConfig字段<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"nodemonConfig\": &#123;</span><br><span class=\"line\">    \"ignore\": [</span><br><span class=\"line\">      \"resources/*\",</span><br><span class=\"line\">      \"node_modules/*\",</span><br><span class=\"line\">      \"dist/*\",</span><br><span class=\"line\">      \"app/stores/*\",</span><br><span class=\"line\">      \"app/styles/*\",</span><br><span class=\"line\">      \"app/services/shell/*\",</span><br><span class=\"line\">      \"app/configure/view.conf\",</span><br><span class=\"line\">      \"app/views/*\",</span><br><span class=\"line\">      \"app/App.js\",</span><br><span class=\"line\">      \"app/main.js\",</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"delay\": \"1000\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>=&gt; 项目启动文件index.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 根据运行环境加载窗口 //</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWindow</span>(<span class=\"params\">window, env</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// wait for webpack-dev-server start</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">        pathname: <span class=\"string\">'localhost:3000'</span>,</span><br><span class=\"line\">        protocol: <span class=\"string\">'http:'</span>,</span><br><span class=\"line\">        slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">      <span class=\"comment\">// window.webContents.openDevTools();</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">      pathname: path.join(path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">      protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">      slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- main window ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWindow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; width, height &#125; = getAppConf();</span><br><span class=\"line\">  win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">    width,</span><br><span class=\"line\">    height,</span><br><span class=\"line\">    title: <span class=\"string\">'electronux'</span>,</span><br><span class=\"line\">    autoHideMenuBar: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  win.on(<span class=\"string\">'resize'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [_width, _height] = win.getContentSize();</span><br><span class=\"line\">    viewConf.set(&#123;</span><br><span class=\"line\">      width: _width,</span><br><span class=\"line\">      height: _height,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  loadWindow(win, nodeEnv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- electron event ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'ready'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nodeEnv === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    sourceMapSupport.install();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  createWindow();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.platform !== <span class=\"string\">'darwin'</span>) &#123;</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'will-quit'</span>, () =&gt; &#123;</span><br><span class=\"line\">  viewConf.write().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">0</span>, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'App quit: view-conf write error !'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'activate'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (win === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    createWindow();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"前端界面React-Mobx-代码结构和热更新\"><a href=\"#前端界面React-Mobx-代码结构和热更新\" class=\"headerlink\" title=\"前端界面React + Mobx 代码结构和热更新\"></a>前端界面React + Mobx 代码结构和热更新</h3><hr>\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><ol>\n<li>App.js前端入口文件<br>入口文件基本是整个前端应用的关键点，我们使用<code>mobx-react</code>包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器<code>@inject</code>就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档<a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener\">react-router4</a></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- export global history ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> history = createHistory();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stores = &#123;</span><br><span class=\"line\">  install: <span class=\"keyword\">new</span> InstallState(),</span><br><span class=\"line\">  startup: <span class=\"keyword\">new</span> StartupState(),</span><br><span class=\"line\">  info: <span class=\"keyword\">new</span> InfoState(),</span><br><span class=\"line\">  clean: <span class=\"keyword\">new</span> CleanState(),</span><br><span class=\"line\">  pub: <span class=\"keyword\">new</span> PublicState(),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Provider &#123;...stores&#125;&gt;</span><br><span class=\"line\">      &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- export provider ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>mobx store 存储<br>这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构<code>翻译</code>成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。<br>并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写<code>computed</code>、<code>autorun</code>来自动生成数据，使用<code>action</code>修饰一些需要更改store属性的方法。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- observable ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 所有检查项目 //</span></span><br><span class=\"line\">  @observable items = &#123;</span><br><span class=\"line\">    appCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    appLog: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    trash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    packageCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主界面加载 //</span></span><br><span class=\"line\">  @observable loadingMain = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径 //</span></span><br><span class=\"line\">  cleanPaths = &#123;</span><br><span class=\"line\">    appCache: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.cache`</span>],</span><br><span class=\"line\">    appLog: [<span class=\"string\">'/var/log/'</span>],</span><br><span class=\"line\">    trash: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.local/share/Trash/files`</span>],</span><br><span class=\"line\">    packageCache: [<span class=\"string\">'/var/cache/pacman/pkg'</span>],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 路径模块映射 //</span></span><br><span class=\"line\">  @observable cleanPathMap = &#123;</span><br><span class=\"line\">    appCache: [], <span class=\"comment\">// '/var/log/pacman.log'</span></span><br><span class=\"line\">    appLog: [],</span><br><span class=\"line\">    trash: [],</span><br><span class=\"line\">    packageCache: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理内容 //</span></span><br><span class=\"line\">  @observable cleanContents = observable.map(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理大小 //</span></span><br><span class=\"line\">  cleanSizes = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ---- 清理选项细节-数据对象逻辑树结构 ---- //</span></span><br><span class=\"line\">  <span class=\"comment\">// @observable cleanDetails = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   appCache: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: [`/home/$&#123;this.userinfo.username&#125;/.cache`], // 指定扫描路径多个</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123; // 绝对路径</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   appLog: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: ['/var/log/'],</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- static ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- computed ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取所有被选中的detail item //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> allCheckedDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cleanContents.forEach(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (v) a.push(k);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径详细信息 //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> cleanDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.cleanPathMap).forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.items[item]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oneResult = &#123;</span><br><span class=\"line\">          label: item,</span><br><span class=\"line\">          contents: [],</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cleanPathMap[item].forEach(<span class=\"function\">(<span class=\"params\">it</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          oneResult.contents.push(&#123;</span><br><span class=\"line\">            content: it,</span><br><span class=\"line\">            size: <span class=\"keyword\">this</span>.cleanSizes[it] || <span class=\"number\">0</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(oneResult);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Clean;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>页面组件划分<br>在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用<code>@inject</code>修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。<br>使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把<code>关键性数据</code>以及<code>关键性数据加工方法</code>存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态<code>visible</code>没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。</p>\n</li>\n<li><p>渲染进程和主进程ipc通信的问题<br>页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。</p>\n</li>\n</ol>\n<h4 id=\"前端代码热更新\"><a href=\"#前端代码热更新\" class=\"headerlink\" title=\"前端代码热更新\"></a>前端代码热更新</h4><ol>\n<li>webpack.config.js中启动webpack-dev-server的热更新功能</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用<code>react-hot-loader</code>的AppContainer组件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-hot-loader'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'semantic-ui-css/semantic.min.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./styles/public.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;AppContainer&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/AppContainer&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Linux桌面客户端开发遇到的问题\"><a href=\"#Linux桌面客户端开发遇到的问题\" class=\"headerlink\" title=\"Linux桌面客户端开发遇到的问题\"></a>Linux桌面客户端开发遇到的问题</h3><hr>\n<h4 id=\"使用node-js子进程child-process执行shell脚本时无法取得系统root权限\"><a href=\"#使用node-js子进程child-process执行shell脚本时无法取得系统root权限\" class=\"headerlink\" title=\"使用node.js子进程child_process执行shell脚本时无法取得系统root权限\"></a>使用node.js子进程child_process执行shell脚本时无法取得系统root权限</h4><p>项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，<code>spawn</code>、<code>exec</code>、<code>execFile</code>、<code>fork</code>，它们都能创建子进程以执行指定文件或命令，具体的使用方法见<a href=\"http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation\" target=\"_blank\" rel=\"noopener\">Node API</a>，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：</p>\n<ol>\n<li>调用获取系统权限的系统自带组件来执行自定义命令和脚本</li>\n<li>封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。  </li>\n</ol>\n<p><img src=\"/blogs/img/article/mobx9.png\" alt=\"electron_pssword.png\"></p>\n<p><img src=\"/blogs/img/article/mobx10.png\" alt=\"install_permission.png\"></p>\n<p><strong>具体代码见</strong>：<a href=\"/blogs/img/article/mobx10.png\">github/nojsja/electronux/app/utils/sudo-prompt.js</a>  </p>\n<p><em>感谢阅读，文章中出现的错误之处还请多指正~</em>  </p>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>"},{"title":"Electron+Mobx+React开发记录(二)","catalog":true,"toc_nav_num":true,"date":"2018-10-26T12:43:00.000Z","subtitle":"Electron Mobx React","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-10-26T12:43:00.000Z","_content":"\n![Hello World](/blogs/img/article/Fly.jpg)\n\n### 目录\n\n1. 前言\n2. webpack4图片打包的问题\n3. webpack4样式表打包分离\n4. 应用构建工具electron-builder配置\n5. 应用构建工具electron-builder的问题\n\n### 前言\n-------------\n[前一篇文章](www.jianshu.com/p/53d74df07e4c)主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，[项目地址](https://github.com/NoJsJa/electronux)。\n\n### webpack4图片打包的问题\n------------------------------------------\n\n#### jsx中声明的img:src不能被webpack识别和打包\n在jsx中使用图片时，如下：\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\n这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：\n```html\n...\nconst imgSrc = require('path/to/img');\n...\n<img src={imgSrc}>\n```\n那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：\n```\n// 匹配1：只匹配图片\nconst requireContext = require.context('resources/install', true, /^\\.\\/.*\\.(jpg|png)$/);\n// 匹配2：匹配所有文件\nconst requireContext = require.context('resources/install', true, /.*/);\nrequireContext.keys().map(requireContext);\n```\n\n#### 生产环境和开发环境的publicPath配置\n关于publicPath这里有一篇说得比较清楚的[文章](https://www.jianshu.com/p/cbe81be10d78)\n> output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。  \n\n> output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是`www.yourhost.com/dist/index.html`的话，那publicPath就需要指定为`/dist/`。\n\n* webpack-dev-server的publicPath默认是`/`，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是`/`，我们在浏览器中访问`localhost:3000/bundle.js`就能看见了，如果你在生产环境下的访问路径是`localhost:3000/dist/bundle.js`，就需要指定webpack-dev-server的publicPath为`/dist/`，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。\n\n* 开发环境下：\n```\nwebpack.config.js\n...\ndevtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n* 生产环境下：\n```\nwebpack.prod.config.js\n...\nentry: [\n    './app/index',\n  ],\n  mode: 'production',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n\n#### 统一生产环境和开发环境的资源引用路径\n可以在webpack.config文件中指定`resolve.alias`来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明`../../../`，如下：\n* 声明：  \n```\nwebpack.config.js\n...\nresolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n...\n```\n* 使用：\n```html\n<img src=\"resources/install/albert.png\"}>\n```\n\n### webpack4样式表打包分离\n------------------------------------------\n#### css属性`backgroup-image: url(...)`的路径统一\n我们在webpack.config中指定`resolve.alias`之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个`~`路径转换符号，来让webpack为你自动替换路径，如下：\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n#### 将样式表从bundle.js文件中分离\n如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用`extract-text-webpack-plugin`webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。\n* index.html\n\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n* 开发环境下webpack插件`extract-text-webpack-plugin`配置\n这里的插件`publicPath`需要根据webpack-dev-server的`publicPath`配置(默认是`/`)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的`publicPath`来计算得出。\n\n```js\nwebpack.config.js\n...\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      ...\n    ],\n    ...\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    ...\n  ],\n...\n```\n\n* 生产环境下webpack插件`extract-text-webpack-plugin`配置\n生产环境下需要将`publicPath`设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。\n\n```js\nwebpack.prod.config.js\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n    ...\n```\n\n### 应用构建工具electron-builder配置\n----------------------------------------------------\n```json\n{\n  \"appId\": \"com.nojsja.electronux\",\n  \"copyright\": \"nojsja\",\n  \"productName\": \"electronux\",\n  \"asar\": false,\n  \"directories\": {\n    \"buildResources\": \"build-assets/\",\n    \"output\": \"build/\"\n  },\n  \"files\": [\"package.json\", \"index.js\", \"dist/\", \"app/\", \"node_modules/\"],\n  \"linux\": {\n    \"icon\": \"resources\",\n    \"category\": \"System\",\n    \"description\": \"A System Management Tool Build For Manjaro Linux 17\",\n    \"synopsis\": \"electronux\",\n    \"target\": [\"zip\"]\n  }\n}\n```\nelectron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录`dist`下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中`files`参数项配置的就是所有需要最终打包进我们应用的所有文件了。\n* package.json -- 整个应用程序的依赖配置文件\n* index.js -- 主进程入口文件\n* dist -- 渲染进程资源文件\n* app -- 运行时引用的源代码和资源目录\n* node_modules -- 运行时引用的第三方模块和资源目录\n\n配置说明详细见[官方文档](https://www.electron.build/configuration/configuration)\n\n### 应用构建工具electron-builder的问题\n-------------------------------------------------\n#### 国内墙导致打包工具依赖下载失败\n运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把`~/.cache/electron-builder`、`~/.cache/electron`这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。\n\n#### 打包成AppImage后在运行时不能使用chmod更改文件权限的问题\n先来看一段Linux上常见的AppImage打包应用的定义：  \n> AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候`挂载`，用AppImage打包的程序，一个程序就是一个文件。  \n\n在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的`fs.chmod`方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。\n为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成`pacman`、`deb`、`rpm`、`tar.gz`等文件。\n\n#### arar加密打包时造成绝对路径查找失败\nelectron-builder的打包参数中有一个参数是`asar: true/false`，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。\n\n#### 外部引用资源(img:src / css:url)的相对路径和绝对路径\nhtml demo:\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\ncss demo:\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用`electron index.js`命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用`file`协议来加载文件的，首先我们在在执行了`electron index.js`命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：  \n```js\nwindow.loadURL(url.format({\n  pathname: path.resolve(__dirname, 'dist', 'index.html'),\n  protocol: 'file:',\n  slashes: true,\n}));\n```\n然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在`dist`文件夹下的，而不是系统根目录`/`，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\n#### 使用node.js对shell脚本赋予可执行权限\nnode.js的fs模块可以为文件赋予可执行权限，并且`fs.chmod`命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。  \n* 定义fsChmod模块递归为一个目录内的所有文件授予权限：\n\n```js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction chmod(target, opstr) {\n  if (fs.statSync(target).isDirectory()) {\n    const files = fs.readdirSync(target);\n    if (files.length) {\n      files.forEach((file) => {\n        chmod(path.join(target, file), opstr);\n      });\n    }\n  } else {\n    fs.chmodSync(target, opstr);\n  }\n}\nfunction fsChmod(dir, opstr) {\n  chmod(dir, opstr);\n}\n\nmodule.exports = fsChmod;\n\n```\n\n* 在fsChmod同级目录下定义shell授权模块\n这样子的话会避开绝对路径查找的问题\n\n```js\nconst path = require('path');\nconst fsChmod = require('./fs-chmod');\nfunction fsChmodShell() {\n  fsChmod(path.join(__dirname, '../shell'), 0o711);\n}\nmodule.exports = fsChmodShell;\n```\n\n* 项目index.js中引入执行  \n__注意：__ 请尽量不要在项目文件中使用`__dirname`和`procoss.pwd()`來加载一个模块，例如`path.resolve(process.cwd(), 'path/to/file')`这样的绝对路径，而应该使用`app.getAppPath()`，相对应的获取运行时绝对路径命令更改为`path.resolve(app.getAppPath(), 'path/to/file')`(app是electron自带的属性)来获取运行时执行目录，`app.getAppPath()`一般是`package.json`所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录`/`下，shell文件夹(存放shell scripts)的路径是`/app/service/shell`，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录`/`下，但是shell文件夹位置却变成了`/resources/app/app/shell`，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录`/resources/app`下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启`arar`源代码加密)和相对路径查询的。\n\n```js\nconst fsChmodShell = require('./app/services/middleware/fs-chmod-shell.js');\nfsChmodShell();\n```\n\n### 感谢阅读，如有错误，还请指正：- )\n","source":"_posts/Electron+Mobx+React开发记录(二).md","raw":"---\ntitle: \"Electron+Mobx+React开发记录(二)\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-10-26 20:43:00\nsubtitle: \"Electron Mobx React\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- es6\n- react\n- mobx\n- electron\ncategories:\n- Electron\nupdateDate: 2018-10-26 20:43:00\n---\n\n![Hello World](/blogs/img/article/Fly.jpg)\n\n### 目录\n\n1. 前言\n2. webpack4图片打包的问题\n3. webpack4样式表打包分离\n4. 应用构建工具electron-builder配置\n5. 应用构建工具electron-builder的问题\n\n### 前言\n-------------\n[前一篇文章](www.jianshu.com/p/53d74df07e4c)主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，[项目地址](https://github.com/NoJsJa/electronux)。\n\n### webpack4图片打包的问题\n------------------------------------------\n\n#### jsx中声明的img:src不能被webpack识别和打包\n在jsx中使用图片时，如下：\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\n这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：\n```html\n...\nconst imgSrc = require('path/to/img');\n...\n<img src={imgSrc}>\n```\n那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：\n```\n// 匹配1：只匹配图片\nconst requireContext = require.context('resources/install', true, /^\\.\\/.*\\.(jpg|png)$/);\n// 匹配2：匹配所有文件\nconst requireContext = require.context('resources/install', true, /.*/);\nrequireContext.keys().map(requireContext);\n```\n\n#### 生产环境和开发环境的publicPath配置\n关于publicPath这里有一篇说得比较清楚的[文章](https://www.jianshu.com/p/cbe81be10d78)\n> output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。  \n\n> output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是`www.yourhost.com/dist/index.html`的话，那publicPath就需要指定为`/dist/`。\n\n* webpack-dev-server的publicPath默认是`/`，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是`/`，我们在浏览器中访问`localhost:3000/bundle.js`就能看见了，如果你在生产环境下的访问路径是`localhost:3000/dist/bundle.js`，就需要指定webpack-dev-server的publicPath为`/dist/`，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。\n\n* 开发环境下：\n```\nwebpack.config.js\n...\ndevtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n* 生产环境下：\n```\nwebpack.prod.config.js\n...\nentry: [\n    './app/index',\n  ],\n  mode: 'production',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n\n#### 统一生产环境和开发环境的资源引用路径\n可以在webpack.config文件中指定`resolve.alias`来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明`../../../`，如下：\n* 声明：  \n```\nwebpack.config.js\n...\nresolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n...\n```\n* 使用：\n```html\n<img src=\"resources/install/albert.png\"}>\n```\n\n### webpack4样式表打包分离\n------------------------------------------\n#### css属性`backgroup-image: url(...)`的路径统一\n我们在webpack.config中指定`resolve.alias`之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个`~`路径转换符号，来让webpack为你自动替换路径，如下：\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n#### 将样式表从bundle.js文件中分离\n如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用`extract-text-webpack-plugin`webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。\n* index.html\n\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n* 开发环境下webpack插件`extract-text-webpack-plugin`配置\n这里的插件`publicPath`需要根据webpack-dev-server的`publicPath`配置(默认是`/`)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的`publicPath`来计算得出。\n\n```js\nwebpack.config.js\n...\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      ...\n    ],\n    ...\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    ...\n  ],\n...\n```\n\n* 生产环境下webpack插件`extract-text-webpack-plugin`配置\n生产环境下需要将`publicPath`设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。\n\n```js\nwebpack.prod.config.js\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n    ...\n```\n\n### 应用构建工具electron-builder配置\n----------------------------------------------------\n```json\n{\n  \"appId\": \"com.nojsja.electronux\",\n  \"copyright\": \"nojsja\",\n  \"productName\": \"electronux\",\n  \"asar\": false,\n  \"directories\": {\n    \"buildResources\": \"build-assets/\",\n    \"output\": \"build/\"\n  },\n  \"files\": [\"package.json\", \"index.js\", \"dist/\", \"app/\", \"node_modules/\"],\n  \"linux\": {\n    \"icon\": \"resources\",\n    \"category\": \"System\",\n    \"description\": \"A System Management Tool Build For Manjaro Linux 17\",\n    \"synopsis\": \"electronux\",\n    \"target\": [\"zip\"]\n  }\n}\n```\nelectron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录`dist`下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中`files`参数项配置的就是所有需要最终打包进我们应用的所有文件了。\n* package.json -- 整个应用程序的依赖配置文件\n* index.js -- 主进程入口文件\n* dist -- 渲染进程资源文件\n* app -- 运行时引用的源代码和资源目录\n* node_modules -- 运行时引用的第三方模块和资源目录\n\n配置说明详细见[官方文档](https://www.electron.build/configuration/configuration)\n\n### 应用构建工具electron-builder的问题\n-------------------------------------------------\n#### 国内墙导致打包工具依赖下载失败\n运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把`~/.cache/electron-builder`、`~/.cache/electron`这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。\n\n#### 打包成AppImage后在运行时不能使用chmod更改文件权限的问题\n先来看一段Linux上常见的AppImage打包应用的定义：  \n> AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候`挂载`，用AppImage打包的程序，一个程序就是一个文件。  \n\n在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的`fs.chmod`方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。\n为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成`pacman`、`deb`、`rpm`、`tar.gz`等文件。\n\n#### arar加密打包时造成绝对路径查找失败\nelectron-builder的打包参数中有一个参数是`asar: true/false`，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。\n\n#### 外部引用资源(img:src / css:url)的相对路径和绝对路径\nhtml demo:\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\ncss demo:\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用`electron index.js`命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用`file`协议来加载文件的，首先我们在在执行了`electron index.js`命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：  \n```js\nwindow.loadURL(url.format({\n  pathname: path.resolve(__dirname, 'dist', 'index.html'),\n  protocol: 'file:',\n  slashes: true,\n}));\n```\n然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在`dist`文件夹下的，而不是系统根目录`/`，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\n#### 使用node.js对shell脚本赋予可执行权限\nnode.js的fs模块可以为文件赋予可执行权限，并且`fs.chmod`命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。  \n* 定义fsChmod模块递归为一个目录内的所有文件授予权限：\n\n```js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction chmod(target, opstr) {\n  if (fs.statSync(target).isDirectory()) {\n    const files = fs.readdirSync(target);\n    if (files.length) {\n      files.forEach((file) => {\n        chmod(path.join(target, file), opstr);\n      });\n    }\n  } else {\n    fs.chmodSync(target, opstr);\n  }\n}\nfunction fsChmod(dir, opstr) {\n  chmod(dir, opstr);\n}\n\nmodule.exports = fsChmod;\n\n```\n\n* 在fsChmod同级目录下定义shell授权模块\n这样子的话会避开绝对路径查找的问题\n\n```js\nconst path = require('path');\nconst fsChmod = require('./fs-chmod');\nfunction fsChmodShell() {\n  fsChmod(path.join(__dirname, '../shell'), 0o711);\n}\nmodule.exports = fsChmodShell;\n```\n\n* 项目index.js中引入执行  \n__注意：__ 请尽量不要在项目文件中使用`__dirname`和`procoss.pwd()`來加载一个模块，例如`path.resolve(process.cwd(), 'path/to/file')`这样的绝对路径，而应该使用`app.getAppPath()`，相对应的获取运行时绝对路径命令更改为`path.resolve(app.getAppPath(), 'path/to/file')`(app是electron自带的属性)来获取运行时执行目录，`app.getAppPath()`一般是`package.json`所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录`/`下，shell文件夹(存放shell scripts)的路径是`/app/service/shell`，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录`/`下，但是shell文件夹位置却变成了`/resources/app/app/shell`，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录`/resources/app`下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启`arar`源代码加密)和相对路径查询的。\n\n```js\nconst fsChmodShell = require('./app/services/middleware/fs-chmod-shell.js');\nfsChmodShell();\n```\n\n### 感谢阅读，如有错误，还请指正：- )\n","slug":"Electron-Mobx-React开发记录-二","published":1,"updated":"2020-08-20T06:45:13.370Z","_id":"ckba8cy9u000p5495711r7b1p","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/blogs/img/article/Fly.jpg\" alt=\"Hello World\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li>前言</li>\n<li>webpack4图片打包的问题</li>\n<li>webpack4样式表打包分离</li>\n<li>应用构建工具electron-builder配置</li>\n<li>应用构建工具electron-builder的问题</li>\n</ol>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p><a href=\"www.jianshu.com/p/53d74df07e4c\">前一篇文章</a>主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，<a href=\"https://github.com/NoJsJa/electronux\" target=\"_blank\" rel=\"noopener\">项目地址</a>。</p>\n<h3 id=\"webpack4图片打包的问题\"><a href=\"#webpack4图片打包的问题\" class=\"headerlink\" title=\"webpack4图片打包的问题\"></a>webpack4图片打包的问题</h3><hr>\n<h4 id=\"jsx中声明的img-src不能被webpack识别和打包\"><a href=\"#jsx中声明的img-src不能被webpack识别和打包\" class=\"headerlink\" title=\"jsx中声明的img:src不能被webpack识别和打包\"></a>jsx中声明的img:src不能被webpack识别和打包</h4><p>在jsx中使用图片时，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">const imgSrc = require('path/to/img');</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;imgSrc&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 匹配1：只匹配图片</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;^\\.\\&#x2F;.*\\.(jpg|png)$&#x2F;);</span><br><span class=\"line\">&#x2F;&#x2F; 匹配2：匹配所有文件</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;.*&#x2F;);</span><br><span class=\"line\">requireContext.keys().map(requireContext);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生产环境和开发环境的publicPath配置\"><a href=\"#生产环境和开发环境的publicPath配置\" class=\"headerlink\" title=\"生产环境和开发环境的publicPath配置\"></a>生产环境和开发环境的publicPath配置</h4><p>关于publicPath这里有一篇说得比较清楚的<a href=\"https://www.jianshu.com/p/cbe81be10d78\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<blockquote>\n<p>output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。  </p>\n<p>output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是<code>www.yourhost.com/dist/index.html</code>的话，那publicPath就需要指定为<code>/dist/</code>。</p>\n</blockquote>\n<ul>\n<li><p>webpack-dev-server的publicPath默认是<code>/</code>，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是<code>/</code>，我们在浏览器中访问<code>localhost:3000/bundle.js</code>就能看见了，如果你在生产环境下的访问路径是<code>localhost:3000/dist/bundle.js</code>，就需要指定webpack-dev-server的publicPath为<code>/dist/</code>，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。</p>\n</li>\n<li><p>开发环境下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">devtool: &#39;source-map&#39;,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &#39;react-hot-loader&#x2F;patch&#39;,</span><br><span class=\"line\">    &#39;webpack-dev-server&#x2F;client?http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">    &#39;webpack&#x2F;hot&#x2F;only-dev-server&#39;,</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n<li>生产环境下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: [</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;production&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"统一生产环境和开发环境的资源引用路径\"><a href=\"#统一生产环境和开发环境的资源引用路径\" class=\"headerlink\" title=\"统一生产环境和开发环境的资源引用路径\"></a>统一生产环境和开发环境的资源引用路径</h4><p>可以在webpack.config文件中指定<code>resolve.alias</code>来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明<code>../../../</code>，如下：</p>\n<ul>\n<li>声明：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, &#39;resources&#39;),</span><br><span class=\"line\">      app: path.resolve(__dirname, &#39;app&#39;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n<li>使用：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/install/albert.png\"</span>&#125;&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"webpack4样式表打包分离\"><a href=\"#webpack4样式表打包分离\" class=\"headerlink\" title=\"webpack4样式表打包分离\"></a>webpack4样式表打包分离</h3><hr>\n<h4 id=\"css属性backgroup-image-url-的路径统一\"><a href=\"#css属性backgroup-image-url-的路径统一\" class=\"headerlink\" title=\"css属性backgroup-image: url(...)的路径统一\"></a>css属性<code>backgroup-image: url(...)</code>的路径统一</h4><p>我们在webpack.config中指定<code>resolve.alias</code>之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个<code>~</code>路径转换符号，来让webpack为你自动替换路径，如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"将样式表从bundle-js文件中分离\"><a href=\"#将样式表从bundle-js文件中分离\" class=\"headerlink\" title=\"将样式表从bundle.js文件中分离\"></a>将样式表从bundle.js文件中分离</h4><p>如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用<code>extract-text-webpack-plugin</code>webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。</p>\n<ul>\n<li>index.html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>开发环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>这里的插件<code>publicPath</code>需要根据webpack-dev-server的<code>publicPath</code>配置(默认是<code>/</code>)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的<code>publicPath</code>来计算得出。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生产环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>生产环境下需要将<code>publicPath</code>设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用构建工具electron-builder配置\"><a href=\"#应用构建工具electron-builder配置\" class=\"headerlink\" title=\"应用构建工具electron-builder配置\"></a>应用构建工具electron-builder配置</h3><hr>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"appId\"</span>: <span class=\"string\">\"com.nojsja.electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"copyright\"</span>: <span class=\"string\">\"nojsja\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"directories\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"buildResources\"</span>: <span class=\"string\">\"build-assets/\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"output\"</span>: <span class=\"string\">\"build/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"files\"</span>: [<span class=\"string\">\"package.json\"</span>, <span class=\"string\">\"index.js\"</span>, <span class=\"string\">\"dist/\"</span>, <span class=\"string\">\"app/\"</span>, <span class=\"string\">\"node_modules/\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"resources\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"category\"</span>: <span class=\"string\">\"System\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A System Management Tool Build For Manjaro Linux 17\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"synopsis\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: [<span class=\"string\">\"zip\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>electron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录<code>dist</code>下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中<code>files</code>参数项配置的就是所有需要最终打包进我们应用的所有文件了。</p>\n<ul>\n<li>package.json — 整个应用程序的依赖配置文件</li>\n<li>index.js — 主进程入口文件</li>\n<li>dist — 渲染进程资源文件</li>\n<li>app — 运行时引用的源代码和资源目录</li>\n<li>node_modules — 运行时引用的第三方模块和资源目录</li>\n</ul>\n<p>配置说明详细见<a href=\"https://www.electron.build/configuration/configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"应用构建工具electron-builder的问题\"><a href=\"#应用构建工具electron-builder的问题\" class=\"headerlink\" title=\"应用构建工具electron-builder的问题\"></a>应用构建工具electron-builder的问题</h3><hr>\n<h4 id=\"国内墙导致打包工具依赖下载失败\"><a href=\"#国内墙导致打包工具依赖下载失败\" class=\"headerlink\" title=\"国内墙导致打包工具依赖下载失败\"></a>国内墙导致打包工具依赖下载失败</h4><p>运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把<code>~/.cache/electron-builder</code>、<code>~/.cache/electron</code>这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。</p>\n<h4 id=\"打包成AppImage后在运行时不能使用chmod更改文件权限的问题\"><a href=\"#打包成AppImage后在运行时不能使用chmod更改文件权限的问题\" class=\"headerlink\" title=\"打包成AppImage后在运行时不能使用chmod更改文件权限的问题\"></a>打包成AppImage后在运行时不能使用chmod更改文件权限的问题</h4><p>先来看一段Linux上常见的AppImage打包应用的定义：  </p>\n<blockquote>\n<p>AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候<code>挂载</code>，用AppImage打包的程序，一个程序就是一个文件。  </p>\n</blockquote>\n<p>在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的<code>fs.chmod</code>方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。<br>为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成<code>pacman</code>、<code>deb</code>、<code>rpm</code>、<code>tar.gz</code>等文件。</p>\n<h4 id=\"arar加密打包时造成绝对路径查找失败\"><a href=\"#arar加密打包时造成绝对路径查找失败\" class=\"headerlink\" title=\"arar加密打包时造成绝对路径查找失败\"></a>arar加密打包时造成绝对路径查找失败</h4><p>electron-builder的打包参数中有一个参数是<code>asar: true/false</code>，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。</p>\n<h4 id=\"外部引用资源-img-src-css-url-的相对路径和绝对路径\"><a href=\"#外部引用资源-img-src-css-url-的相对路径和绝对路径\" class=\"headerlink\" title=\"外部引用资源(img:src / css:url)的相对路径和绝对路径\"></a>外部引用资源(img:src / css:url)的相对路径和绝对路径</h4><p>html demo:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>css demo:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用<code>electron index.js</code>命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用<code>file</code>协议来加载文件的，首先我们在在执行了<code>electron index.js</code>命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">  pathname: path.resolve(__dirname, <span class=\"string\">'dist'</span>, <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">  protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">  slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure><br>然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在<code>dist</code>文件夹下的，而不是系统根目录<code>/</code>，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用node-js对shell脚本赋予可执行权限\"><a href=\"#使用node-js对shell脚本赋予可执行权限\" class=\"headerlink\" title=\"使用node.js对shell脚本赋予可执行权限\"></a>使用node.js对shell脚本赋予可执行权限</h4><p>node.js的fs模块可以为文件赋予可执行权限，并且<code>fs.chmod</code>命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。  </p>\n<ul>\n<li>定义fsChmod模块递归为一个目录内的所有文件授予权限：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chmod</span>(<span class=\"params\">target, opstr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fs.statSync(target).isDirectory()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> files = fs.readdirSync(target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.length) &#123;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        chmod(path.join(target, file), opstr);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fs.chmodSync(target, opstr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmod</span>(<span class=\"params\">dir, opstr</span>) </span>&#123;</span><br><span class=\"line\">  chmod(dir, opstr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmod;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在fsChmod同级目录下定义shell授权模块<br>这样子的话会避开绝对路径查找的问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsChmod = <span class=\"built_in\">require</span>(<span class=\"string\">'./fs-chmod'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmodShell</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fsChmod(path.join(__dirname, <span class=\"string\">'../shell'</span>), <span class=\"number\">0o711</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmodShell;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>项目index.js中引入执行<br><strong>注意：</strong> 请尽量不要在项目文件中使用<code>__dirname</code>和<code>procoss.pwd()</code>來加载一个模块，例如<code>path.resolve(process.cwd(), &#39;path/to/file&#39;)</code>这样的绝对路径，而应该使用<code>app.getAppPath()</code>，相对应的获取运行时绝对路径命令更改为<code>path.resolve(app.getAppPath(), &#39;path/to/file&#39;)</code>(app是electron自带的属性)来获取运行时执行目录，<code>app.getAppPath()</code>一般是<code>package.json</code>所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录<code>/</code>下，shell文件夹(存放shell scripts)的路径是<code>/app/service/shell</code>，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录<code>/</code>下，但是shell文件夹位置却变成了<code>/resources/app/app/shell</code>，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录<code>/resources/app</code>下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启<code>arar</code>源代码加密)和相对路径查询的。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fsChmodShell = <span class=\"built_in\">require</span>(<span class=\"string\">'./app/services/middleware/fs-chmod-shell.js'</span>);</span><br><span class=\"line\">fsChmodShell();</span><br></pre></td></tr></table></figure>\n<h3 id=\"感谢阅读，如有错误，还请指正：\"><a href=\"#感谢阅读，如有错误，还请指正：\" class=\"headerlink\" title=\"感谢阅读，如有错误，还请指正：- )\"></a>感谢阅读，如有错误，还请指正：- )</h3>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blogs/img/article/Fly.jpg\" alt=\"Hello World\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li>前言</li>\n<li>webpack4图片打包的问题</li>\n<li>webpack4样式表打包分离</li>\n<li>应用构建工具electron-builder配置</li>\n<li>应用构建工具electron-builder的问题</li>\n</ol>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p><a href=\"www.jianshu.com/p/53d74df07e4c\">前一篇文章</a>主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，<a href=\"https://github.com/NoJsJa/electronux\" target=\"_blank\" rel=\"noopener\">项目地址</a>。</p>\n<h3 id=\"webpack4图片打包的问题\"><a href=\"#webpack4图片打包的问题\" class=\"headerlink\" title=\"webpack4图片打包的问题\"></a>webpack4图片打包的问题</h3><hr>\n<h4 id=\"jsx中声明的img-src不能被webpack识别和打包\"><a href=\"#jsx中声明的img-src不能被webpack识别和打包\" class=\"headerlink\" title=\"jsx中声明的img:src不能被webpack识别和打包\"></a>jsx中声明的img:src不能被webpack识别和打包</h4><p>在jsx中使用图片时，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">const imgSrc = require('path/to/img');</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;imgSrc&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 匹配1：只匹配图片</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;^\\.\\&#x2F;.*\\.(jpg|png)$&#x2F;);</span><br><span class=\"line\">&#x2F;&#x2F; 匹配2：匹配所有文件</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;.*&#x2F;);</span><br><span class=\"line\">requireContext.keys().map(requireContext);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生产环境和开发环境的publicPath配置\"><a href=\"#生产环境和开发环境的publicPath配置\" class=\"headerlink\" title=\"生产环境和开发环境的publicPath配置\"></a>生产环境和开发环境的publicPath配置</h4><p>关于publicPath这里有一篇说得比较清楚的<a href=\"https://www.jianshu.com/p/cbe81be10d78\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<blockquote>\n<p>output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。  </p>\n<p>output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是<code>www.yourhost.com/dist/index.html</code>的话，那publicPath就需要指定为<code>/dist/</code>。</p>\n</blockquote>\n<ul>\n<li><p>webpack-dev-server的publicPath默认是<code>/</code>，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是<code>/</code>，我们在浏览器中访问<code>localhost:3000/bundle.js</code>就能看见了，如果你在生产环境下的访问路径是<code>localhost:3000/dist/bundle.js</code>，就需要指定webpack-dev-server的publicPath为<code>/dist/</code>，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。</p>\n</li>\n<li><p>开发环境下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">devtool: &#39;source-map&#39;,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &#39;react-hot-loader&#x2F;patch&#39;,</span><br><span class=\"line\">    &#39;webpack-dev-server&#x2F;client?http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">    &#39;webpack&#x2F;hot&#x2F;only-dev-server&#39;,</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n<li>生产环境下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: [</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;production&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"统一生产环境和开发环境的资源引用路径\"><a href=\"#统一生产环境和开发环境的资源引用路径\" class=\"headerlink\" title=\"统一生产环境和开发环境的资源引用路径\"></a>统一生产环境和开发环境的资源引用路径</h4><p>可以在webpack.config文件中指定<code>resolve.alias</code>来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明<code>../../../</code>，如下：</p>\n<ul>\n<li>声明：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, &#39;resources&#39;),</span><br><span class=\"line\">      app: path.resolve(__dirname, &#39;app&#39;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n<li>使用：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/install/albert.png\"</span>&#125;&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"webpack4样式表打包分离\"><a href=\"#webpack4样式表打包分离\" class=\"headerlink\" title=\"webpack4样式表打包分离\"></a>webpack4样式表打包分离</h3><hr>\n<h4 id=\"css属性backgroup-image-url-的路径统一\"><a href=\"#css属性backgroup-image-url-的路径统一\" class=\"headerlink\" title=\"css属性backgroup-image: url(...)的路径统一\"></a>css属性<code>backgroup-image: url(...)</code>的路径统一</h4><p>我们在webpack.config中指定<code>resolve.alias</code>之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个<code>~</code>路径转换符号，来让webpack为你自动替换路径，如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"将样式表从bundle-js文件中分离\"><a href=\"#将样式表从bundle-js文件中分离\" class=\"headerlink\" title=\"将样式表从bundle.js文件中分离\"></a>将样式表从bundle.js文件中分离</h4><p>如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用<code>extract-text-webpack-plugin</code>webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。</p>\n<ul>\n<li>index.html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>开发环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>这里的插件<code>publicPath</code>需要根据webpack-dev-server的<code>publicPath</code>配置(默认是<code>/</code>)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的<code>publicPath</code>来计算得出。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生产环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>生产环境下需要将<code>publicPath</code>设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用构建工具electron-builder配置\"><a href=\"#应用构建工具electron-builder配置\" class=\"headerlink\" title=\"应用构建工具electron-builder配置\"></a>应用构建工具electron-builder配置</h3><hr>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"appId\"</span>: <span class=\"string\">\"com.nojsja.electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"copyright\"</span>: <span class=\"string\">\"nojsja\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"directories\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"buildResources\"</span>: <span class=\"string\">\"build-assets/\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"output\"</span>: <span class=\"string\">\"build/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"files\"</span>: [<span class=\"string\">\"package.json\"</span>, <span class=\"string\">\"index.js\"</span>, <span class=\"string\">\"dist/\"</span>, <span class=\"string\">\"app/\"</span>, <span class=\"string\">\"node_modules/\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"resources\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"category\"</span>: <span class=\"string\">\"System\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A System Management Tool Build For Manjaro Linux 17\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"synopsis\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: [<span class=\"string\">\"zip\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>electron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录<code>dist</code>下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中<code>files</code>参数项配置的就是所有需要最终打包进我们应用的所有文件了。</p>\n<ul>\n<li>package.json — 整个应用程序的依赖配置文件</li>\n<li>index.js — 主进程入口文件</li>\n<li>dist — 渲染进程资源文件</li>\n<li>app — 运行时引用的源代码和资源目录</li>\n<li>node_modules — 运行时引用的第三方模块和资源目录</li>\n</ul>\n<p>配置说明详细见<a href=\"https://www.electron.build/configuration/configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"应用构建工具electron-builder的问题\"><a href=\"#应用构建工具electron-builder的问题\" class=\"headerlink\" title=\"应用构建工具electron-builder的问题\"></a>应用构建工具electron-builder的问题</h3><hr>\n<h4 id=\"国内墙导致打包工具依赖下载失败\"><a href=\"#国内墙导致打包工具依赖下载失败\" class=\"headerlink\" title=\"国内墙导致打包工具依赖下载失败\"></a>国内墙导致打包工具依赖下载失败</h4><p>运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把<code>~/.cache/electron-builder</code>、<code>~/.cache/electron</code>这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。</p>\n<h4 id=\"打包成AppImage后在运行时不能使用chmod更改文件权限的问题\"><a href=\"#打包成AppImage后在运行时不能使用chmod更改文件权限的问题\" class=\"headerlink\" title=\"打包成AppImage后在运行时不能使用chmod更改文件权限的问题\"></a>打包成AppImage后在运行时不能使用chmod更改文件权限的问题</h4><p>先来看一段Linux上常见的AppImage打包应用的定义：  </p>\n<blockquote>\n<p>AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候<code>挂载</code>，用AppImage打包的程序，一个程序就是一个文件。  </p>\n</blockquote>\n<p>在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的<code>fs.chmod</code>方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。<br>为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成<code>pacman</code>、<code>deb</code>、<code>rpm</code>、<code>tar.gz</code>等文件。</p>\n<h4 id=\"arar加密打包时造成绝对路径查找失败\"><a href=\"#arar加密打包时造成绝对路径查找失败\" class=\"headerlink\" title=\"arar加密打包时造成绝对路径查找失败\"></a>arar加密打包时造成绝对路径查找失败</h4><p>electron-builder的打包参数中有一个参数是<code>asar: true/false</code>，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。</p>\n<h4 id=\"外部引用资源-img-src-css-url-的相对路径和绝对路径\"><a href=\"#外部引用资源-img-src-css-url-的相对路径和绝对路径\" class=\"headerlink\" title=\"外部引用资源(img:src / css:url)的相对路径和绝对路径\"></a>外部引用资源(img:src / css:url)的相对路径和绝对路径</h4><p>html demo:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>css demo:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用<code>electron index.js</code>命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用<code>file</code>协议来加载文件的，首先我们在在执行了<code>electron index.js</code>命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">  pathname: path.resolve(__dirname, <span class=\"string\">'dist'</span>, <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">  protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">  slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure><br>然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在<code>dist</code>文件夹下的，而不是系统根目录<code>/</code>，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用node-js对shell脚本赋予可执行权限\"><a href=\"#使用node-js对shell脚本赋予可执行权限\" class=\"headerlink\" title=\"使用node.js对shell脚本赋予可执行权限\"></a>使用node.js对shell脚本赋予可执行权限</h4><p>node.js的fs模块可以为文件赋予可执行权限，并且<code>fs.chmod</code>命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。  </p>\n<ul>\n<li>定义fsChmod模块递归为一个目录内的所有文件授予权限：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chmod</span>(<span class=\"params\">target, opstr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fs.statSync(target).isDirectory()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> files = fs.readdirSync(target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.length) &#123;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        chmod(path.join(target, file), opstr);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fs.chmodSync(target, opstr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmod</span>(<span class=\"params\">dir, opstr</span>) </span>&#123;</span><br><span class=\"line\">  chmod(dir, opstr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmod;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在fsChmod同级目录下定义shell授权模块<br>这样子的话会避开绝对路径查找的问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsChmod = <span class=\"built_in\">require</span>(<span class=\"string\">'./fs-chmod'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmodShell</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fsChmod(path.join(__dirname, <span class=\"string\">'../shell'</span>), <span class=\"number\">0o711</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmodShell;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>项目index.js中引入执行<br><strong>注意：</strong> 请尽量不要在项目文件中使用<code>__dirname</code>和<code>procoss.pwd()</code>來加载一个模块，例如<code>path.resolve(process.cwd(), &#39;path/to/file&#39;)</code>这样的绝对路径，而应该使用<code>app.getAppPath()</code>，相对应的获取运行时绝对路径命令更改为<code>path.resolve(app.getAppPath(), &#39;path/to/file&#39;)</code>(app是electron自带的属性)来获取运行时执行目录，<code>app.getAppPath()</code>一般是<code>package.json</code>所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录<code>/</code>下，shell文件夹(存放shell scripts)的路径是<code>/app/service/shell</code>，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录<code>/</code>下，但是shell文件夹位置却变成了<code>/resources/app/app/shell</code>，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录<code>/resources/app</code>下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启<code>arar</code>源代码加密)和相对路径查询的。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fsChmodShell = <span class=\"built_in\">require</span>(<span class=\"string\">'./app/services/middleware/fs-chmod-shell.js'</span>);</span><br><span class=\"line\">fsChmodShell();</span><br></pre></td></tr></table></figure>\n<h3 id=\"感谢阅读，如有错误，还请指正：\"><a href=\"#感谢阅读，如有错误，还请指正：\" class=\"headerlink\" title=\"感谢阅读，如有错误，还请指正：- )\"></a>感谢阅读，如有错误，还请指正：- )</h3>"},{"title":"Ubuntu18.04踩坑记录","catalog":true,"toc_nav_num":true,"date":"2018-04-04T08:30:35.000Z","subtitle":"ubuntu18.04 linux","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-04-04T08:30:35.000Z","_content":"\n![welcome / home](/blogs/img/article/Ubuntu18.04-1.jpg)\n\n#### 目录\n__________\n\n* Wine应用启动后出现WineSystemTray 托盘的问题\n* 中文环境下将Home目录下的文件夹切换为英文名\n* Ubuntu系发行版安装deepin wine QQ\n* 续：安装QQ/微信\n* Ubuntu 18.04开机启动特别慢的问题\n* 终端oh-my-zsh配置\n* 终端终结者Terminator配置\n* 禁用内核更新\n* 终端常用等宽字体\n* crossover18破解\n* vim插件配置\n* Ubuntu18.04 定制Mac主题\n* Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n* Ubuntu18.04 关于定制plymouth主题来更换开机动画\n* Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n* Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n* Ubuntu18.04 解决一些软件依赖不满足问题的问题\n* Ubuntu18.04 安装cinnamon桌面启动器\n* Linux分区过小导致后期容量不足解决方法\n* Shadowsocks-Qt5安装的问题\n* 使用polipo开启终端代理(需要先开启shadowsocks代理)\n* 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n* 自定义shadowsocks服务开机自启动脚本\n* Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n* Atom编辑器内存占用过大的问题\n* Grub2 主题安装\n* Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n* Ubuntu18.04 WPS 提示字体缺失的解决方法\n* Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n* Ubuntu18.04 更新Gnome版本\n* Win10 + Ubuntu18.04 双系统时间显示不对\n* Ubuntu18.04 安装系统时说明(双硬盘)\n* Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题\n* Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n* Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n* Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n* Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n* Ubuntu18.04 Gnome-Shell 插件\n* Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n* Ubuntu18.04 主题\n* chrome实用插件整理\n* 实用程序和命令\n* 实用网站推荐\n\n#### Wine应用启动后出现WineSystemTray托盘的问题\n____________________________________________\n![wine_tray.png](/blogs/img/article/Ubuntu18.04-2.png)\n\n![tray.png](/blogs/img/article/Ubuntu18.04-3.png)\n1. 操作系统Linux Mint18.3\n右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。\n\n2. 操作系统Ubuntu 18.04\n安装gnome-shell插件 [TopIcons](https://extensions.gnome.org/extension/495/topicons/), 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (`sudo apt install chrome-gnome-shell` )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件[Dash to Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/)解决。\n\n#### 中文环境下将Home目录下的文件夹切换为英文名\n-------------------------------------------------------------------------\n1.  设置英文语言环境\n```sh\n$: export LANG=en_US(恢复-> zh_CN)\n```\n2. 更新目录\n```sh\n$: xdg-user-dirs-gtk-update\n```\n3. 弹出提示框点击 [确认]\n4. 重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改\n\n#### Ubuntu系发行版安装deepin wine QQ\n__________________________________\n\n1. 安装deepin-wine环境：上[https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu](https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu)页面下载zip包（或用git方式克隆），也可以[百度网盘](https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg)下载，解压到本地文件夹，在文件夹中打开终端，输入`sudo sh ./install.sh`一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。\n\n2. 安装deepin.com应用容器：在[http://mirrors.aliyun.com/deepin/pool/non-free/d/](http://mirrors.aliyun.com/deepin/pool/non-free/d/)中下载想要的容器，点击deb安装即可，以下为推荐容器:\n*   QQ：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/)\n*   TIM：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/)\n*   QQ轻聊版：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/)\n*   微信：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/)\n*   Foxmail：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/)\n*   百度网盘：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/)\n*  360压缩：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\n*  迅雷急速版:  https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\n* Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。\n\n#### 续：安装QQ/微信\n______________________\n\n1.linux上的微信大部分都是网页版微信封装的: [electronic-wechat](https://github.com/geeeeeeeeek/electronic-wechat)、[weweChat](https://github.com/trazyn/weweChat)，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。\n\n2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现`\"WeChatWin.dll 缺失问题\"`报错信息，需要执行下面命令安装额外的环境：\n```sh\n$: apt-get install libldap-2.4-2:i386\n```\n\n3.使用docker安装[Tim](https://hub.docker.com/r/bestwu/qq) 和 [wechat](https://hub.docker.com/r/bestwu/wechat)，[docker环境安装教程](https://www.runoob.com/docker/ubuntu-docker-install.html)\n\n4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件[riched20.dll](https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA)(提取密码：rofj)替换掉微信所在容器下的C盘的`/windows/system32/riched20.dll`，容器路径一般在：`~/.cxoffice/[你的容器名]/drive_c/`。\n\n5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。\n\n6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 `sudo apt install libjpeg62:i386`，临时解决办法是把图片文件拖动到`收藏`，然后从收藏转发即可。\n\n7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。\n\n#### Ubuntu 18.04开机启动特别慢的问题\n_________________________________\n=> 禁用不必要的开机服务：\n```sh\n# 列出程序开机占用时间排行\nsystemd-analyze blame\n# 禁用plymouth\nsudo systemctl mask plymouth-start.service\nsudo systemctl mask plymouth-read-write.service\n```\n#### 终端oh-my-zsh配置\n_________________________________\n1. 主题\n* gnzh(已使用))\n* ys \n* avit\n* af-magic\n2. 插件\n* git => 自带git状态插件\n* svn => svn状态插件\n* colored-man-pages => man帮助信息高亮\n* zsh-syntax-highlighting => 命令高亮和错误提示\n* z => 自动记录路径快捷跳转\n* zsh-autosuggestions => 根据输入记录自动建议可选输入命令\n\n#### 终端终结者Terminator配置\n---------------------------\n特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局\n\n注意：可以配合`设置->设备->键盘->添加自定义快捷键`这样自定义快捷键来启动终端，\n比如设置`Ctrl+Alt+T`为`terminator --geometry=93x32+450+300`，geometry为窗口的布局配置。\n\n覆盖文件`~/.config/terminator/config`内容：\n\n```bash\n  [global_config]\n  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler\n  suppress_multiple_term_dialog = True\n  title_hide_sizetext = True\n[keybindings]\n  prev_tab = <Alt>1\n  reset_clear = <Primary><Shift>g\n  clear = <Primary>l\n  switch_to_tab_1 = <Alt>1\n  switch_to_tab_2 = <Alt>2\n  switch_to_tab_3 = <Alt>3\n  switch_to_tab_4 = <Alt>4\n  switch_to_tab_5 = <Alt>5\n  toggle_scrollbar = None\n  toggle_zoom = <Primary><Shift>x\n[layouts]\n  [[default]]\n    [[[child1]]]\n      parent = window0\n      profile = default\n      type = Terminal\n    [[[window0]]]\n      parent = \"\"\n      size = 925, 570\n      type = Window\n[plugins]\n  [[CustomCommandsMenu]]\n    [[[清屏]]]\n      command = clear\n      enabled = True\n      name = 清屏\n      position = 0\n[profiles]\n  [[default]]\n    allow_bold = False\n    background_color = \"#fbfbfb\"\n    background_darkness = 0.93\n    background_type = transparent\n    copy_on_selection = True\n    cursor_color = \"#aaaaaa\"\n    cursor_shape = ibeam\n    font = Ubuntu Light 12\n    foreground_color = \"#49494a\"\n    palette = \"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"\n    scroll_on_keystroke = False\n    scrollbar_position = hidden\n    show_titlebar = False\n```\n\n#### 禁用内核更新\n------------------------\n```sh\n# 查看已安装内核\n$: dpkg --get-selections |grep linux-image\n# 查看正在使用的内核\n$: uname -a\n# 删除旧内核\n$: sudo apt-get remove\n$: linux-image-x.xx.x-xx-generic\n$: sudo apt-get remove  \n$: linux-image-extra-x.xx.x-xx-generic  \n# 或用这个命令移除\n$: sudo dpkg --purge linux-image-x.x.x-xx-generic\n# 禁止更新内核，需时间来验证\n$: sudo apt-mark hold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic\n# 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：\n$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic\n```\n\n#### 终端常用等宽字体\n-----------------------------\n* AR PL UKai CN 12\n* Bitstream Vera Sans Mono 10\n* Courier 10 Pitch 11\n* DejaVu Sans Mono 10\n* FreeMono 11\n* Nimbus Mono L 12\n* TlwgMono 11 \n\n#### crossover18破解\n----------------------------\n下载 [CrossoverPatch](https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g ) `密码: ffp0`，解压后替换文件：\n```sh\n#  备份原文件\n$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak\n# 替换文件\n$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine\n```\n\n#### vim插件配置\n______________\n1. [Vundle](https://github.com/VundleVim/Vundle.vim) => 插件管理器，编辑.vimrc，然后执行命令`vim +PluginInstall`即可安装  \n2. [vim-airline](https://github.com/vim-airline/vim-airline) => 底部状态栏  \n3. [其他配置](https://juejin.im/post/5a38c37f6fb9a0450909a151)\n\n#### Ubuntu18.04 定制Mac主题\n__________________________\n\n![overview.png](/blogs/img/article/Ubuntu18.04-5.png)\n\n![desktop.png](/blogs/img/article/Ubuntu18.04-6.png)\n\n\n1. 安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (`sudo aptitude install [name]`)\n2. 安装GTK3主题 => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n3. 使用tweak载入应用程序主题 => tweak -- 外观 -- 应用程序 -- 选择X-Arc-Collection\n4. 安装gnome-shell 主题 => [macOS High Sierra](https://www.gnome-look.org/p/1167049/)\n5. 安装gnome-shell 插件 => [User Themes](https://extensions.gnome.org/extension/19/user-themes/) ( 之后重启Gnome => [Alt + F2] & [输入 r] & [点击 Enter] )\n6. 使用tweak载入shell主题 => tweak -- 外观 -- shell -- 选择Sierra shell主题\n7.  下载Mac图标主题 [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases) 或 [McMojave-circle](https://www.pling.com/p/1305429/)\n8. 图标文件夹移动到 ~/.icons目录下(没有则新建目录)\n9. 使用tweak载入icon主题 => tweak -- 外观 -- 图标 -- 选择对应的图标主题\n10. 安装gnome-shell插件 => Dash to dock (将原生dock转变为可定制的浮动dock)\n11. 定制firefox主题 => [Majave-gtk-theme](https://github.com/vinceliuice/Mojave-gtk-theme)\n\n#### Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n--------------------------------------------------------------------------------------------\n![lockscreen.png](/blogs/img/article/Ubuntu18.04-7.png)\n\n![loginscreen.png](/blogs/img/article/Ubuntu18.04-8.png)\n\n1. 安装脚本 => [github / nojsja / login-manager-config-ubuntu](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu)  \n2. 说明=> 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的`convert -blur`命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装`gnome-tweak-tool`进行更改。  \n3. 之前我想通过更改`/usr/share/gnome-shell/theme/gdm3.css`文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。\n4. 注意=> 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。\n\n#### Ubuntu18.04 关于定制plymouth主题来更换开机动画\n-----------------------------------------------------------------------------\n>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去[gnome-look](https://www.gnome-look.org/browse/cat/108/)看看，这里提供一个苹果主题[darwin](https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ)，密码: `rc6u`。\n1. 解压下载的plymouth主题到 `/usr/share/plymouth/themes`\n\n2. 执行安装\n```sh\n$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100\n```\n\n3. 更新配置，需要手动选择plymouth编号\n```sh\n$: sudo update-alternatives --config default.plymouth\n$: sudo update-initramfs -u\n```\n\n4. 手动更改错误路径参数\n```sh\n$: sudo gedit /usr/share/plymouth/themes/default.plymouth\n```\n替换`ImageDir`和`ScriptFile`为正确的plymouth文件存放路径，替换后：\n```sh\nImageDir=/usr/share/plymouth/themes/[THEME]\nScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script\n```\n\n\n#### Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n---------------------------------------------------------------------------------------------\n>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。  \n\n![dock-noise.png](/blogs/img/article/Ubuntu18.04-9.png)\n\n![dock-single.png](/blogs/img/article/Ubuntu18.04-10.png)\n\n\n\n#### Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n________________________________________________________\n![dock-tweak.png](/blogs/img/article/Ubuntu18.04-11.png)\n\n1. 打开 软件与更新\n2. 选择那个源点击编辑\n3. 更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)\n\n#### Ubuntu18.04 解决一些软件依赖不满足问题的问题\n____________________________________________\n=> 以Ubuntu18.04安装16.04版本网易云音乐为例\n```ssh\n# gdebi安装包\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb\n$: Dependency is not satisfiable: libqt5libqgtk2\n# Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，\n# 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题\n```\n=> 方法：解压安装包修改依赖项并重新打包\n=> 步骤：\n1. deb包同级目录下创建文件夹\n```ssh\n$: mkdir netease-cloud-music\n```\n2. 解压安装包到这个文件夹中\n```ssh\n$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music\n```\n3. 解压控制信息\n ```ssh\n$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music/DEBIAN/\n```\n4. 修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)\n```ssh\n# vim编辑文件\n$: vim neteas-cloud-music/DEBIAN/control\n# 使用vim正则对libqt5libqgtk2进行搜索替换\n:1,$s/libqt5libqgtk2/qt5-style-plugins/g\n# 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可\n```\n5. 生成新的安装包\n```ssh\n$: dpkg-deb -b neteas-cloud-music\n$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n6. 安装\n```ssh\n# 使用gdebi或dpkg进行安装即可\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n\n#### Ubuntu18.04 安装Cinnamon桌面启动器\n-------------------------------------\n>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。\n\n已知问题：\n* Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便\n* 输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音\n* 默认没有集成蓝牙管理器，需要安装`blueman`进行蓝牙管理\n* 锁屏界面可能会非常卡顿\n* Cinnamon面板(等同gnome任务栏)默认安装了`系统托盘`，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示\n* Cinnamon桌面动画性能也很低效，建议强制使用独立显卡\n\n安装步骤：\n1. 添加仓库Key\n```bash\n$: sudo add-apt-repository ppa:embrosyn/cinnamon  \n$: sudo apt update && sudo apt install cinnamon\n```\n2. 安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境\n3. 卸载cinnamon\n```bash\n$: sudo apt-get install ppa-purge\n$: sudo ppa-purge ppa:embrosyn/cinnamon\n```\n\n\n#### Linux分区过小导致后期容量不足解决方法\n------------------------------------\n=> 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了\n\n* 方法1\n```sh\n$: sudo apt-get clean\n$: sudo apt-get autoremove\n```\n如果仍然空间不足，使用方法2。\n* 方法2\n建立目录软链接解决(软链接和硬链接了解一下)：\n```sh\n# 以/var目录为例 将占用过大的文件夹移出\n$: mv /var/lib /opt\n# 建立opt下的lib内目录的软链接到var目录\n$: sudo ln -s /opt/lib /var\n```\n* 方法3\n如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。\n\n#### Shadowsocks-Qt5安装的问题\n________________________\n> shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 __软件源提示没有Release文件的问题__，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为`artful`，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。  \n\n\\> sudo add-apt-repository ppa:hzwhuang/ss-qt5  \n\\> sudo apt update  \n\\> sudo apt-get install shadowsocks-qt5  \n\n#### 使用polipo开启终端代理(需要先开启shadowsocks代理)\n________________________________________________\n* 安装脚本(适合于bash和zsh终端) => [github / nojsja / polipo-install-config.sh\"](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal)\n* 使用方式  \n\\> 说明：' hp ' == ' http_proxy=http://localhost:8123 ' for any command  \n\\> 说明：' gp ' == 'http.proxy=localhost:8123' for git proxy config  \n\\> 使用1：`hp curl ip.gs`\n\\> 使用2：`git clone https://android.googlesource.com/tools/repo --config $gp`\n* 如果polipo启动报错的话(通过`systemctl status polipo`查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(`/etc/polipo/config`)禁用日至记录功能\n#### 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n_______________________________________________________\n>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。\n\n=> 安装脚本(测试环境ubuntu18.04) => [github / nojsja / makeIconLink](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/application)\n=> 使用方式\n* 安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内\n* 查看说明：\n```sh\n$: bash makeIconLink --help\n```\n* 安装指令：\n```sh\n$: bash makeIconLink --dir /path/to/[exec-file] --target [exec-file-name] --icon [icon-file-name]\n```\n* 卸载指令：\n```sh\n$: bash makeIconLink --uninstall [exec-file-name]\n```\n\n#### 自定义shadowsocks服务开机自启动脚本\n-------------------------------------------------------------\n> 使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~\n\n=> 我的服务脚本：[startup.sh](https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/startup.sh)、[shadowsocks](https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/shadowsocks)  \n=> 步骤：\n\n* 编写shadowsocks service脚本文件，比如shadow.service\n\n```sh\n[Unit]\n# 描述\nDescription=Shadowsocks Service\n\n[Service]\nType=oneshot\n# 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)\nExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start\nExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop\nRemainAfterExit=yes\n\n[Install]\n# 一些简单的依赖信息\nWantedBy=multi-user.target\n```\n\n* 将服务配置文件放到`/etc/systemd/system`下  \n\\> sudo cp shadow.service /etc/systemd/system\n* 设置服务自启动  \n\\> systemctl enable shadow\n* 服务开启和关闭  \n\\> systemctl start shadow  \n\\> systemctl stop shadow\n\n#### Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n________________________\n=> 先来一个shadowsocks全局pac代理的步骤：\n```sh\n# pip需要先安装\n$: sudo apt-get install python-pip python-dev build-essential\n$: sudo pip install --upgrade pip\n$: sudo pip install --upgrade virtualenv\n# 安装pac自动生成程序\n$: sudo pip install genpac\n# 生成pac文件\n$: mkdir ~/shadowsocks\n$: cd shadowsocks\n# proxy配置中的地址和端口具体要看你的shadowsocks连接配置\n$: genpac --proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" -o autoproxy.pac --gfwlist-url=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"\n```\n以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -> 网络 -> 网络代理 -> 自动 -> 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。\n=> 再写一个脚本[genpac-command](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac)，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件\n```sh\n# # 在脚本目录下执行\n# 显示帮助信息\n$: bash genpac-command --help\n# 在线更新\n$: bash genpac-command --update-online\n# 从本地user-rules.txt文件读取更新\n$: bash genpac-command --update-local\n# 添加自定义规则\n$: bash genpac-command --add-rules opendesktop.org\n# 添加多个自定义规则\n$: bash genpac-command --add-rules opendesktop.org atom.io\n# 删除自定义规则\n$: bash genpac-command --del-rules opendesktop.org\n# 删除多个自定义规则\n$: bash genpac-command --del-rules opendesktop.org atom.io\n```\n=> __不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：__\n\n#### Atom编辑器内存占用过大的问题\n______________________________\n>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。\n\n#### Grub2 主题安装\n_________________\n![source.png](/blogs/img/article/Ubuntu18.04-12.png)\n>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。\n\n1. 解压下载的主题文件 => [Vimix](https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ)，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)\n2. 在/boot/grub里创建GRUB2主题目录themes\n\\> sudo mkdir -p /boot/grub/themes\n3. 将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下\n\\> sudo cp -r Vimix /boot/grub/themes\n4. 修改/etc/default/grub配置文件\n\\> sudo gedit /etc/default/grub\n在文件最后添加：GRUB_THEME=\"/boot/grub/themes/Vimix/theme.txt\" 并保存\n5. 更新GRUB\n\\> sudo update-grub\n6. 重启即生效(如果重启卡住请强制关机后再启动)\n\n#### Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n_________________________________________________________\n![firefox_proxy.png](/blogs/img/article/Ubuntu18.04-13.png)\n\n1. [sourceforge](http://sourceforge.net/projects/corefonts/files/the%20fonts/final/)下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n2. 运行字体配置程序\n\\> sudo dpkg-reconfigure ttf-mscorefonts-installer\n3. 在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n\n#### Ubuntu18.04 WPS 提示字体缺失的解决方法\n---------------------------------------\n下载缺失的字体文件[fonts](https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q) (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：\n```sh\n# 生成字体的索引信息\n$: sudo mkfontscale\n$: sudo mkfontdir\n# 更新字体缓存\n$: sudo fc-cache\n```\n\n#### Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n------------------------------------------------------\n安装`xfce4-clipman`，每次使用深度截图时保证它开启\n```sh\n$: sudo apt install xfce4-clipman\n```\n\n#### Ubuntu18.04 更新Gnome版本\n---------------------------------------\n```sh\n# Upgrade\n#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:\n$: sudo ppa-purge ppa:gnome3-team/gnome3-staging\n$: sudo ppa-purge ppa:gnome3-team/gnome3\n$: sudo apt install ubuntu-gnome-desktop^\n# The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:\n$: update-manager -c\n# Alternatively, run the following command:\n$: sudo do-release-upgrade\n```\n\n\n#### Win10 + Ubuntu18.04 双系统时间显示不对\n______________________________________\n>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。\n\n1. 先在Ubuntu下更新一下时间\n\\> sudo apt-get install ntpdate\n\\> sudo ntpdate time.windows.com\n2. 将时间更新到硬件上\n\\> sudo hwclock --localtime --systohc\n3. 关闭linux重新进入windows系统，发现时间正常了\n\n#### Ubuntu18.04 安装系统时说明(双硬盘)\n______________________________________________\n> 主要分为 [ _GPT磁盘分区+UEFI引导方案_ ] 和 [ _传统MBR磁盘分区 + LEGANCY引导方案_ ]\n1. 方案一(兼容方案 gpt+uefi / mbr+legancy)\n使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配\"/boot \"分区，分配一个大小为1GB左右的\"保留bios启动区域\"(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区\"/\"，8G内存的情况下最好还是分配8G的swap交换分区，另外除了\"保留bios启动区域\"为主分区，其它分区均为逻辑分区，最后一步很重要 -- 格式化每个分区，要不然安装很可能会出错！[参考](https://blog.csdn.net/jesse_mx/article/details/61425361\n)\n2. 方案二(gpt+uefi 已使用方案)\n创建\"efi系统分区\"，同时不需要划分\"/boot\"分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分\"/\"根分区，除了根分区所有分区都为逻辑分区，最后选择\"安装启动引导器的设备\"为刚才创建的\"efit系统分区\"。\n3. 方案三(传统mbr+legancy方案)\n传统的legancy + mbr的安装，至少划分\"/boot\"分区(主分区) 和 \"/\"根分区，其余的分区按需划分，最后选择\"安装启动引导器的设备\"为创建的\"/boot\"挂载点。\n\n#### Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题\n[=> 原帖子](https://askubuntu.com/questions/1030867/how-to-diagnose-fix-very-slow-boot-on-ubuntu-18-04)\n1. 编辑文件 `/etc/default/grub` 的 `GRUB_CMDLINE_LINUX_DEFAULT` 这一行，加入一个参数__noresume__\n```sh\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash noresume\"\n```\n2. 更新grub\n```sh\n$: sudo update-grub\n```\n3. 重启电脑\n\n#### Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n_________________________________________________\n* 使用root权限命令行后台启动并且屏蔽输出\n\\> sudo netease-cloud-music > /dev/null 2>&1  &\n* 规避session-manager引起的bug\n\\> alias netease='unset SESSION_MANAGER && netease-cloud-music'\n\\> netease > /dev/null &\n* 别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端[ieaseMusic](https://github.com/trazyn/ieaseMusic)\n* 这里还有个别人做的针对ubuntu18.04的[重新构建版本](https://github.com/innoob/netease-cloud-music)，可以正常使用，也没有重复登录的bug\n\n\n#### Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n______________________________________________\n>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符  \n\n使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的[ume-ui-gothic.ttf](https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA)字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。\n\n#### Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n_______________________________________________________\n=> 错误信息：`Error: Requiring Clutter, version none: Typelib file for namespace 'Clutter' (any version) not found ...`  \n=> 原因分析：该插件需要的依赖Clutter尚未安装\n=> 解决方法：\n```sh\n# 安装依赖\n$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0\n```\n\n#### Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n---------------------------------------\nubuntu18.04已经移除了gksu软件，所以使用替代命令\n1. 添加alias命令\n```bash\n$: alias gksu='pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'\n```\n2. 编辑错误报告相关设置  \n```bash\n$: gksu gedit /etc/default/apport\n# 把`enable = 1`改为`enable = 0`\n```\n\n#### Ubuntu18.04 Gnome-Shell 插件\n______________________________________________\n* [CoverFlow Alt-Tab](https://extensions.gnome.org/extension/97/coverflow-alt-tab/) => 窗口Tab切换预览(★★★★☆)\n* [User Themes(必要)](https://extensions.gnome.org/extension/19/user-themes/) => 用户主题安装(★★★★★)\n* [Dash To Dock](https://extensions.gnome.org/extension/307/dash-to-dock/) => dock栏(★★★★★)\n* [Dash To Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/) => 将dock和顶栏显示在一起(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)\n* [Autohide Battery](https://extensions.gnome.org/extension/595/autohide-battery/) => 电池充满并连接电源时自动隐藏电池按钮(★★★★★)\n* [Places Status Indicator](https://extensions.gnome.org/extension/8/places-status-indicator/) => 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)\n* [Removable Drive Menu](https://extensions.gnome.org/extension/7/removable-drive-menu/) => 顶部任务栏显示可移除的已挂载设备(★★★★★)\n* [Suspend Button](https://extensions.gnome.org/extension/826/suspend-button/) => 顶部菜单栏显示休眠按钮(★★★★★)\n* [TopIcons](https://extensions.gnome.org/extension/495/topicons/) => 顶部通知图标托盘(★★★★★)\n* [TopIconsPlus](https://extensions.gnome.org/extension/1031/topicons/) => 顶部通知图标托盘，自定义图标显示参数(★★★★☆)\n* [Blyr](https://extensions.gnome.org/extension/1251/blyr/) => 模糊应用预览背景图(★★★★★)\n* [Activities Configurator](https://extensions.gnome.org/extension/358/activities-configurator/) => 配置左上角活动按钮(★★★★☆)\n* [Workspace to Dock](https://extensions.gnome.org/extension/427/workspaces-to-dock/) => 将工作区转换为悬浮dock(★★★★★)\n* [Extensions](https://extensions.gnome.org/extension/1036/extensions/) => 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)\n* [Clipboard Indicator](https://extensions.gnome.org/extension/779/clipboard-indicator/) => 可视化剪贴板(★★★★★)\n* [Sound Input & Output Device Chooser](https://extensions.gnome.org/extension/906/sound-output-device-chooser/) => 声音输入和输入设备快速选择(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 取消“窗口已就绪”提示直接提升窗口(★★★★★)\n* [Bluetooth quick connect](https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/) => 蓝牙设备快速连接和断开(★★★★★)\n* [Remove Alt+Tab Delay](https://extensions.gnome.org/extension/1403/remove-alttab-delay/) => 移除【Alt + Tab】的开启应用预览延迟(★★★★★)\n* [Emoji Selector](https://extensions.gnome.org/extension/1162/emoji-selector/) => 快速选择Emoji表情(★★★★)\n\n#### Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n--------------------------------------------\n```sh\n#Use Custom Dock Indicator ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots false\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots false\n_______________________________________________________________________________________________\n\n# Disable Custom Dock Shrink ( Required for Good looking) (  Required )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-shrink false\n_______________________________________________________________________________________________\n\n# Dock Transparency mode ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT\n_______________________________________________________________________________________________\n\n# Restore to Default\n$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/\n_______________________________________________________________________________________________\n```\n\n#### Ubuntu18.04 主题\n______________________________________________\n* GTK3主题(★★★★☆) => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n* GTK3主题(★★★★★) => [McOS-themes](https://www.gnome-look.org/p/1241688)\n* Gnome Shell主题(★★★★) => [Flat-Remix](https://github.com/daniruiz/flat-remix)\n* Gnome Shell主题(★★★☆) => [Human](https://www.gnome-look.org/p/1171095/)\n* Gnome Shell主题(★★★★★) => [macOS High Sierra](https://www.opendesktop.org/c/1460761561)\n* Gnome Shell主题(?) => [macOS High Sierra](https://www.gnome-look.org/p/1213208/)\n* Icon 主题(★★★★) => [flat-remix](https://github.com/daniruiz/flat-remix/releases)\n* Icon 主题(★★★★☆) => [Mac OS X Icon](https://www.gnome-look.org/p/1012200/)\n* Icon 主题(★★★★★) => [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases)\n* Icon 主题(★★★★★) [McMojave-circle](https://www.pling.com/p/1305429/)\n* Icon 主题(★★★★☆) => [MacOS sierra ct](https://github.com/zayronxio/Macos-sierra-CT)\n* Cursor主题(★★★★☆) => [Capitaine Cursors](https://krourke.org/projects/art/capitaine-cursors)\n\n#### chrome实用插件整理\n-----------------------------------\n* [infinity pro 标签页](https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab) => 主页标签管理器(★★★★★)\n* [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab) => github仓库文件资源浏览树(★★★★★)\n* [Postman](https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab) => API测试和请求模拟器(★★★★★)\n* [SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab) => 大家都用的代理软件(★★★★★)\n* [印象笔记剪藏](https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab) => 随时随地把网络资源保存到你的笔记本里(★★★★★)\n* [SimpRead](https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab) => 让浏览器支持纯净的阅读模式(★★★★★)\n* [Full Page Screen Capture](https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab) => 全屏截图(★★★★☆)\n* [油猴tampermonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab) => 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)\n* [Checker Plus for Gmail](https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab) => Google邮件提示插件(★★★★☆)\n* [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab) => 让google浏览器支持vim模式(firefox也有)(★★★★★)\n* [拷贝为Markdown](https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg) => 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)\n\n#### 实用程序和命令\n_______________________________\n* [fonts-firacode编程字体](https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager) => 解决vscode字体间隙过小的问题`sudo apt install fonts-firacode`\n* [vivaldi浏览器](https://vivaldi.com) => 可定制化程度高的个性化浏览器(★★★★★)\n* Terminator => 默认gnome终端升级版(★★★★★)\n* Timeshift => 创建系统快照，增量备份(★★★★★)\n* ipython3(命令工具) => python交互解释器(★★★★★)\n* jupyter => 交互式数据分析和记录工具(★★★★☆)\n* pdb/ipdb(命令工具) => python调试器(★★★★☆)\n* trash-cli(命令工具) => 命令行回收站(★★★★★)\n* bat(命令工具) => cat升级版，支持语法高亮和git状态显示(★★★★★)\n* axel(命令工具) => 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)\n* [aria2(命令工具)](https://github.com/aria2/aria2) => 强大的命令行下载工具\n* [stacer](https://github.com/oguzhaninan/Stacer) => linux电脑管家(★★★★★)\n* [ieaseMusic](https://github.com/trazyn/ieaseMusic) => 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆\\[注：网易云音乐官方已修复]，界面还很酷(★★★★★)\n* parallel(命令工具) => 利用系统的多核来并行执行你的程序(★★★★☆)\n* cheat(命令工具) => 类似man命令的功能，简洁高效(★★★★☆)\n* topgrade(命令工具) => 一个命令更新所有软件(★★★★)\n* [dbKoda](https://www.dbkoda.com/) => mongodb GUI工具(★★★★☆)\n* [mongodb compass](https://www.mongodb.com/products/compass) => mongodb GUI工具(★★★★)\n* [peek](https://github.com/phw/peek) => 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)\n* tmux => 终端管理器(★★★★)\n* 深度终端(ubuntu商店下载) => 支持分屏，内置实用主题(★★★★☆)\n* 深度截图(ubuntu商店下载) => 支持截图编辑(★★★★★)\n* flameshot => 支持Ubuntu20.04的截图编辑工具(★★★★★)\n* [WebTorrent](https://webtorrent.io/desktop/)、[FrostWire](https://www.frostwire.com/) => bt下载工具，支持边下边播(★★★★)\n* [SmartGit](https://www.syntevo.com/smartgit/) => linux平台免费的GIT GUI工具(★★★★★)\n* FileZilla => ftp工具(★★★★★)\n* [e-tools](https://github.com/Suremotoo/e-tools) => coder常用小工具(★★★★)\n* [WhatEver](https://electronjs.org/apps/whatever) => linux第三方印象笔记客户端，基于网页版(★★★★)\n* [wps](http://linux.wps.cn/) => linux office for free made by KingSoftware(★★★★★)\n* [Atom](https://atom.io/) => 我一直在用的编辑器，没有固态硬盘的不推荐使用(★★★★☆)\n* [vscode](https://code.visualstudio.com/) => 轻量化编辑器，没有Atom人性化，但是很快。都是JS写的，性能差距咋这么大呢 ? (★★★★★)\n* ndb => node.js/javascript 调试器(★★★★★)\n* [nvm](https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh) => nodejs版本管理器\n* albert (添加软件源 `ppa:noobslab/macbuntu` 安装 ) => 桌面全局搜索类似Mac系统的SpotLight(★★★★★)\n* [lftp](https://linux.cn/article-5460-1.html) => 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比\n如：多线程下载、断点续传\n* [redshift-gtk](http://jonls.dk/redshift/) 护眼模式，自带的色彩太黄了\n* apt-fast => 比apt更快的包管理器，添加`ppa:apt-fast/stable`安装(★★★★★)\n* nautilus action configure tool => 资源管理器右键菜单自定义，添加`ppa:daniel-marynicz/filemanager-actions`安装(★★★★★)\n* tig => 可交互的命令行git命令(★★★★★)\n* shellcheck => shell脚本语法检查(★★★★★)\n* [Motrix](https://motrix.app/zh-CN/) => 全平台下载工具，用于替代迅雷(★★★★★)\n* [Insync](https://www.insynchq.com/) => 全平台同步工具，支持google云和onedrive(★★★★★)\n* [Timeshift](https://github.com/teejee2008/timeshift) => 创建系统增量备份计划(★★★★★)\n* dconf-editor => gnome桌面配置gui工具(★★★★)\n\n#### 实用网站推荐\n_______________\n![Vimix.png](/blogs/img/article/Ubuntu18.04-14.png)\n\n* [Wallpaper](https://wallpapershome.com/)  => 高清桌面壁纸下载，支持多种分辨率(★★★★★)\n* [flaticon](https://www.flaticon.com) => 免费图标下载网站，支持svg和png两种格式\n* [Electron Apps](https://electronjs.org/apps) => 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)\n* [Linux运维日志](https://www.centos.bz/) => 服务搭建、Linux技术之类的(★★★★☆)\n* [IBM Developer](https://www.ibm.com/developerworks/cn/) => 技术文档类的参考(★★★★★)\n* [Linux常用命令](https://www.lulinux.com/archives/2513#awk)  =>  常用命令速查(★★★★☆)\n* [bilibili工具网站](https://www.kanbilibili.com/) => 支持 视频/弹幕/封面 下载等骚操作(★★★★★)\n* [Linux中国](https://linux.cn/) => 没事儿就上去看看别人翻译转载的文章(★★★★☆)\n* [TinyPNG](https://tinypng.com/) => 免费的图片无损压缩网站(★★★★☆)\n* [iLoveIMG](https://www.iloveimg.com/zh-cn) => 在线图片编辑网站(★★★★★)\n* [savefrom](https://en.savefrom.net/) => 直接下载youtube视频(★★★★☆)\n* [撸Linux](https://www.lulinux.com/) => 好像还蛮有趣的额(★★★★☆)\n* [油猴脚本](https://greasyfork.org/zh-CN/scripts) => 你甚至可以用来破解百度云限速(★★★★★)\n\n_注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合._","source":"_posts/Ubuntu18.04踩坑记录.md","raw":"---\ntitle: \"Ubuntu18.04踩坑记录\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-04-04 16:30:35\nsubtitle: \"ubuntu18.04 linux\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- ubuntu18.04\ncategories:\n- Linux\nupdateDate: 2018-04-04 16:30:35\n---\n\n![welcome / home](/blogs/img/article/Ubuntu18.04-1.jpg)\n\n#### 目录\n__________\n\n* Wine应用启动后出现WineSystemTray 托盘的问题\n* 中文环境下将Home目录下的文件夹切换为英文名\n* Ubuntu系发行版安装deepin wine QQ\n* 续：安装QQ/微信\n* Ubuntu 18.04开机启动特别慢的问题\n* 终端oh-my-zsh配置\n* 终端终结者Terminator配置\n* 禁用内核更新\n* 终端常用等宽字体\n* crossover18破解\n* vim插件配置\n* Ubuntu18.04 定制Mac主题\n* Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n* Ubuntu18.04 关于定制plymouth主题来更换开机动画\n* Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n* Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n* Ubuntu18.04 解决一些软件依赖不满足问题的问题\n* Ubuntu18.04 安装cinnamon桌面启动器\n* Linux分区过小导致后期容量不足解决方法\n* Shadowsocks-Qt5安装的问题\n* 使用polipo开启终端代理(需要先开启shadowsocks代理)\n* 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n* 自定义shadowsocks服务开机自启动脚本\n* Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n* Atom编辑器内存占用过大的问题\n* Grub2 主题安装\n* Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n* Ubuntu18.04 WPS 提示字体缺失的解决方法\n* Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n* Ubuntu18.04 更新Gnome版本\n* Win10 + Ubuntu18.04 双系统时间显示不对\n* Ubuntu18.04 安装系统时说明(双硬盘)\n* Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题\n* Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n* Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n* Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n* Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n* Ubuntu18.04 Gnome-Shell 插件\n* Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n* Ubuntu18.04 主题\n* chrome实用插件整理\n* 实用程序和命令\n* 实用网站推荐\n\n#### Wine应用启动后出现WineSystemTray托盘的问题\n____________________________________________\n![wine_tray.png](/blogs/img/article/Ubuntu18.04-2.png)\n\n![tray.png](/blogs/img/article/Ubuntu18.04-3.png)\n1. 操作系统Linux Mint18.3\n右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。\n\n2. 操作系统Ubuntu 18.04\n安装gnome-shell插件 [TopIcons](https://extensions.gnome.org/extension/495/topicons/), 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (`sudo apt install chrome-gnome-shell` )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件[Dash to Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/)解决。\n\n#### 中文环境下将Home目录下的文件夹切换为英文名\n-------------------------------------------------------------------------\n1.  设置英文语言环境\n```sh\n$: export LANG=en_US(恢复-> zh_CN)\n```\n2. 更新目录\n```sh\n$: xdg-user-dirs-gtk-update\n```\n3. 弹出提示框点击 [确认]\n4. 重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改\n\n#### Ubuntu系发行版安装deepin wine QQ\n__________________________________\n\n1. 安装deepin-wine环境：上[https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu](https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu)页面下载zip包（或用git方式克隆），也可以[百度网盘](https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg)下载，解压到本地文件夹，在文件夹中打开终端，输入`sudo sh ./install.sh`一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。\n\n2. 安装deepin.com应用容器：在[http://mirrors.aliyun.com/deepin/pool/non-free/d/](http://mirrors.aliyun.com/deepin/pool/non-free/d/)中下载想要的容器，点击deb安装即可，以下为推荐容器:\n*   QQ：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/)\n*   TIM：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/)\n*   QQ轻聊版：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/)\n*   微信：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/)\n*   Foxmail：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/)\n*   百度网盘：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/)\n*  360压缩：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\n*  迅雷急速版:  https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\n* Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。\n\n#### 续：安装QQ/微信\n______________________\n\n1.linux上的微信大部分都是网页版微信封装的: [electronic-wechat](https://github.com/geeeeeeeeek/electronic-wechat)、[weweChat](https://github.com/trazyn/weweChat)，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。\n\n2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现`\"WeChatWin.dll 缺失问题\"`报错信息，需要执行下面命令安装额外的环境：\n```sh\n$: apt-get install libldap-2.4-2:i386\n```\n\n3.使用docker安装[Tim](https://hub.docker.com/r/bestwu/qq) 和 [wechat](https://hub.docker.com/r/bestwu/wechat)，[docker环境安装教程](https://www.runoob.com/docker/ubuntu-docker-install.html)\n\n4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件[riched20.dll](https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA)(提取密码：rofj)替换掉微信所在容器下的C盘的`/windows/system32/riched20.dll`，容器路径一般在：`~/.cxoffice/[你的容器名]/drive_c/`。\n\n5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。\n\n6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 `sudo apt install libjpeg62:i386`，临时解决办法是把图片文件拖动到`收藏`，然后从收藏转发即可。\n\n7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。\n\n#### Ubuntu 18.04开机启动特别慢的问题\n_________________________________\n=> 禁用不必要的开机服务：\n```sh\n# 列出程序开机占用时间排行\nsystemd-analyze blame\n# 禁用plymouth\nsudo systemctl mask plymouth-start.service\nsudo systemctl mask plymouth-read-write.service\n```\n#### 终端oh-my-zsh配置\n_________________________________\n1. 主题\n* gnzh(已使用))\n* ys \n* avit\n* af-magic\n2. 插件\n* git => 自带git状态插件\n* svn => svn状态插件\n* colored-man-pages => man帮助信息高亮\n* zsh-syntax-highlighting => 命令高亮和错误提示\n* z => 自动记录路径快捷跳转\n* zsh-autosuggestions => 根据输入记录自动建议可选输入命令\n\n#### 终端终结者Terminator配置\n---------------------------\n特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局\n\n注意：可以配合`设置->设备->键盘->添加自定义快捷键`这样自定义快捷键来启动终端，\n比如设置`Ctrl+Alt+T`为`terminator --geometry=93x32+450+300`，geometry为窗口的布局配置。\n\n覆盖文件`~/.config/terminator/config`内容：\n\n```bash\n  [global_config]\n  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler\n  suppress_multiple_term_dialog = True\n  title_hide_sizetext = True\n[keybindings]\n  prev_tab = <Alt>1\n  reset_clear = <Primary><Shift>g\n  clear = <Primary>l\n  switch_to_tab_1 = <Alt>1\n  switch_to_tab_2 = <Alt>2\n  switch_to_tab_3 = <Alt>3\n  switch_to_tab_4 = <Alt>4\n  switch_to_tab_5 = <Alt>5\n  toggle_scrollbar = None\n  toggle_zoom = <Primary><Shift>x\n[layouts]\n  [[default]]\n    [[[child1]]]\n      parent = window0\n      profile = default\n      type = Terminal\n    [[[window0]]]\n      parent = \"\"\n      size = 925, 570\n      type = Window\n[plugins]\n  [[CustomCommandsMenu]]\n    [[[清屏]]]\n      command = clear\n      enabled = True\n      name = 清屏\n      position = 0\n[profiles]\n  [[default]]\n    allow_bold = False\n    background_color = \"#fbfbfb\"\n    background_darkness = 0.93\n    background_type = transparent\n    copy_on_selection = True\n    cursor_color = \"#aaaaaa\"\n    cursor_shape = ibeam\n    font = Ubuntu Light 12\n    foreground_color = \"#49494a\"\n    palette = \"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"\n    scroll_on_keystroke = False\n    scrollbar_position = hidden\n    show_titlebar = False\n```\n\n#### 禁用内核更新\n------------------------\n```sh\n# 查看已安装内核\n$: dpkg --get-selections |grep linux-image\n# 查看正在使用的内核\n$: uname -a\n# 删除旧内核\n$: sudo apt-get remove\n$: linux-image-x.xx.x-xx-generic\n$: sudo apt-get remove  \n$: linux-image-extra-x.xx.x-xx-generic  \n# 或用这个命令移除\n$: sudo dpkg --purge linux-image-x.x.x-xx-generic\n# 禁止更新内核，需时间来验证\n$: sudo apt-mark hold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic\n# 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：\n$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic\n```\n\n#### 终端常用等宽字体\n-----------------------------\n* AR PL UKai CN 12\n* Bitstream Vera Sans Mono 10\n* Courier 10 Pitch 11\n* DejaVu Sans Mono 10\n* FreeMono 11\n* Nimbus Mono L 12\n* TlwgMono 11 \n\n#### crossover18破解\n----------------------------\n下载 [CrossoverPatch](https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g ) `密码: ffp0`，解压后替换文件：\n```sh\n#  备份原文件\n$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak\n# 替换文件\n$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine\n```\n\n#### vim插件配置\n______________\n1. [Vundle](https://github.com/VundleVim/Vundle.vim) => 插件管理器，编辑.vimrc，然后执行命令`vim +PluginInstall`即可安装  \n2. [vim-airline](https://github.com/vim-airline/vim-airline) => 底部状态栏  \n3. [其他配置](https://juejin.im/post/5a38c37f6fb9a0450909a151)\n\n#### Ubuntu18.04 定制Mac主题\n__________________________\n\n![overview.png](/blogs/img/article/Ubuntu18.04-5.png)\n\n![desktop.png](/blogs/img/article/Ubuntu18.04-6.png)\n\n\n1. 安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (`sudo aptitude install [name]`)\n2. 安装GTK3主题 => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n3. 使用tweak载入应用程序主题 => tweak -- 外观 -- 应用程序 -- 选择X-Arc-Collection\n4. 安装gnome-shell 主题 => [macOS High Sierra](https://www.gnome-look.org/p/1167049/)\n5. 安装gnome-shell 插件 => [User Themes](https://extensions.gnome.org/extension/19/user-themes/) ( 之后重启Gnome => [Alt + F2] & [输入 r] & [点击 Enter] )\n6. 使用tweak载入shell主题 => tweak -- 外观 -- shell -- 选择Sierra shell主题\n7.  下载Mac图标主题 [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases) 或 [McMojave-circle](https://www.pling.com/p/1305429/)\n8. 图标文件夹移动到 ~/.icons目录下(没有则新建目录)\n9. 使用tweak载入icon主题 => tweak -- 外观 -- 图标 -- 选择对应的图标主题\n10. 安装gnome-shell插件 => Dash to dock (将原生dock转变为可定制的浮动dock)\n11. 定制firefox主题 => [Majave-gtk-theme](https://github.com/vinceliuice/Mojave-gtk-theme)\n\n#### Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n--------------------------------------------------------------------------------------------\n![lockscreen.png](/blogs/img/article/Ubuntu18.04-7.png)\n\n![loginscreen.png](/blogs/img/article/Ubuntu18.04-8.png)\n\n1. 安装脚本 => [github / nojsja / login-manager-config-ubuntu](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu)  \n2. 说明=> 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的`convert -blur`命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装`gnome-tweak-tool`进行更改。  \n3. 之前我想通过更改`/usr/share/gnome-shell/theme/gdm3.css`文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。\n4. 注意=> 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。\n\n#### Ubuntu18.04 关于定制plymouth主题来更换开机动画\n-----------------------------------------------------------------------------\n>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去[gnome-look](https://www.gnome-look.org/browse/cat/108/)看看，这里提供一个苹果主题[darwin](https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ)，密码: `rc6u`。\n1. 解压下载的plymouth主题到 `/usr/share/plymouth/themes`\n\n2. 执行安装\n```sh\n$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100\n```\n\n3. 更新配置，需要手动选择plymouth编号\n```sh\n$: sudo update-alternatives --config default.plymouth\n$: sudo update-initramfs -u\n```\n\n4. 手动更改错误路径参数\n```sh\n$: sudo gedit /usr/share/plymouth/themes/default.plymouth\n```\n替换`ImageDir`和`ScriptFile`为正确的plymouth文件存放路径，替换后：\n```sh\nImageDir=/usr/share/plymouth/themes/[THEME]\nScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script\n```\n\n\n#### Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n---------------------------------------------------------------------------------------------\n>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。  \n\n![dock-noise.png](/blogs/img/article/Ubuntu18.04-9.png)\n\n![dock-single.png](/blogs/img/article/Ubuntu18.04-10.png)\n\n\n\n#### Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n________________________________________________________\n![dock-tweak.png](/blogs/img/article/Ubuntu18.04-11.png)\n\n1. 打开 软件与更新\n2. 选择那个源点击编辑\n3. 更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)\n\n#### Ubuntu18.04 解决一些软件依赖不满足问题的问题\n____________________________________________\n=> 以Ubuntu18.04安装16.04版本网易云音乐为例\n```ssh\n# gdebi安装包\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb\n$: Dependency is not satisfiable: libqt5libqgtk2\n# Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，\n# 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题\n```\n=> 方法：解压安装包修改依赖项并重新打包\n=> 步骤：\n1. deb包同级目录下创建文件夹\n```ssh\n$: mkdir netease-cloud-music\n```\n2. 解压安装包到这个文件夹中\n```ssh\n$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music\n```\n3. 解压控制信息\n ```ssh\n$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music/DEBIAN/\n```\n4. 修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)\n```ssh\n# vim编辑文件\n$: vim neteas-cloud-music/DEBIAN/control\n# 使用vim正则对libqt5libqgtk2进行搜索替换\n:1,$s/libqt5libqgtk2/qt5-style-plugins/g\n# 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可\n```\n5. 生成新的安装包\n```ssh\n$: dpkg-deb -b neteas-cloud-music\n$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n6. 安装\n```ssh\n# 使用gdebi或dpkg进行安装即可\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n\n#### Ubuntu18.04 安装Cinnamon桌面启动器\n-------------------------------------\n>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。\n\n已知问题：\n* Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便\n* 输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音\n* 默认没有集成蓝牙管理器，需要安装`blueman`进行蓝牙管理\n* 锁屏界面可能会非常卡顿\n* Cinnamon面板(等同gnome任务栏)默认安装了`系统托盘`，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示\n* Cinnamon桌面动画性能也很低效，建议强制使用独立显卡\n\n安装步骤：\n1. 添加仓库Key\n```bash\n$: sudo add-apt-repository ppa:embrosyn/cinnamon  \n$: sudo apt update && sudo apt install cinnamon\n```\n2. 安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境\n3. 卸载cinnamon\n```bash\n$: sudo apt-get install ppa-purge\n$: sudo ppa-purge ppa:embrosyn/cinnamon\n```\n\n\n#### Linux分区过小导致后期容量不足解决方法\n------------------------------------\n=> 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了\n\n* 方法1\n```sh\n$: sudo apt-get clean\n$: sudo apt-get autoremove\n```\n如果仍然空间不足，使用方法2。\n* 方法2\n建立目录软链接解决(软链接和硬链接了解一下)：\n```sh\n# 以/var目录为例 将占用过大的文件夹移出\n$: mv /var/lib /opt\n# 建立opt下的lib内目录的软链接到var目录\n$: sudo ln -s /opt/lib /var\n```\n* 方法3\n如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。\n\n#### Shadowsocks-Qt5安装的问题\n________________________\n> shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 __软件源提示没有Release文件的问题__，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为`artful`，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。  \n\n\\> sudo add-apt-repository ppa:hzwhuang/ss-qt5  \n\\> sudo apt update  \n\\> sudo apt-get install shadowsocks-qt5  \n\n#### 使用polipo开启终端代理(需要先开启shadowsocks代理)\n________________________________________________\n* 安装脚本(适合于bash和zsh终端) => [github / nojsja / polipo-install-config.sh\"](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal)\n* 使用方式  \n\\> 说明：' hp ' == ' http_proxy=http://localhost:8123 ' for any command  \n\\> 说明：' gp ' == 'http.proxy=localhost:8123' for git proxy config  \n\\> 使用1：`hp curl ip.gs`\n\\> 使用2：`git clone https://android.googlesource.com/tools/repo --config $gp`\n* 如果polipo启动报错的话(通过`systemctl status polipo`查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(`/etc/polipo/config`)禁用日至记录功能\n#### 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n_______________________________________________________\n>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。\n\n=> 安装脚本(测试环境ubuntu18.04) => [github / nojsja / makeIconLink](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/application)\n=> 使用方式\n* 安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内\n* 查看说明：\n```sh\n$: bash makeIconLink --help\n```\n* 安装指令：\n```sh\n$: bash makeIconLink --dir /path/to/[exec-file] --target [exec-file-name] --icon [icon-file-name]\n```\n* 卸载指令：\n```sh\n$: bash makeIconLink --uninstall [exec-file-name]\n```\n\n#### 自定义shadowsocks服务开机自启动脚本\n-------------------------------------------------------------\n> 使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~\n\n=> 我的服务脚本：[startup.sh](https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/startup.sh)、[shadowsocks](https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/shadowsocks)  \n=> 步骤：\n\n* 编写shadowsocks service脚本文件，比如shadow.service\n\n```sh\n[Unit]\n# 描述\nDescription=Shadowsocks Service\n\n[Service]\nType=oneshot\n# 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)\nExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start\nExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop\nRemainAfterExit=yes\n\n[Install]\n# 一些简单的依赖信息\nWantedBy=multi-user.target\n```\n\n* 将服务配置文件放到`/etc/systemd/system`下  \n\\> sudo cp shadow.service /etc/systemd/system\n* 设置服务自启动  \n\\> systemctl enable shadow\n* 服务开启和关闭  \n\\> systemctl start shadow  \n\\> systemctl stop shadow\n\n#### Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n________________________\n=> 先来一个shadowsocks全局pac代理的步骤：\n```sh\n# pip需要先安装\n$: sudo apt-get install python-pip python-dev build-essential\n$: sudo pip install --upgrade pip\n$: sudo pip install --upgrade virtualenv\n# 安装pac自动生成程序\n$: sudo pip install genpac\n# 生成pac文件\n$: mkdir ~/shadowsocks\n$: cd shadowsocks\n# proxy配置中的地址和端口具体要看你的shadowsocks连接配置\n$: genpac --proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" -o autoproxy.pac --gfwlist-url=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"\n```\n以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -> 网络 -> 网络代理 -> 自动 -> 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。\n=> 再写一个脚本[genpac-command](https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac)，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件\n```sh\n# # 在脚本目录下执行\n# 显示帮助信息\n$: bash genpac-command --help\n# 在线更新\n$: bash genpac-command --update-online\n# 从本地user-rules.txt文件读取更新\n$: bash genpac-command --update-local\n# 添加自定义规则\n$: bash genpac-command --add-rules opendesktop.org\n# 添加多个自定义规则\n$: bash genpac-command --add-rules opendesktop.org atom.io\n# 删除自定义规则\n$: bash genpac-command --del-rules opendesktop.org\n# 删除多个自定义规则\n$: bash genpac-command --del-rules opendesktop.org atom.io\n```\n=> __不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：__\n\n#### Atom编辑器内存占用过大的问题\n______________________________\n>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。\n\n#### Grub2 主题安装\n_________________\n![source.png](/blogs/img/article/Ubuntu18.04-12.png)\n>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。\n\n1. 解压下载的主题文件 => [Vimix](https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ)，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)\n2. 在/boot/grub里创建GRUB2主题目录themes\n\\> sudo mkdir -p /boot/grub/themes\n3. 将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下\n\\> sudo cp -r Vimix /boot/grub/themes\n4. 修改/etc/default/grub配置文件\n\\> sudo gedit /etc/default/grub\n在文件最后添加：GRUB_THEME=\"/boot/grub/themes/Vimix/theme.txt\" 并保存\n5. 更新GRUB\n\\> sudo update-grub\n6. 重启即生效(如果重启卡住请强制关机后再启动)\n\n#### Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n_________________________________________________________\n![firefox_proxy.png](/blogs/img/article/Ubuntu18.04-13.png)\n\n1. [sourceforge](http://sourceforge.net/projects/corefonts/files/the%20fonts/final/)下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n2. 运行字体配置程序\n\\> sudo dpkg-reconfigure ttf-mscorefonts-installer\n3. 在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n\n#### Ubuntu18.04 WPS 提示字体缺失的解决方法\n---------------------------------------\n下载缺失的字体文件[fonts](https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q) (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：\n```sh\n# 生成字体的索引信息\n$: sudo mkfontscale\n$: sudo mkfontdir\n# 更新字体缓存\n$: sudo fc-cache\n```\n\n#### Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n------------------------------------------------------\n安装`xfce4-clipman`，每次使用深度截图时保证它开启\n```sh\n$: sudo apt install xfce4-clipman\n```\n\n#### Ubuntu18.04 更新Gnome版本\n---------------------------------------\n```sh\n# Upgrade\n#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:\n$: sudo ppa-purge ppa:gnome3-team/gnome3-staging\n$: sudo ppa-purge ppa:gnome3-team/gnome3\n$: sudo apt install ubuntu-gnome-desktop^\n# The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:\n$: update-manager -c\n# Alternatively, run the following command:\n$: sudo do-release-upgrade\n```\n\n\n#### Win10 + Ubuntu18.04 双系统时间显示不对\n______________________________________\n>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。\n\n1. 先在Ubuntu下更新一下时间\n\\> sudo apt-get install ntpdate\n\\> sudo ntpdate time.windows.com\n2. 将时间更新到硬件上\n\\> sudo hwclock --localtime --systohc\n3. 关闭linux重新进入windows系统，发现时间正常了\n\n#### Ubuntu18.04 安装系统时说明(双硬盘)\n______________________________________________\n> 主要分为 [ _GPT磁盘分区+UEFI引导方案_ ] 和 [ _传统MBR磁盘分区 + LEGANCY引导方案_ ]\n1. 方案一(兼容方案 gpt+uefi / mbr+legancy)\n使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配\"/boot \"分区，分配一个大小为1GB左右的\"保留bios启动区域\"(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区\"/\"，8G内存的情况下最好还是分配8G的swap交换分区，另外除了\"保留bios启动区域\"为主分区，其它分区均为逻辑分区，最后一步很重要 -- 格式化每个分区，要不然安装很可能会出错！[参考](https://blog.csdn.net/jesse_mx/article/details/61425361\n)\n2. 方案二(gpt+uefi 已使用方案)\n创建\"efi系统分区\"，同时不需要划分\"/boot\"分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分\"/\"根分区，除了根分区所有分区都为逻辑分区，最后选择\"安装启动引导器的设备\"为刚才创建的\"efit系统分区\"。\n3. 方案三(传统mbr+legancy方案)\n传统的legancy + mbr的安装，至少划分\"/boot\"分区(主分区) 和 \"/\"根分区，其余的分区按需划分，最后选择\"安装启动引导器的设备\"为创建的\"/boot\"挂载点。\n\n#### Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题\n[=> 原帖子](https://askubuntu.com/questions/1030867/how-to-diagnose-fix-very-slow-boot-on-ubuntu-18-04)\n1. 编辑文件 `/etc/default/grub` 的 `GRUB_CMDLINE_LINUX_DEFAULT` 这一行，加入一个参数__noresume__\n```sh\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash noresume\"\n```\n2. 更新grub\n```sh\n$: sudo update-grub\n```\n3. 重启电脑\n\n#### Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n_________________________________________________\n* 使用root权限命令行后台启动并且屏蔽输出\n\\> sudo netease-cloud-music > /dev/null 2>&1  &\n* 规避session-manager引起的bug\n\\> alias netease='unset SESSION_MANAGER && netease-cloud-music'\n\\> netease > /dev/null &\n* 别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端[ieaseMusic](https://github.com/trazyn/ieaseMusic)\n* 这里还有个别人做的针对ubuntu18.04的[重新构建版本](https://github.com/innoob/netease-cloud-music)，可以正常使用，也没有重复登录的bug\n\n\n#### Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n______________________________________________\n>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符  \n\n使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的[ume-ui-gothic.ttf](https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA)字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。\n\n#### Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n_______________________________________________________\n=> 错误信息：`Error: Requiring Clutter, version none: Typelib file for namespace 'Clutter' (any version) not found ...`  \n=> 原因分析：该插件需要的依赖Clutter尚未安装\n=> 解决方法：\n```sh\n# 安装依赖\n$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0\n```\n\n#### Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n---------------------------------------\nubuntu18.04已经移除了gksu软件，所以使用替代命令\n1. 添加alias命令\n```bash\n$: alias gksu='pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'\n```\n2. 编辑错误报告相关设置  \n```bash\n$: gksu gedit /etc/default/apport\n# 把`enable = 1`改为`enable = 0`\n```\n\n#### Ubuntu18.04 Gnome-Shell 插件\n______________________________________________\n* [CoverFlow Alt-Tab](https://extensions.gnome.org/extension/97/coverflow-alt-tab/) => 窗口Tab切换预览(★★★★☆)\n* [User Themes(必要)](https://extensions.gnome.org/extension/19/user-themes/) => 用户主题安装(★★★★★)\n* [Dash To Dock](https://extensions.gnome.org/extension/307/dash-to-dock/) => dock栏(★★★★★)\n* [Dash To Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/) => 将dock和顶栏显示在一起(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)\n* [Autohide Battery](https://extensions.gnome.org/extension/595/autohide-battery/) => 电池充满并连接电源时自动隐藏电池按钮(★★★★★)\n* [Places Status Indicator](https://extensions.gnome.org/extension/8/places-status-indicator/) => 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)\n* [Removable Drive Menu](https://extensions.gnome.org/extension/7/removable-drive-menu/) => 顶部任务栏显示可移除的已挂载设备(★★★★★)\n* [Suspend Button](https://extensions.gnome.org/extension/826/suspend-button/) => 顶部菜单栏显示休眠按钮(★★★★★)\n* [TopIcons](https://extensions.gnome.org/extension/495/topicons/) => 顶部通知图标托盘(★★★★★)\n* [TopIconsPlus](https://extensions.gnome.org/extension/1031/topicons/) => 顶部通知图标托盘，自定义图标显示参数(★★★★☆)\n* [Blyr](https://extensions.gnome.org/extension/1251/blyr/) => 模糊应用预览背景图(★★★★★)\n* [Activities Configurator](https://extensions.gnome.org/extension/358/activities-configurator/) => 配置左上角活动按钮(★★★★☆)\n* [Workspace to Dock](https://extensions.gnome.org/extension/427/workspaces-to-dock/) => 将工作区转换为悬浮dock(★★★★★)\n* [Extensions](https://extensions.gnome.org/extension/1036/extensions/) => 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)\n* [Clipboard Indicator](https://extensions.gnome.org/extension/779/clipboard-indicator/) => 可视化剪贴板(★★★★★)\n* [Sound Input & Output Device Chooser](https://extensions.gnome.org/extension/906/sound-output-device-chooser/) => 声音输入和输入设备快速选择(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 取消“窗口已就绪”提示直接提升窗口(★★★★★)\n* [Bluetooth quick connect](https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/) => 蓝牙设备快速连接和断开(★★★★★)\n* [Remove Alt+Tab Delay](https://extensions.gnome.org/extension/1403/remove-alttab-delay/) => 移除【Alt + Tab】的开启应用预览延迟(★★★★★)\n* [Emoji Selector](https://extensions.gnome.org/extension/1162/emoji-selector/) => 快速选择Emoji表情(★★★★)\n\n#### Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n--------------------------------------------\n```sh\n#Use Custom Dock Indicator ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots false\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots false\n_______________________________________________________________________________________________\n\n# Disable Custom Dock Shrink ( Required for Good looking) (  Required )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-shrink false\n_______________________________________________________________________________________________\n\n# Dock Transparency mode ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT\n_______________________________________________________________________________________________\n\n# Restore to Default\n$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/\n_______________________________________________________________________________________________\n```\n\n#### Ubuntu18.04 主题\n______________________________________________\n* GTK3主题(★★★★☆) => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n* GTK3主题(★★★★★) => [McOS-themes](https://www.gnome-look.org/p/1241688)\n* Gnome Shell主题(★★★★) => [Flat-Remix](https://github.com/daniruiz/flat-remix)\n* Gnome Shell主题(★★★☆) => [Human](https://www.gnome-look.org/p/1171095/)\n* Gnome Shell主题(★★★★★) => [macOS High Sierra](https://www.opendesktop.org/c/1460761561)\n* Gnome Shell主题(?) => [macOS High Sierra](https://www.gnome-look.org/p/1213208/)\n* Icon 主题(★★★★) => [flat-remix](https://github.com/daniruiz/flat-remix/releases)\n* Icon 主题(★★★★☆) => [Mac OS X Icon](https://www.gnome-look.org/p/1012200/)\n* Icon 主题(★★★★★) => [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases)\n* Icon 主题(★★★★★) [McMojave-circle](https://www.pling.com/p/1305429/)\n* Icon 主题(★★★★☆) => [MacOS sierra ct](https://github.com/zayronxio/Macos-sierra-CT)\n* Cursor主题(★★★★☆) => [Capitaine Cursors](https://krourke.org/projects/art/capitaine-cursors)\n\n#### chrome实用插件整理\n-----------------------------------\n* [infinity pro 标签页](https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab) => 主页标签管理器(★★★★★)\n* [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab) => github仓库文件资源浏览树(★★★★★)\n* [Postman](https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab) => API测试和请求模拟器(★★★★★)\n* [SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab) => 大家都用的代理软件(★★★★★)\n* [印象笔记剪藏](https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab) => 随时随地把网络资源保存到你的笔记本里(★★★★★)\n* [SimpRead](https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab) => 让浏览器支持纯净的阅读模式(★★★★★)\n* [Full Page Screen Capture](https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab) => 全屏截图(★★★★☆)\n* [油猴tampermonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab) => 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)\n* [Checker Plus for Gmail](https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab) => Google邮件提示插件(★★★★☆)\n* [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab) => 让google浏览器支持vim模式(firefox也有)(★★★★★)\n* [拷贝为Markdown](https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg) => 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)\n\n#### 实用程序和命令\n_______________________________\n* [fonts-firacode编程字体](https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager) => 解决vscode字体间隙过小的问题`sudo apt install fonts-firacode`\n* [vivaldi浏览器](https://vivaldi.com) => 可定制化程度高的个性化浏览器(★★★★★)\n* Terminator => 默认gnome终端升级版(★★★★★)\n* Timeshift => 创建系统快照，增量备份(★★★★★)\n* ipython3(命令工具) => python交互解释器(★★★★★)\n* jupyter => 交互式数据分析和记录工具(★★★★☆)\n* pdb/ipdb(命令工具) => python调试器(★★★★☆)\n* trash-cli(命令工具) => 命令行回收站(★★★★★)\n* bat(命令工具) => cat升级版，支持语法高亮和git状态显示(★★★★★)\n* axel(命令工具) => 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)\n* [aria2(命令工具)](https://github.com/aria2/aria2) => 强大的命令行下载工具\n* [stacer](https://github.com/oguzhaninan/Stacer) => linux电脑管家(★★★★★)\n* [ieaseMusic](https://github.com/trazyn/ieaseMusic) => 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆\\[注：网易云音乐官方已修复]，界面还很酷(★★★★★)\n* parallel(命令工具) => 利用系统的多核来并行执行你的程序(★★★★☆)\n* cheat(命令工具) => 类似man命令的功能，简洁高效(★★★★☆)\n* topgrade(命令工具) => 一个命令更新所有软件(★★★★)\n* [dbKoda](https://www.dbkoda.com/) => mongodb GUI工具(★★★★☆)\n* [mongodb compass](https://www.mongodb.com/products/compass) => mongodb GUI工具(★★★★)\n* [peek](https://github.com/phw/peek) => 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)\n* tmux => 终端管理器(★★★★)\n* 深度终端(ubuntu商店下载) => 支持分屏，内置实用主题(★★★★☆)\n* 深度截图(ubuntu商店下载) => 支持截图编辑(★★★★★)\n* flameshot => 支持Ubuntu20.04的截图编辑工具(★★★★★)\n* [WebTorrent](https://webtorrent.io/desktop/)、[FrostWire](https://www.frostwire.com/) => bt下载工具，支持边下边播(★★★★)\n* [SmartGit](https://www.syntevo.com/smartgit/) => linux平台免费的GIT GUI工具(★★★★★)\n* FileZilla => ftp工具(★★★★★)\n* [e-tools](https://github.com/Suremotoo/e-tools) => coder常用小工具(★★★★)\n* [WhatEver](https://electronjs.org/apps/whatever) => linux第三方印象笔记客户端，基于网页版(★★★★)\n* [wps](http://linux.wps.cn/) => linux office for free made by KingSoftware(★★★★★)\n* [Atom](https://atom.io/) => 我一直在用的编辑器，没有固态硬盘的不推荐使用(★★★★☆)\n* [vscode](https://code.visualstudio.com/) => 轻量化编辑器，没有Atom人性化，但是很快。都是JS写的，性能差距咋这么大呢 ? (★★★★★)\n* ndb => node.js/javascript 调试器(★★★★★)\n* [nvm](https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh) => nodejs版本管理器\n* albert (添加软件源 `ppa:noobslab/macbuntu` 安装 ) => 桌面全局搜索类似Mac系统的SpotLight(★★★★★)\n* [lftp](https://linux.cn/article-5460-1.html) => 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比\n如：多线程下载、断点续传\n* [redshift-gtk](http://jonls.dk/redshift/) 护眼模式，自带的色彩太黄了\n* apt-fast => 比apt更快的包管理器，添加`ppa:apt-fast/stable`安装(★★★★★)\n* nautilus action configure tool => 资源管理器右键菜单自定义，添加`ppa:daniel-marynicz/filemanager-actions`安装(★★★★★)\n* tig => 可交互的命令行git命令(★★★★★)\n* shellcheck => shell脚本语法检查(★★★★★)\n* [Motrix](https://motrix.app/zh-CN/) => 全平台下载工具，用于替代迅雷(★★★★★)\n* [Insync](https://www.insynchq.com/) => 全平台同步工具，支持google云和onedrive(★★★★★)\n* [Timeshift](https://github.com/teejee2008/timeshift) => 创建系统增量备份计划(★★★★★)\n* dconf-editor => gnome桌面配置gui工具(★★★★)\n\n#### 实用网站推荐\n_______________\n![Vimix.png](/blogs/img/article/Ubuntu18.04-14.png)\n\n* [Wallpaper](https://wallpapershome.com/)  => 高清桌面壁纸下载，支持多种分辨率(★★★★★)\n* [flaticon](https://www.flaticon.com) => 免费图标下载网站，支持svg和png两种格式\n* [Electron Apps](https://electronjs.org/apps) => 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)\n* [Linux运维日志](https://www.centos.bz/) => 服务搭建、Linux技术之类的(★★★★☆)\n* [IBM Developer](https://www.ibm.com/developerworks/cn/) => 技术文档类的参考(★★★★★)\n* [Linux常用命令](https://www.lulinux.com/archives/2513#awk)  =>  常用命令速查(★★★★☆)\n* [bilibili工具网站](https://www.kanbilibili.com/) => 支持 视频/弹幕/封面 下载等骚操作(★★★★★)\n* [Linux中国](https://linux.cn/) => 没事儿就上去看看别人翻译转载的文章(★★★★☆)\n* [TinyPNG](https://tinypng.com/) => 免费的图片无损压缩网站(★★★★☆)\n* [iLoveIMG](https://www.iloveimg.com/zh-cn) => 在线图片编辑网站(★★★★★)\n* [savefrom](https://en.savefrom.net/) => 直接下载youtube视频(★★★★☆)\n* [撸Linux](https://www.lulinux.com/) => 好像还蛮有趣的额(★★★★☆)\n* [油猴脚本](https://greasyfork.org/zh-CN/scripts) => 你甚至可以用来破解百度云限速(★★★★★)\n\n_注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合._","slug":"Ubuntu18-04踩坑记录","published":1,"updated":"2020-08-20T04:58:57.811Z","_id":"ckba8cy9v000q5495cmjc3rcc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/blogs/img/article/Ubuntu18.04-1.jpg\" alt=\"welcome / home\"></p>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><hr>\n<ul>\n<li>Wine应用启动后出现WineSystemTray 托盘的问题</li>\n<li>中文环境下将Home目录下的文件夹切换为英文名</li>\n<li>Ubuntu系发行版安装deepin wine QQ</li>\n<li>续：安装QQ/微信</li>\n<li>Ubuntu 18.04开机启动特别慢的问题</li>\n<li>终端oh-my-zsh配置</li>\n<li>终端终结者Terminator配置</li>\n<li>禁用内核更新</li>\n<li>终端常用等宽字体</li>\n<li>crossover18破解</li>\n<li>vim插件配置</li>\n<li>Ubuntu18.04 定制Mac主题</li>\n<li>Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</li>\n<li>Ubuntu18.04 关于定制plymouth主题来更换开机动画</li>\n<li>Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</li>\n<li>Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</li>\n<li>Ubuntu18.04 解决一些软件依赖不满足问题的问题</li>\n<li>Ubuntu18.04 安装cinnamon桌面启动器</li>\n<li>Linux分区过小导致后期容量不足解决方法</li>\n<li>Shadowsocks-Qt5安装的问题</li>\n<li>使用polipo开启终端代理(需要先开启shadowsocks代理)</li>\n<li>将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</li>\n<li>自定义shadowsocks服务开机自启动脚本</li>\n<li>Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</li>\n<li>Atom编辑器内存占用过大的问题</li>\n<li>Grub2 主题安装</li>\n<li>Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</li>\n<li>Ubuntu18.04 WPS 提示字体缺失的解决方法</li>\n<li>Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</li>\n<li>Ubuntu18.04 更新Gnome版本</li>\n<li>Win10 + Ubuntu18.04 双系统时间显示不对</li>\n<li>Ubuntu18.04 安装系统时说明(双硬盘)</li>\n<li>Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题</li>\n<li>Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</li>\n<li>Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</li>\n<li>Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</li>\n<li>Ubuntu18.04 一直提示 “检测到系统程序出现问题”</li>\n<li>Ubuntu18.04 Gnome-Shell 插件</li>\n<li>Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</li>\n<li>Ubuntu18.04 主题</li>\n<li>chrome实用插件整理</li>\n<li>实用程序和命令</li>\n<li>实用网站推荐</li>\n</ul>\n<h4 id=\"Wine应用启动后出现WineSystemTray托盘的问题\"><a href=\"#Wine应用启动后出现WineSystemTray托盘的问题\" class=\"headerlink\" title=\"Wine应用启动后出现WineSystemTray托盘的问题\"></a>Wine应用启动后出现WineSystemTray托盘的问题</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-2.png\" alt=\"wine_tray.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-3.png\" alt=\"tray.png\"></p>\n<ol>\n<li><p>操作系统Linux Mint18.3<br>右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。</p>\n</li>\n<li><p>操作系统Ubuntu 18.04<br>安装gnome-shell插件 <a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a>, 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (<code>sudo apt install chrome-gnome-shell</code> )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件<a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash to Panel</a>解决。</p>\n</li>\n</ol>\n<h4 id=\"中文环境下将Home目录下的文件夹切换为英文名\"><a href=\"#中文环境下将Home目录下的文件夹切换为英文名\" class=\"headerlink\" title=\"中文环境下将Home目录下的文件夹切换为英文名\"></a>中文环境下将Home目录下的文件夹切换为英文名</h4><hr>\n<ol>\n<li>设置英文语言环境<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">export</span> LANG=en_US(恢复-&gt; zh_CN)</span><br></pre></td></tr></table></figure></li>\n<li>更新目录<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure></li>\n<li>弹出提示框点击 [确认]</li>\n<li>重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改</li>\n</ol>\n<h4 id=\"Ubuntu系发行版安装deepin-wine-QQ\"><a href=\"#Ubuntu系发行版安装deepin-wine-QQ\" class=\"headerlink\" title=\"Ubuntu系发行版安装deepin wine QQ\"></a>Ubuntu系发行版安装deepin wine QQ</h4><hr>\n<ol>\n<li><p>安装deepin-wine环境：上<a href=\"https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu\" target=\"_blank\" rel=\"noopener\">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a>页面下载zip包（或用git方式克隆），也可以<a href=\"https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg\" target=\"_blank\" rel=\"noopener\">百度网盘</a>下载，解压到本地文件夹，在文件夹中打开终端，输入<code>sudo sh ./install.sh</code>一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。</p>\n</li>\n<li><p>安装deepin.com应用容器：在<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/</a>中下载想要的容器，点击deb安装即可，以下为推荐容器:</p>\n</li>\n</ol>\n<ul>\n<li>QQ：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/</a></li>\n<li>TIM：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/</a></li>\n<li>QQ轻聊版：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/</a></li>\n<li>微信：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/</a></li>\n<li>Foxmail：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/</a></li>\n<li>百度网盘：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/</a></li>\n<li>360压缩：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/</a></li>\n<li>迅雷急速版:  <a href=\"https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg</a></li>\n<li>Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。</li>\n</ul>\n<h4 id=\"续：安装QQ-微信\"><a href=\"#续：安装QQ-微信\" class=\"headerlink\" title=\"续：安装QQ/微信\"></a>续：安装QQ/微信</h4><hr>\n<p>1.linux上的微信大部分都是网页版微信封装的: <a href=\"https://github.com/geeeeeeeeek/electronic-wechat\" target=\"_blank\" rel=\"noopener\">electronic-wechat</a>、<a href=\"https://github.com/trazyn/weweChat\" target=\"_blank\" rel=\"noopener\">weweChat</a>，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。</p>\n<p>2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现<code>&quot;WeChatWin.dll 缺失问题&quot;</code>报错信息，需要执行下面命令安装额外的环境：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: apt-get install libldap-2.4-2:i386</span><br></pre></td></tr></table></figure></p>\n<p>3.使用docker安装<a href=\"https://hub.docker.com/r/bestwu/qq\" target=\"_blank\" rel=\"noopener\">Tim</a> 和 <a href=\"https://hub.docker.com/r/bestwu/wechat\" target=\"_blank\" rel=\"noopener\">wechat</a>，<a href=\"https://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">docker环境安装教程</a></p>\n<p>4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件<a href=\"https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA\" target=\"_blank\" rel=\"noopener\">riched20.dll</a>(提取密码：rofj)替换掉微信所在容器下的C盘的<code>/windows/system32/riched20.dll</code>，容器路径一般在：<code>~/.cxoffice/[你的容器名]/drive_c/</code>。</p>\n<p>5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。</p>\n<p>6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 <code>sudo apt install libjpeg62:i386</code>，临时解决办法是把图片文件拖动到<code>收藏</code>，然后从收藏转发即可。</p>\n<p>7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。</p>\n<h4 id=\"Ubuntu-18-04开机启动特别慢的问题\"><a href=\"#Ubuntu-18-04开机启动特别慢的问题\" class=\"headerlink\" title=\"Ubuntu 18.04开机启动特别慢的问题\"></a>Ubuntu 18.04开机启动特别慢的问题</h4><hr>\n<p>=&gt; 禁用不必要的开机服务：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出程序开机占用时间排行</span></span><br><span class=\"line\">systemd-analyze blame</span><br><span class=\"line\"><span class=\"comment\"># 禁用plymouth</span></span><br><span class=\"line\">sudo systemctl mask plymouth-start.service</span><br><span class=\"line\">sudo systemctl mask plymouth-read-write.service</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"终端oh-my-zsh配置\"><a href=\"#终端oh-my-zsh配置\" class=\"headerlink\" title=\"终端oh-my-zsh配置\"></a>终端oh-my-zsh配置</h4><hr>\n<ol>\n<li>主题</li>\n</ol>\n<ul>\n<li>gnzh(已使用))</li>\n<li>ys </li>\n<li>avit</li>\n<li>af-magic</li>\n</ul>\n<ol>\n<li>插件</li>\n</ol>\n<ul>\n<li>git =&gt; 自带git状态插件</li>\n<li>svn =&gt; svn状态插件</li>\n<li>colored-man-pages =&gt; man帮助信息高亮</li>\n<li>zsh-syntax-highlighting =&gt; 命令高亮和错误提示</li>\n<li>z =&gt; 自动记录路径快捷跳转</li>\n<li>zsh-autosuggestions =&gt; 根据输入记录自动建议可选输入命令</li>\n</ul>\n<h4 id=\"终端终结者Terminator配置\"><a href=\"#终端终结者Terminator配置\" class=\"headerlink\" title=\"终端终结者Terminator配置\"></a>终端终结者Terminator配置</h4><hr>\n<p>特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局</p>\n<p>注意：可以配合<code>设置-&gt;设备-&gt;键盘-&gt;添加自定义快捷键</code>这样自定义快捷键来启动终端，<br>比如设置<code>Ctrl+Alt+T</code>为<code>terminator --geometry=93x32+450+300</code>，geometry为窗口的布局配置。</p>\n<p>覆盖文件<code>~/.config/terminator/config</code>内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [global_config]</span><br><span class=\"line\">  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler</span><br><span class=\"line\">  suppress_multiple_term_dialog = True</span><br><span class=\"line\">  title_hide_sizetext = True</span><br><span class=\"line\">[keybindings]</span><br><span class=\"line\">  prev_tab = &lt;Alt&gt;1</span><br><span class=\"line\">  reset_clear = &lt;Primary&gt;&lt;Shift&gt;g</span><br><span class=\"line\">  clear = &lt;Primary&gt;l</span><br><span class=\"line\">  switch_to_tab_1 = &lt;Alt&gt;1</span><br><span class=\"line\">  switch_to_tab_2 = &lt;Alt&gt;2</span><br><span class=\"line\">  switch_to_tab_3 = &lt;Alt&gt;3</span><br><span class=\"line\">  switch_to_tab_4 = &lt;Alt&gt;4</span><br><span class=\"line\">  switch_to_tab_5 = &lt;Alt&gt;5</span><br><span class=\"line\">  toggle_scrollbar = None</span><br><span class=\"line\">  toggle_zoom = &lt;Primary&gt;&lt;Shift&gt;x</span><br><span class=\"line\">[layouts]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    [[[child1]]]</span><br><span class=\"line\">      parent = window0</span><br><span class=\"line\">      profile = default</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Terminal</span><br><span class=\"line\">    [[[window0]]]</span><br><span class=\"line\">      parent = <span class=\"string\">\"\"</span></span><br><span class=\"line\">      size = 925, 570</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Window</span><br><span class=\"line\">[plugins]</span><br><span class=\"line\">  [[CustomCommandsMenu]]</span><br><span class=\"line\">    [[[清屏]]]</span><br><span class=\"line\">      <span class=\"built_in\">command</span> = clear</span><br><span class=\"line\">      enabled = True</span><br><span class=\"line\">      name = 清屏</span><br><span class=\"line\">      position = 0</span><br><span class=\"line\">[profiles]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    allow_bold = False</span><br><span class=\"line\">    background_color = <span class=\"string\">\"#fbfbfb\"</span></span><br><span class=\"line\">    background_darkness = 0.93</span><br><span class=\"line\">    background_type = transparent</span><br><span class=\"line\">    copy_on_selection = True</span><br><span class=\"line\">    cursor_color = <span class=\"string\">\"#aaaaaa\"</span></span><br><span class=\"line\">    cursor_shape = ibeam</span><br><span class=\"line\">    font = Ubuntu Light 12</span><br><span class=\"line\">    foreground_color = <span class=\"string\">\"#49494a\"</span></span><br><span class=\"line\">    palette = <span class=\"string\">\"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"</span></span><br><span class=\"line\">    scroll_on_keystroke = False</span><br><span class=\"line\">    scrollbar_position = hidden</span><br><span class=\"line\">    show_titlebar = False</span><br></pre></td></tr></table></figure>\n<h4 id=\"禁用内核更新\"><a href=\"#禁用内核更新\" class=\"headerlink\" title=\"禁用内核更新\"></a>禁用内核更新</h4><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已安装内核</span></span><br><span class=\"line\">$: dpkg --get-selections |grep linux-image</span><br><span class=\"line\"><span class=\"comment\"># 查看正在使用的内核</span></span><br><span class=\"line\">$: uname -a</span><br><span class=\"line\"><span class=\"comment\"># 删除旧内核</span></span><br><span class=\"line\">$: sudo apt-get remove</span><br><span class=\"line\">$: linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-get remove  </span><br><span class=\"line\">$: linux-image-extra-x.xx.x-xx-generic  </span><br><span class=\"line\"><span class=\"comment\"># 或用这个命令移除</span></span><br><span class=\"line\">$: sudo dpkg --purge linux-image-x.x.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 禁止更新内核，需时间来验证</span></span><br><span class=\"line\">$: sudo apt-mark hold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：</span></span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic</span><br></pre></td></tr></table></figure>\n<h4 id=\"终端常用等宽字体\"><a href=\"#终端常用等宽字体\" class=\"headerlink\" title=\"终端常用等宽字体\"></a>终端常用等宽字体</h4><hr>\n<ul>\n<li>AR PL UKai CN 12</li>\n<li>Bitstream Vera Sans Mono 10</li>\n<li>Courier 10 Pitch 11</li>\n<li>DejaVu Sans Mono 10</li>\n<li>FreeMono 11</li>\n<li>Nimbus Mono L 12</li>\n<li>TlwgMono 11 </li>\n</ul>\n<h4 id=\"crossover18破解\"><a href=\"#crossover18破解\" class=\"headerlink\" title=\"crossover18破解\"></a>crossover18破解</h4><hr>\n<p>下载 <a href=\"https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g\" target=\"_blank\" rel=\"noopener\">CrossoverPatch</a> <code>密码: ffp0</code>，解压后替换文件：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  备份原文件</span></span><br><span class=\"line\">$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak</span><br><span class=\"line\"><span class=\"comment\"># 替换文件</span></span><br><span class=\"line\">$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"vim插件配置\"><a href=\"#vim插件配置\" class=\"headerlink\" title=\"vim插件配置\"></a>vim插件配置</h4><hr>\n<ol>\n<li><a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"noopener\">Vundle</a> =&gt; 插件管理器，编辑.vimrc，然后执行命令<code>vim +PluginInstall</code>即可安装  </li>\n<li><a href=\"https://github.com/vim-airline/vim-airline\" target=\"_blank\" rel=\"noopener\">vim-airline</a> =&gt; 底部状态栏  </li>\n<li><a href=\"https://juejin.im/post/5a38c37f6fb9a0450909a151\" target=\"_blank\" rel=\"noopener\">其他配置</a></li>\n</ol>\n<h4 id=\"Ubuntu18-04-定制Mac主题\"><a href=\"#Ubuntu18-04-定制Mac主题\" class=\"headerlink\" title=\"Ubuntu18.04 定制Mac主题\"></a>Ubuntu18.04 定制Mac主题</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-5.png\" alt=\"overview.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-6.png\" alt=\"desktop.png\"></p>\n<ol>\n<li>安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (<code>sudo aptitude install [name]</code>)</li>\n<li>安装GTK3主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li>\n<li>使用tweak载入应用程序主题 =&gt; tweak — 外观 — 应用程序 — 选择X-Arc-Collection</li>\n<li>安装gnome-shell 主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li>\n<li>安装gnome-shell 插件 =&gt; <a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes</a> ( 之后重启Gnome =&gt; [Alt + F2] &amp; [输入 r] &amp; [点击 Enter] )</li>\n<li>使用tweak载入shell主题 =&gt; tweak — 外观 — shell — 选择Sierra shell主题</li>\n<li>下载Mac图标主题 <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a> 或 <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li>\n<li>图标文件夹移动到 ~/.icons目录下(没有则新建目录)</li>\n<li>使用tweak载入icon主题 =&gt; tweak — 外观 — 图标 — 选择对应的图标主题</li>\n<li>安装gnome-shell插件 =&gt; Dash to dock (将原生dock转变为可定制的浮动dock)</li>\n<li>定制firefox主题 =&gt; <a href=\"https://github.com/vinceliuice/Mojave-gtk-theme\" target=\"_blank\" rel=\"noopener\">Majave-gtk-theme</a></li>\n</ol>\n<h4 id=\"Ubuntu18-04-自己定制-登录、锁屏界面的图片和样式\"><a href=\"#Ubuntu18-04-自己定制-登录、锁屏界面的图片和样式\" class=\"headerlink\" title=\"Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\"></a>Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-7.png\" alt=\"lockscreen.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-8.png\" alt=\"loginscreen.png\"></p>\n<ol>\n<li>安装脚本 =&gt; <a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu\" target=\"_blank\" rel=\"noopener\">github / nojsja / login-manager-config-ubuntu</a>  </li>\n<li>说明=&gt; 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的<code>convert -blur</code>命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装<code>gnome-tweak-tool</code>进行更改。  </li>\n<li>之前我想通过更改<code>/usr/share/gnome-shell/theme/gdm3.css</code>文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。</li>\n<li>注意=&gt; 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。</li>\n</ol>\n<h4 id=\"Ubuntu18-04-关于定制plymouth主题来更换开机动画\"><a href=\"#Ubuntu18-04-关于定制plymouth主题来更换开机动画\" class=\"headerlink\" title=\"Ubuntu18.04 关于定制plymouth主题来更换开机动画\"></a>Ubuntu18.04 关于定制plymouth主题来更换开机动画</h4><hr>\n<blockquote>\n<p>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去<a href=\"https://www.gnome-look.org/browse/cat/108/\" target=\"_blank\" rel=\"noopener\">gnome-look</a>看看，这里提供一个苹果主题<a href=\"https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ\" target=\"_blank\" rel=\"noopener\">darwin</a>，密码: <code>rc6u</code>。</p>\n<ol>\n<li>解压下载的plymouth主题到 <code>/usr/share/plymouth/themes</code></li>\n</ol>\n</blockquote>\n<ol>\n<li><p>执行安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新配置，需要手动选择plymouth编号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --config default.plymouth</span><br><span class=\"line\">$: sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手动更改错误路径参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /usr/share/plymouth/themes/default.plymouth</span><br></pre></td></tr></table></figure>\n<p>替换<code>ImageDir</code>和<code>ScriptFile</code>为正确的plymouth文件存放路径，替换后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageDir=/usr/share/plymouth/themes/[THEME]</span><br><span class=\"line\">ScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Ubuntu18-04-使用-Dash-to-dock-插件时同时出现两个dock的问题\"><a href=\"#Ubuntu18-04-使用-Dash-to-dock-插件时同时出现两个dock的问题\" class=\"headerlink\" title=\"Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\"></a>Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</h4><hr>\n<blockquote>\n<p>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。  </p>\n</blockquote>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-9.png\" alt=\"dock-noise.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-10.png\" alt=\"dock-single.png\"></p>\n<h4 id=\"Ubuntu18-04-添加软件源提示：没有Release文件，忽略源的问题\"><a href=\"#Ubuntu18-04-添加软件源提示：没有Release文件，忽略源的问题\" class=\"headerlink\" title=\"Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\"></a>Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-11.png\" alt=\"dock-tweak.png\"></p>\n<ol>\n<li>打开 软件与更新</li>\n<li>选择那个源点击编辑</li>\n<li>更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)</li>\n</ol>\n<h4 id=\"Ubuntu18-04-解决一些软件依赖不满足问题的问题\"><a href=\"#Ubuntu18-04-解决一些软件依赖不满足问题的问题\" class=\"headerlink\" title=\"Ubuntu18.04 解决一些软件依赖不满足问题的问题\"></a>Ubuntu18.04 解决一些软件依赖不满足问题的问题</h4><hr>\n<p>=&gt; 以Ubuntu18.04安装16.04版本网易云音乐为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># gdebi安装包</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb</span><br><span class=\"line\">$: Dependency is not satisfiable: libqt5libqgtk2</span><br><span class=\"line\"># Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，</span><br><span class=\"line\"># 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题</span><br></pre></td></tr></table></figure><br>=&gt; 方法：解压安装包修改依赖项并重新打包<br>=&gt; 步骤：</p>\n<ol>\n<li>deb包同级目录下创建文件夹<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: mkdir netease-cloud-music</span><br></pre></td></tr></table></figure></li>\n<li>解压安装包到这个文件夹中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music</span><br></pre></td></tr></table></figure></li>\n<li>解压控制信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music&#x2F;DEBIAN&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim编辑文件</span><br><span class=\"line\">$: vim neteas-cloud-music&#x2F;DEBIAN&#x2F;control</span><br><span class=\"line\"># 使用vim正则对libqt5libqgtk2进行搜索替换</span><br><span class=\"line\">:1,$s&#x2F;libqt5libqgtk2&#x2F;qt5-style-plugins&#x2F;g</span><br><span class=\"line\"># 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可</span><br></pre></td></tr></table></figure></li>\n<li>生成新的安装包<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg-deb -b neteas-cloud-music</span><br><span class=\"line\">$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure></li>\n<li>安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gdebi或dpkg进行安装即可</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br><span class=\"line\">$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Ubuntu18-04-安装Cinnamon桌面启动器\"><a href=\"#Ubuntu18-04-安装Cinnamon桌面启动器\" class=\"headerlink\" title=\"Ubuntu18.04 安装Cinnamon桌面启动器\"></a>Ubuntu18.04 安装Cinnamon桌面启动器</h4><hr>\n<blockquote>\n<p>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。</p>\n</blockquote>\n<p>已知问题：</p>\n<ul>\n<li>Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便</li>\n<li>输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音</li>\n<li>默认没有集成蓝牙管理器，需要安装<code>blueman</code>进行蓝牙管理</li>\n<li>锁屏界面可能会非常卡顿</li>\n<li>Cinnamon面板(等同gnome任务栏)默认安装了<code>系统托盘</code>，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示</li>\n<li>Cinnamon桌面动画性能也很低效，建议强制使用独立显卡</li>\n</ul>\n<p>安装步骤：</p>\n<ol>\n<li>添加仓库Key<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:embrosyn/cinnamon  </span><br><span class=\"line\">$: sudo apt update &amp;&amp; sudo apt install cinnamon</span><br></pre></td></tr></table></figure></li>\n<li>安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境</li>\n<li>卸载cinnamon<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install ppa-purge</span><br><span class=\"line\">$: sudo ppa-purge ppa:embrosyn/cinnamon</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Linux分区过小导致后期容量不足解决方法\"><a href=\"#Linux分区过小导致后期容量不足解决方法\" class=\"headerlink\" title=\"Linux分区过小导致后期容量不足解决方法\"></a>Linux分区过小导致后期容量不足解决方法</h4><hr>\n<p>=&gt; 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了</p>\n<ul>\n<li>方法1<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get clean</span><br><span class=\"line\">$: sudo apt-get autoremove</span><br></pre></td></tr></table></figure>\n如果仍然空间不足，使用方法2。</li>\n<li>方法2<br>建立目录软链接解决(软链接和硬链接了解一下)：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以/var目录为例 将占用过大的文件夹移出</span></span><br><span class=\"line\">$: mv /var/lib /opt</span><br><span class=\"line\"><span class=\"comment\"># 建立opt下的lib内目录的软链接到var目录</span></span><br><span class=\"line\">$: sudo ln -s /opt/lib /var</span><br></pre></td></tr></table></figure></li>\n<li>方法3<br>如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。</li>\n</ul>\n<h4 id=\"Shadowsocks-Qt5安装的问题\"><a href=\"#Shadowsocks-Qt5安装的问题\" class=\"headerlink\" title=\"Shadowsocks-Qt5安装的问题\"></a>Shadowsocks-Qt5安装的问题</h4><hr>\n<blockquote>\n<p>shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 <strong>软件源提示没有Release文件的问题</strong>，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为<code>artful</code>，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。  </p>\n</blockquote>\n<p>> sudo add-apt-repository ppa:hzwhuang/ss-qt5<br>> sudo apt update<br>> sudo apt-get install shadowsocks-qt5  </p>\n<h4 id=\"使用polipo开启终端代理-需要先开启shadowsocks代理\"><a href=\"#使用polipo开启终端代理-需要先开启shadowsocks代理\" class=\"headerlink\" title=\"使用polipo开启终端代理(需要先开启shadowsocks代理)\"></a>使用polipo开启终端代理(需要先开启shadowsocks代理)</h4><hr>\n<ul>\n<li>安装脚本(适合于bash和zsh终端) =&gt; <a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal\" target=\"_blank\" rel=\"noopener\">github / nojsja / polipo-install-config.sh”</a></li>\n<li>使用方式<br>> 说明：’ hp ‘ == ‘ http_proxy=<a href=\"http://localhost:8123\" target=\"_blank\" rel=\"noopener\">http://localhost:8123</a> ‘ for any command<br>> 说明：’ gp ‘ == ‘http.proxy=localhost:8123’ for git proxy config<br>> 使用1：<code>hp curl ip.gs</code><br>> 使用2：<code>git clone https://android.googlesource.com/tools/repo --config $gp</code></li>\n<li>如果polipo启动报错的话(通过<code>systemctl status polipo</code>查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(<code>/etc/polipo/config</code>)禁用日至记录功能<h4 id=\"将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\"><a href=\"#将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\" class=\"headerlink\" title=\"将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\"></a>将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</h4></li>\n</ul>\n<hr>\n<blockquote>\n<p>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。</p>\n</blockquote>\n<p>=&gt; 安装脚本(测试环境ubuntu18.04) =&gt; <a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/application\" target=\"_blank\" rel=\"noopener\">github / nojsja / makeIconLink</a><br>=&gt; 使用方式</p>\n<ul>\n<li>安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内</li>\n<li>查看说明：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure></li>\n<li>安装指令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --dir /path/to/[<span class=\"built_in\">exec</span>-file] --target [<span class=\"built_in\">exec</span>-file-name] --icon [icon-file-name]</span><br></pre></td></tr></table></figure></li>\n<li>卸载指令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --uninstall [<span class=\"built_in\">exec</span>-file-name]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"自定义shadowsocks服务开机自启动脚本\"><a href=\"#自定义shadowsocks服务开机自启动脚本\" class=\"headerlink\" title=\"自定义shadowsocks服务开机自启动脚本\"></a>自定义shadowsocks服务开机自启动脚本</h4><hr>\n<blockquote>\n<p>使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~</p>\n</blockquote>\n<p>=&gt; 我的服务脚本：<a href=\"https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/startup.sh\" target=\"_blank\" rel=\"noopener\">startup.sh</a>、<a href=\"https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/shadowsocks\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br>=&gt; 步骤：</p>\n<ul>\n<li>编写shadowsocks service脚本文件，比如shadow.service</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 描述</span></span><br><span class=\"line\">Description=Shadowsocks Service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=oneshot</span><br><span class=\"line\"><span class=\"comment\"># 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)</span></span><br><span class=\"line\">ExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start</span><br><span class=\"line\">ExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop</span><br><span class=\"line\">RemainAfterExit=yes</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\"><span class=\"comment\"># 一些简单的依赖信息</span></span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将服务配置文件放到<code>/etc/systemd/system</code>下<br>> sudo cp shadow.service /etc/systemd/system</li>\n<li>设置服务自启动<br>> systemctl enable shadow</li>\n<li>服务开启和关闭<br>> systemctl start shadow<br>> systemctl stop shadow</li>\n</ul>\n<h4 id=\"Ubuntu18-04设置shadowsocks全局pac自动代理对浏览器无效\"><a href=\"#Ubuntu18-04设置shadowsocks全局pac自动代理对浏览器无效\" class=\"headerlink\" title=\"Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\"></a>Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</h4><hr>\n<p>=&gt; 先来一个shadowsocks全局pac代理的步骤：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip需要先安装</span></span><br><span class=\"line\">$: sudo apt-get install python-pip python-dev build-essential</span><br><span class=\"line\">$: sudo pip install --upgrade pip</span><br><span class=\"line\">$: sudo pip install --upgrade virtualenv</span><br><span class=\"line\"><span class=\"comment\"># 安装pac自动生成程序</span></span><br><span class=\"line\">$: sudo pip install genpac</span><br><span class=\"line\"><span class=\"comment\"># 生成pac文件</span></span><br><span class=\"line\">$: mkdir ~/shadowsocks</span><br><span class=\"line\">$: <span class=\"built_in\">cd</span> shadowsocks</span><br><span class=\"line\"><span class=\"comment\"># proxy配置中的地址和端口具体要看你的shadowsocks连接配置</span></span><br><span class=\"line\">$: genpac --proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> -o autoproxy.pac --gfwlist-url=<span class=\"string\">\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"</span></span><br></pre></td></tr></table></figure><br>以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -&gt; 网络 -&gt; 网络代理 -&gt; 自动 -&gt; 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。<br>=&gt; 再写一个脚本<a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac\" target=\"_blank\" rel=\"noopener\">genpac-command</a>，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># # 在脚本目录下执行</span></span><br><span class=\"line\"><span class=\"comment\"># 显示帮助信息</span></span><br><span class=\"line\">$: bash genpac-command --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 在线更新</span></span><br><span class=\"line\">$: bash genpac-command --update-online</span><br><span class=\"line\"><span class=\"comment\"># 从本地user-rules.txt文件读取更新</span></span><br><span class=\"line\">$: bash genpac-command --update-local</span><br><span class=\"line\"><span class=\"comment\"># 添加自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 添加多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org atom.io</span><br><span class=\"line\"><span class=\"comment\"># 删除自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 删除多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org atom.io</span><br></pre></td></tr></table></figure><br>=&gt; <strong>不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：</strong></p>\n<h4 id=\"Atom编辑器内存占用过大的问题\"><a href=\"#Atom编辑器内存占用过大的问题\" class=\"headerlink\" title=\"Atom编辑器内存占用过大的问题\"></a>Atom编辑器内存占用过大的问题</h4><hr>\n<blockquote>\n<p>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。</p>\n</blockquote>\n<h4 id=\"Grub2-主题安装\"><a href=\"#Grub2-主题安装\" class=\"headerlink\" title=\"Grub2 主题安装\"></a>Grub2 主题安装</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-12.png\" alt=\"source.png\"></p>\n<blockquote>\n<p>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。</p>\n</blockquote>\n<ol>\n<li>解压下载的主题文件 =&gt; <a href=\"https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ\" target=\"_blank\" rel=\"noopener\">Vimix</a>，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)</li>\n<li>在/boot/grub里创建GRUB2主题目录themes<br>> sudo mkdir -p /boot/grub/themes</li>\n<li>将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下<br>> sudo cp -r Vimix /boot/grub/themes</li>\n<li>修改/etc/default/grub配置文件<br>> sudo gedit /etc/default/grub<br>在文件最后添加：GRUB_THEME=”/boot/grub/themes/Vimix/theme.txt” 并保存</li>\n<li>更新GRUB<br>> sudo update-grub</li>\n<li>重启即生效(如果重启卡住请强制关机后再启动)</li>\n</ol>\n<h4 id=\"Ubuntu18-04-解决下载额外数据文件失败：ttf-mscorefonts-installer\"><a href=\"#Ubuntu18-04-解决下载额外数据文件失败：ttf-mscorefonts-installer\" class=\"headerlink\" title=\"Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\"></a>Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-13.png\" alt=\"firefox_proxy.png\"></p>\n<ol>\n<li><a href=\"http://sourceforge.net/projects/corefonts/files/the%20fonts/final/\" target=\"_blank\" rel=\"noopener\">sourceforge</a>下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li>\n<li>运行字体配置程序<br>> sudo dpkg-reconfigure ttf-mscorefonts-installer</li>\n<li>在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li>\n</ol>\n<h4 id=\"Ubuntu18-04-WPS-提示字体缺失的解决方法\"><a href=\"#Ubuntu18-04-WPS-提示字体缺失的解决方法\" class=\"headerlink\" title=\"Ubuntu18.04 WPS 提示字体缺失的解决方法\"></a>Ubuntu18.04 WPS 提示字体缺失的解决方法</h4><hr>\n<p>下载缺失的字体文件<a href=\"https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q\" target=\"_blank\" rel=\"noopener\">fonts</a> (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成字体的索引信息</span></span><br><span class=\"line\">$: sudo mkfontscale</span><br><span class=\"line\">$: sudo mkfontdir</span><br><span class=\"line\"><span class=\"comment\"># 更新字体缓存</span></span><br><span class=\"line\">$: sudo <span class=\"built_in\">fc</span>-cache</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Ubuntu20-04-使用deepin-screenshot截图后无法粘贴到输入框\"><a href=\"#Ubuntu20-04-使用deepin-screenshot截图后无法粘贴到输入框\" class=\"headerlink\" title=\"Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\"></a>Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</h4><hr>\n<p>安装<code>xfce4-clipman</code>，每次使用深度截图时保证它开启<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt install xfce4-clipman</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Ubuntu18-04-更新Gnome版本\"><a href=\"#Ubuntu18-04-更新Gnome版本\" class=\"headerlink\" title=\"Ubuntu18.04 更新Gnome版本\"></a>Ubuntu18.04 更新Gnome版本</h4><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Upgrade</span></span><br><span class=\"line\"><span class=\"comment\">#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:</span></span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3-staging</span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3</span><br><span class=\"line\">$: sudo apt install ubuntu-gnome-desktop^</span><br><span class=\"line\"><span class=\"comment\"># The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:</span></span><br><span class=\"line\">$: update-manager -c</span><br><span class=\"line\"><span class=\"comment\"># Alternatively, run the following command:</span></span><br><span class=\"line\">$: sudo <span class=\"keyword\">do</span>-release-upgrade</span><br></pre></td></tr></table></figure>\n<h4 id=\"Win10-Ubuntu18-04-双系统时间显示不对\"><a href=\"#Win10-Ubuntu18-04-双系统时间显示不对\" class=\"headerlink\" title=\"Win10 + Ubuntu18.04 双系统时间显示不对\"></a>Win10 + Ubuntu18.04 双系统时间显示不对</h4><hr>\n<blockquote>\n<p>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。</p>\n</blockquote>\n<ol>\n<li>先在Ubuntu下更新一下时间<br>> sudo apt-get install ntpdate<br>> sudo ntpdate time.windows.com</li>\n<li>将时间更新到硬件上<br>> sudo hwclock —localtime —systohc</li>\n<li>关闭linux重新进入windows系统，发现时间正常了</li>\n</ol>\n<h4 id=\"Ubuntu18-04-安装系统时说明-双硬盘\"><a href=\"#Ubuntu18-04-安装系统时说明-双硬盘\" class=\"headerlink\" title=\"Ubuntu18.04 安装系统时说明(双硬盘)\"></a>Ubuntu18.04 安装系统时说明(双硬盘)</h4><hr>\n<blockquote>\n<p>主要分为 [ <em>GPT磁盘分区+UEFI引导方案</em> ] 和 [ <em>传统MBR磁盘分区 + LEGANCY引导方案</em> ]</p>\n<ol>\n<li>方案一(兼容方案 gpt+uefi / mbr+legancy)<br>使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配”/boot “分区，分配一个大小为1GB左右的”保留bios启动区域”(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区”/“，8G内存的情况下最好还是分配8G的swap交换分区，另外除了”保留bios启动区域”为主分区，其它分区均为逻辑分区，最后一步很重要 — 格式化每个分区，要不然安装很可能会出错！<a href=\"https://blog.csdn.net/jesse_mx/article/details/61425361\" target=\"_blank\" rel=\"noopener\">参考</a></li>\n<li>方案二(gpt+uefi 已使用方案)<br>创建”efi系统分区”，同时不需要划分”/boot”分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分”/“根分区，除了根分区所有分区都为逻辑分区，最后选择”安装启动引导器的设备”为刚才创建的”efit系统分区”。</li>\n<li>方案三(传统mbr+legancy方案)<br>传统的legancy + mbr的安装，至少划分”/boot”分区(主分区) 和 “/“根分区，其余的分区按需划分，最后选择”安装启动引导器的设备”为创建的”/boot”挂载点。</li>\n</ol>\n</blockquote>\n<h4 id=\"Ubuntu-18-04-使用lvm逻辑卷管理方式安装后启动很慢的问题\"><a href=\"#Ubuntu-18-04-使用lvm逻辑卷管理方式安装后启动很慢的问题\" class=\"headerlink\" title=\"Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题\"></a>Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题</h4><p><a href=\"https://askubuntu.com/questions/1030867/how-to-diagnose-fix-very-slow-boot-on-ubuntu-18-04\" target=\"_blank\" rel=\"noopener\">=&gt; 原帖子</a></p>\n<ol>\n<li>编辑文件 <code>/etc/default/grub</code> 的 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 这一行，加入一个参数<strong>noresume</strong><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=<span class=\"string\">\"quiet splash noresume\"</span></span><br></pre></td></tr></table></figure></li>\n<li>更新grub<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure></li>\n<li>重启电脑</li>\n</ol>\n<h4 id=\"Ubuntu18-04-安装网易云音乐1-1-0后不能打开的解决方法\"><a href=\"#Ubuntu18-04-安装网易云音乐1-1-0后不能打开的解决方法\" class=\"headerlink\" title=\"Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\"></a>Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</h4><hr>\n<ul>\n<li>使用root权限命令行后台启动并且屏蔽输出<br>> sudo netease-cloud-music &gt; /dev/null 2&gt;&amp;1  &amp;</li>\n<li>规避session-manager引起的bug<br>> alias netease=’unset SESSION_MANAGER &amp;&amp; netease-cloud-music’<br>> netease &gt; /dev/null &amp;</li>\n<li>别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端<a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a></li>\n<li>这里还有个别人做的针对ubuntu18.04的<a href=\"https://github.com/innoob/netease-cloud-music\" target=\"_blank\" rel=\"noopener\">重新构建版本</a>，可以正常使用，也没有重复登录的bug</li>\n</ul>\n<h4 id=\"Ubuntu18-04-Crossover17安装QQ后乱码的解决方法\"><a href=\"#Ubuntu18-04-Crossover17安装QQ后乱码的解决方法\" class=\"headerlink\" title=\"Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\"></a>Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</h4><hr>\n<blockquote>\n<p>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符  </p>\n</blockquote>\n<p>使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的<a href=\"https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA\" target=\"_blank\" rel=\"noopener\">ume-ui-gothic.ttf</a>字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。</p>\n<h4 id=\"Ubuntu18-04-通过tweak安装gnome插件Blyr后设置插件报错\"><a href=\"#Ubuntu18-04-通过tweak安装gnome插件Blyr后设置插件报错\" class=\"headerlink\" title=\"Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\"></a>Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</h4><hr>\n<p>=&gt; 错误信息：<code>Error: Requiring Clutter, version none: Typelib file for namespace &#39;Clutter&#39; (any version) not found ...</code><br>=&gt; 原因分析：该插件需要的依赖Clutter尚未安装<br>=&gt; 解决方法：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Ubuntu18-04-一直提示-“检测到系统程序出现问题”\"><a href=\"#Ubuntu18-04-一直提示-“检测到系统程序出现问题”\" class=\"headerlink\" title=\"Ubuntu18.04 一直提示 “检测到系统程序出现问题”\"></a>Ubuntu18.04 一直提示 “检测到系统程序出现问题”</h4><hr>\n<p>ubuntu18.04已经移除了gksu软件，所以使用替代命令</p>\n<ol>\n<li>添加alias命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">alias</span> gksu=<span class=\"string\">'pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'</span></span><br></pre></td></tr></table></figure></li>\n<li>编辑错误报告相关设置  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: gksu gedit /etc/default/apport</span><br><span class=\"line\"><span class=\"comment\"># 把`enable = 1`改为`enable = 0`</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Ubuntu18-04-Gnome-Shell-插件\"><a href=\"#Ubuntu18-04-Gnome-Shell-插件\" class=\"headerlink\" title=\"Ubuntu18.04 Gnome-Shell 插件\"></a>Ubuntu18.04 Gnome-Shell 插件</h4><hr>\n<ul>\n<li><a href=\"https://extensions.gnome.org/extension/97/coverflow-alt-tab/\" target=\"_blank\" rel=\"noopener\">CoverFlow Alt-Tab</a> =&gt; 窗口Tab切换预览(★★★★☆)</li>\n<li><a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes(必要)</a> =&gt; 用户主题安装(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/307/dash-to-dock/\" target=\"_blank\" rel=\"noopener\">Dash To Dock</a> =&gt; dock栏(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash To Panel</a> =&gt; 将dock和顶栏显示在一起(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/595/autohide-battery/\" target=\"_blank\" rel=\"noopener\">Autohide Battery</a> =&gt; 电池充满并连接电源时自动隐藏电池按钮(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/8/places-status-indicator/\" target=\"_blank\" rel=\"noopener\">Places Status Indicator</a> =&gt; 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/7/removable-drive-menu/\" target=\"_blank\" rel=\"noopener\">Removable Drive Menu</a> =&gt; 顶部任务栏显示可移除的已挂载设备(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/826/suspend-button/\" target=\"_blank\" rel=\"noopener\">Suspend Button</a> =&gt; 顶部菜单栏显示休眠按钮(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a> =&gt; 顶部通知图标托盘(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1031/topicons/\" target=\"_blank\" rel=\"noopener\">TopIconsPlus</a> =&gt; 顶部通知图标托盘，自定义图标显示参数(★★★★☆)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1251/blyr/\" target=\"_blank\" rel=\"noopener\">Blyr</a> =&gt; 模糊应用预览背景图(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/358/activities-configurator/\" target=\"_blank\" rel=\"noopener\">Activities Configurator</a> =&gt; 配置左上角活动按钮(★★★★☆)</li>\n<li><a href=\"https://extensions.gnome.org/extension/427/workspaces-to-dock/\" target=\"_blank\" rel=\"noopener\">Workspace to Dock</a> =&gt; 将工作区转换为悬浮dock(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1036/extensions/\" target=\"_blank\" rel=\"noopener\">Extensions</a> =&gt; 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/779/clipboard-indicator/\" target=\"_blank\" rel=\"noopener\">Clipboard Indicator</a> =&gt; 可视化剪贴板(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/906/sound-output-device-chooser/\" target=\"_blank\" rel=\"noopener\">Sound Input &amp; Output Device Chooser</a> =&gt; 声音输入和输入设备快速选择(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 取消“窗口已就绪”提示直接提升窗口(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/\" target=\"_blank\" rel=\"noopener\">Bluetooth quick connect</a> =&gt; 蓝牙设备快速连接和断开(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1403/remove-alttab-delay/\" target=\"_blank\" rel=\"noopener\">Remove Alt+Tab Delay</a> =&gt; 移除【Alt + Tab】的开启应用预览延迟(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1162/emoji-selector/\" target=\"_blank\" rel=\"noopener\">Emoji Selector</a> =&gt; 快速选择Emoji表情(★★★★)</li>\n</ul>\n<h4 id=\"Ubuntu18-04-插件-Dash-to-dock-一些常用设置\"><a href=\"#Ubuntu18-04-插件-Dash-to-dock-一些常用设置\" class=\"headerlink\" title=\"Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\"></a>Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</h4><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Use Custom Dock Indicator ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Custom Dock Shrink ( Required for Good looking) (  Required )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-shrink <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dock Transparency mode ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Restore to Default</span></span><br><span class=\"line\">$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ubuntu18-04-主题\"><a href=\"#Ubuntu18-04-主题\" class=\"headerlink\" title=\"Ubuntu18.04 主题\"></a>Ubuntu18.04 主题</h4><hr>\n<ul>\n<li>GTK3主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li>\n<li>GTK3主题(★★★★★) =&gt; <a href=\"https://www.gnome-look.org/p/1241688\" target=\"_blank\" rel=\"noopener\">McOS-themes</a></li>\n<li>Gnome Shell主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix\" target=\"_blank\" rel=\"noopener\">Flat-Remix</a></li>\n<li>Gnome Shell主题(★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1171095/\" target=\"_blank\" rel=\"noopener\">Human</a></li>\n<li>Gnome Shell主题(★★★★★) =&gt; <a href=\"https://www.opendesktop.org/c/1460761561\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li>\n<li>Gnome Shell主题(?) =&gt; <a href=\"https://www.gnome-look.org/p/1213208/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li>\n<li>Icon 主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix/releases\" target=\"_blank\" rel=\"noopener\">flat-remix</a></li>\n<li>Icon 主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1012200/\" target=\"_blank\" rel=\"noopener\">Mac OS X Icon</a></li>\n<li>Icon 主题(★★★★★) =&gt; <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a></li>\n<li>Icon 主题(★★★★★) <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li>\n<li>Icon 主题(★★★★☆) =&gt; <a href=\"https://github.com/zayronxio/Macos-sierra-CT\" target=\"_blank\" rel=\"noopener\">MacOS sierra ct</a></li>\n<li>Cursor主题(★★★★☆) =&gt; <a href=\"https://krourke.org/projects/art/capitaine-cursors\" target=\"_blank\" rel=\"noopener\">Capitaine Cursors</a></li>\n</ul>\n<h4 id=\"chrome实用插件整理\"><a href=\"#chrome实用插件整理\" class=\"headerlink\" title=\"chrome实用插件整理\"></a>chrome实用插件整理</h4><hr>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">infinity pro 标签页</a> =&gt; 主页标签管理器(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Octotree</a> =&gt; github仓库文件资源浏览树(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Postman</a> =&gt; API测试和请求模拟器(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a> =&gt; 大家都用的代理软件(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">印象笔记剪藏</a> =&gt; 随时随地把网络资源保存到你的笔记本里(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SimpRead</a> =&gt; 让浏览器支持纯净的阅读模式(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Full Page Screen Capture</a> =&gt; 全屏截图(★★★★☆)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">油猴tampermonkey</a> =&gt; 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Checker Plus for Gmail</a> =&gt; Google邮件提示插件(★★★★☆)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Vimium</a> =&gt; 让google浏览器支持vim模式(firefox也有)(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg\" target=\"_blank\" rel=\"noopener\">拷贝为Markdown</a> =&gt; 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)</li>\n</ul>\n<h4 id=\"实用程序和命令\"><a href=\"#实用程序和命令\" class=\"headerlink\" title=\"实用程序和命令\"></a>实用程序和命令</h4><hr>\n<ul>\n<li><a href=\"https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager\" target=\"_blank\" rel=\"noopener\">fonts-firacode编程字体</a> =&gt; 解决vscode字体间隙过小的问题<code>sudo apt install fonts-firacode</code></li>\n<li><a href=\"https://vivaldi.com\" target=\"_blank\" rel=\"noopener\">vivaldi浏览器</a> =&gt; 可定制化程度高的个性化浏览器(★★★★★)</li>\n<li>Terminator =&gt; 默认gnome终端升级版(★★★★★)</li>\n<li>Timeshift =&gt; 创建系统快照，增量备份(★★★★★)</li>\n<li>ipython3(命令工具) =&gt; python交互解释器(★★★★★)</li>\n<li>jupyter =&gt; 交互式数据分析和记录工具(★★★★☆)</li>\n<li>pdb/ipdb(命令工具) =&gt; python调试器(★★★★☆)</li>\n<li>trash-cli(命令工具) =&gt; 命令行回收站(★★★★★)</li>\n<li>bat(命令工具) =&gt; cat升级版，支持语法高亮和git状态显示(★★★★★)</li>\n<li>axel(命令工具) =&gt; 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)</li>\n<li><a href=\"https://github.com/aria2/aria2\" target=\"_blank\" rel=\"noopener\">aria2(命令工具)</a> =&gt; 强大的命令行下载工具</li>\n<li><a href=\"https://github.com/oguzhaninan/Stacer\" target=\"_blank\" rel=\"noopener\">stacer</a> =&gt; linux电脑管家(★★★★★)</li>\n<li><a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a> =&gt; 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆[注：网易云音乐官方已修复]，界面还很酷(★★★★★)</li>\n<li>parallel(命令工具) =&gt; 利用系统的多核来并行执行你的程序(★★★★☆)</li>\n<li>cheat(命令工具) =&gt; 类似man命令的功能，简洁高效(★★★★☆)</li>\n<li>topgrade(命令工具) =&gt; 一个命令更新所有软件(★★★★)</li>\n<li><a href=\"https://www.dbkoda.com/\" target=\"_blank\" rel=\"noopener\">dbKoda</a> =&gt; mongodb GUI工具(★★★★☆)</li>\n<li><a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"noopener\">mongodb compass</a> =&gt; mongodb GUI工具(★★★★)</li>\n<li><a href=\"https://github.com/phw/peek\" target=\"_blank\" rel=\"noopener\">peek</a> =&gt; 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)</li>\n<li>tmux =&gt; 终端管理器(★★★★)</li>\n<li>深度终端(ubuntu商店下载) =&gt; 支持分屏，内置实用主题(★★★★☆)</li>\n<li>深度截图(ubuntu商店下载) =&gt; 支持截图编辑(★★★★★)</li>\n<li>flameshot =&gt; 支持Ubuntu20.04的截图编辑工具(★★★★★)</li>\n<li><a href=\"https://webtorrent.io/desktop/\" target=\"_blank\" rel=\"noopener\">WebTorrent</a>、<a href=\"https://www.frostwire.com/\" target=\"_blank\" rel=\"noopener\">FrostWire</a> =&gt; bt下载工具，支持边下边播(★★★★)</li>\n<li><a href=\"https://www.syntevo.com/smartgit/\" target=\"_blank\" rel=\"noopener\">SmartGit</a> =&gt; linux平台免费的GIT GUI工具(★★★★★)</li>\n<li>FileZilla =&gt; ftp工具(★★★★★)</li>\n<li><a href=\"https://github.com/Suremotoo/e-tools\" target=\"_blank\" rel=\"noopener\">e-tools</a> =&gt; coder常用小工具(★★★★)</li>\n<li><a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">WhatEver</a> =&gt; linux第三方印象笔记客户端，基于网页版(★★★★)</li>\n<li><a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps</a> =&gt; linux office for free made by KingSoftware(★★★★★)</li>\n<li><a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">Atom</a> =&gt; 我一直在用的编辑器，没有固态硬盘的不推荐使用(★★★★☆)</li>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode</a> =&gt; 轻量化编辑器，没有Atom人性化，但是很快。都是JS写的，性能差距咋这么大呢 ? (★★★★★)</li>\n<li>ndb =&gt; node.js/javascript 调试器(★★★★★)</li>\n<li><a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh\" target=\"_blank\" rel=\"noopener\">nvm</a> =&gt; nodejs版本管理器</li>\n<li>albert (添加软件源 <code>ppa:noobslab/macbuntu</code> 安装 ) =&gt; 桌面全局搜索类似Mac系统的SpotLight(★★★★★)</li>\n<li><a href=\"https://linux.cn/article-5460-1.html\" target=\"_blank\" rel=\"noopener\">lftp</a> =&gt; 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比<br>如：多线程下载、断点续传</li>\n<li><a href=\"http://jonls.dk/redshift/\" target=\"_blank\" rel=\"noopener\">redshift-gtk</a> 护眼模式，自带的色彩太黄了</li>\n<li>apt-fast =&gt; 比apt更快的包管理器，添加<code>ppa:apt-fast/stable</code>安装(★★★★★)</li>\n<li>nautilus action configure tool =&gt; 资源管理器右键菜单自定义，添加<code>ppa:daniel-marynicz/filemanager-actions</code>安装(★★★★★)</li>\n<li>tig =&gt; 可交互的命令行git命令(★★★★★)</li>\n<li>shellcheck =&gt; shell脚本语法检查(★★★★★)</li>\n<li><a href=\"https://motrix.app/zh-CN/\" target=\"_blank\" rel=\"noopener\">Motrix</a> =&gt; 全平台下载工具，用于替代迅雷(★★★★★)</li>\n<li><a href=\"https://www.insynchq.com/\" target=\"_blank\" rel=\"noopener\">Insync</a> =&gt; 全平台同步工具，支持google云和onedrive(★★★★★)</li>\n<li><a href=\"https://github.com/teejee2008/timeshift\" target=\"_blank\" rel=\"noopener\">Timeshift</a> =&gt; 创建系统增量备份计划(★★★★★)</li>\n<li>dconf-editor =&gt; gnome桌面配置gui工具(★★★★)</li>\n</ul>\n<h4 id=\"实用网站推荐\"><a href=\"#实用网站推荐\" class=\"headerlink\" title=\"实用网站推荐\"></a>实用网站推荐</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-14.png\" alt=\"Vimix.png\"></p>\n<ul>\n<li><a href=\"https://wallpapershome.com/\" target=\"_blank\" rel=\"noopener\">Wallpaper</a>  =&gt; 高清桌面壁纸下载，支持多种分辨率(★★★★★)</li>\n<li><a href=\"https://www.flaticon.com\" target=\"_blank\" rel=\"noopener\">flaticon</a> =&gt; 免费图标下载网站，支持svg和png两种格式</li>\n<li><a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron Apps</a> =&gt; 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)</li>\n<li><a href=\"https://www.centos.bz/\" target=\"_blank\" rel=\"noopener\">Linux运维日志</a> =&gt; 服务搭建、Linux技术之类的(★★★★☆)</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/\" target=\"_blank\" rel=\"noopener\">IBM Developer</a> =&gt; 技术文档类的参考(★★★★★)</li>\n<li><a href=\"https://www.lulinux.com/archives/2513#awk\" target=\"_blank\" rel=\"noopener\">Linux常用命令</a>  =&gt;  常用命令速查(★★★★☆)</li>\n<li><a href=\"https://www.kanbilibili.com/\" target=\"_blank\" rel=\"noopener\">bilibili工具网站</a> =&gt; 支持 视频/弹幕/封面 下载等骚操作(★★★★★)</li>\n<li><a href=\"https://linux.cn/\" target=\"_blank\" rel=\"noopener\">Linux中国</a> =&gt; 没事儿就上去看看别人翻译转载的文章(★★★★☆)</li>\n<li><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">TinyPNG</a> =&gt; 免费的图片无损压缩网站(★★★★☆)</li>\n<li><a href=\"https://www.iloveimg.com/zh-cn\" target=\"_blank\" rel=\"noopener\">iLoveIMG</a> =&gt; 在线图片编辑网站(★★★★★)</li>\n<li><a href=\"https://en.savefrom.net/\" target=\"_blank\" rel=\"noopener\">savefrom</a> =&gt; 直接下载youtube视频(★★★★☆)</li>\n<li><a href=\"https://www.lulinux.com/\" target=\"_blank\" rel=\"noopener\">撸Linux</a> =&gt; 好像还蛮有趣的额(★★★★☆)</li>\n<li><a href=\"https://greasyfork.org/zh-CN/scripts\" target=\"_blank\" rel=\"noopener\">油猴脚本</a> =&gt; 你甚至可以用来破解百度云限速(★★★★★)</li>\n</ul>\n<p><em>注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blogs/img/article/Ubuntu18.04-1.jpg\" alt=\"welcome / home\"></p>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><hr>\n<ul>\n<li>Wine应用启动后出现WineSystemTray 托盘的问题</li>\n<li>中文环境下将Home目录下的文件夹切换为英文名</li>\n<li>Ubuntu系发行版安装deepin wine QQ</li>\n<li>续：安装QQ/微信</li>\n<li>Ubuntu 18.04开机启动特别慢的问题</li>\n<li>终端oh-my-zsh配置</li>\n<li>终端终结者Terminator配置</li>\n<li>禁用内核更新</li>\n<li>终端常用等宽字体</li>\n<li>crossover18破解</li>\n<li>vim插件配置</li>\n<li>Ubuntu18.04 定制Mac主题</li>\n<li>Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</li>\n<li>Ubuntu18.04 关于定制plymouth主题来更换开机动画</li>\n<li>Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</li>\n<li>Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</li>\n<li>Ubuntu18.04 解决一些软件依赖不满足问题的问题</li>\n<li>Ubuntu18.04 安装cinnamon桌面启动器</li>\n<li>Linux分区过小导致后期容量不足解决方法</li>\n<li>Shadowsocks-Qt5安装的问题</li>\n<li>使用polipo开启终端代理(需要先开启shadowsocks代理)</li>\n<li>将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</li>\n<li>自定义shadowsocks服务开机自启动脚本</li>\n<li>Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</li>\n<li>Atom编辑器内存占用过大的问题</li>\n<li>Grub2 主题安装</li>\n<li>Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</li>\n<li>Ubuntu18.04 WPS 提示字体缺失的解决方法</li>\n<li>Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</li>\n<li>Ubuntu18.04 更新Gnome版本</li>\n<li>Win10 + Ubuntu18.04 双系统时间显示不对</li>\n<li>Ubuntu18.04 安装系统时说明(双硬盘)</li>\n<li>Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题</li>\n<li>Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</li>\n<li>Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</li>\n<li>Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</li>\n<li>Ubuntu18.04 一直提示 “检测到系统程序出现问题”</li>\n<li>Ubuntu18.04 Gnome-Shell 插件</li>\n<li>Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</li>\n<li>Ubuntu18.04 主题</li>\n<li>chrome实用插件整理</li>\n<li>实用程序和命令</li>\n<li>实用网站推荐</li>\n</ul>\n<h4 id=\"Wine应用启动后出现WineSystemTray托盘的问题\"><a href=\"#Wine应用启动后出现WineSystemTray托盘的问题\" class=\"headerlink\" title=\"Wine应用启动后出现WineSystemTray托盘的问题\"></a>Wine应用启动后出现WineSystemTray托盘的问题</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-2.png\" alt=\"wine_tray.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-3.png\" alt=\"tray.png\"></p>\n<ol>\n<li><p>操作系统Linux Mint18.3<br>右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。</p>\n</li>\n<li><p>操作系统Ubuntu 18.04<br>安装gnome-shell插件 <a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a>, 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (<code>sudo apt install chrome-gnome-shell</code> )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件<a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash to Panel</a>解决。</p>\n</li>\n</ol>\n<h4 id=\"中文环境下将Home目录下的文件夹切换为英文名\"><a href=\"#中文环境下将Home目录下的文件夹切换为英文名\" class=\"headerlink\" title=\"中文环境下将Home目录下的文件夹切换为英文名\"></a>中文环境下将Home目录下的文件夹切换为英文名</h4><hr>\n<ol>\n<li>设置英文语言环境<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">export</span> LANG=en_US(恢复-&gt; zh_CN)</span><br></pre></td></tr></table></figure></li>\n<li>更新目录<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure></li>\n<li>弹出提示框点击 [确认]</li>\n<li>重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改</li>\n</ol>\n<h4 id=\"Ubuntu系发行版安装deepin-wine-QQ\"><a href=\"#Ubuntu系发行版安装deepin-wine-QQ\" class=\"headerlink\" title=\"Ubuntu系发行版安装deepin wine QQ\"></a>Ubuntu系发行版安装deepin wine QQ</h4><hr>\n<ol>\n<li><p>安装deepin-wine环境：上<a href=\"https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu\" target=\"_blank\" rel=\"noopener\">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a>页面下载zip包（或用git方式克隆），也可以<a href=\"https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg\" target=\"_blank\" rel=\"noopener\">百度网盘</a>下载，解压到本地文件夹，在文件夹中打开终端，输入<code>sudo sh ./install.sh</code>一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。</p>\n</li>\n<li><p>安装deepin.com应用容器：在<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/</a>中下载想要的容器，点击deb安装即可，以下为推荐容器:</p>\n</li>\n</ol>\n<ul>\n<li>QQ：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/</a></li>\n<li>TIM：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/</a></li>\n<li>QQ轻聊版：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/</a></li>\n<li>微信：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/</a></li>\n<li>Foxmail：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/</a></li>\n<li>百度网盘：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/</a></li>\n<li>360压缩：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/</a></li>\n<li>迅雷急速版:  <a href=\"https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg</a></li>\n<li>Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。</li>\n</ul>\n<h4 id=\"续：安装QQ-微信\"><a href=\"#续：安装QQ-微信\" class=\"headerlink\" title=\"续：安装QQ/微信\"></a>续：安装QQ/微信</h4><hr>\n<p>1.linux上的微信大部分都是网页版微信封装的: <a href=\"https://github.com/geeeeeeeeek/electronic-wechat\" target=\"_blank\" rel=\"noopener\">electronic-wechat</a>、<a href=\"https://github.com/trazyn/weweChat\" target=\"_blank\" rel=\"noopener\">weweChat</a>，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。</p>\n<p>2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现<code>&quot;WeChatWin.dll 缺失问题&quot;</code>报错信息，需要执行下面命令安装额外的环境：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: apt-get install libldap-2.4-2:i386</span><br></pre></td></tr></table></figure></p>\n<p>3.使用docker安装<a href=\"https://hub.docker.com/r/bestwu/qq\" target=\"_blank\" rel=\"noopener\">Tim</a> 和 <a href=\"https://hub.docker.com/r/bestwu/wechat\" target=\"_blank\" rel=\"noopener\">wechat</a>，<a href=\"https://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">docker环境安装教程</a></p>\n<p>4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件<a href=\"https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA\" target=\"_blank\" rel=\"noopener\">riched20.dll</a>(提取密码：rofj)替换掉微信所在容器下的C盘的<code>/windows/system32/riched20.dll</code>，容器路径一般在：<code>~/.cxoffice/[你的容器名]/drive_c/</code>。</p>\n<p>5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。</p>\n<p>6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 <code>sudo apt install libjpeg62:i386</code>，临时解决办法是把图片文件拖动到<code>收藏</code>，然后从收藏转发即可。</p>\n<p>7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。</p>\n<h4 id=\"Ubuntu-18-04开机启动特别慢的问题\"><a href=\"#Ubuntu-18-04开机启动特别慢的问题\" class=\"headerlink\" title=\"Ubuntu 18.04开机启动特别慢的问题\"></a>Ubuntu 18.04开机启动特别慢的问题</h4><hr>\n<p>=&gt; 禁用不必要的开机服务：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出程序开机占用时间排行</span></span><br><span class=\"line\">systemd-analyze blame</span><br><span class=\"line\"><span class=\"comment\"># 禁用plymouth</span></span><br><span class=\"line\">sudo systemctl mask plymouth-start.service</span><br><span class=\"line\">sudo systemctl mask plymouth-read-write.service</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"终端oh-my-zsh配置\"><a href=\"#终端oh-my-zsh配置\" class=\"headerlink\" title=\"终端oh-my-zsh配置\"></a>终端oh-my-zsh配置</h4><hr>\n<ol>\n<li>主题</li>\n</ol>\n<ul>\n<li>gnzh(已使用))</li>\n<li>ys </li>\n<li>avit</li>\n<li>af-magic</li>\n</ul>\n<ol>\n<li>插件</li>\n</ol>\n<ul>\n<li>git =&gt; 自带git状态插件</li>\n<li>svn =&gt; svn状态插件</li>\n<li>colored-man-pages =&gt; man帮助信息高亮</li>\n<li>zsh-syntax-highlighting =&gt; 命令高亮和错误提示</li>\n<li>z =&gt; 自动记录路径快捷跳转</li>\n<li>zsh-autosuggestions =&gt; 根据输入记录自动建议可选输入命令</li>\n</ul>\n<h4 id=\"终端终结者Terminator配置\"><a href=\"#终端终结者Terminator配置\" class=\"headerlink\" title=\"终端终结者Terminator配置\"></a>终端终结者Terminator配置</h4><hr>\n<p>特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局</p>\n<p>注意：可以配合<code>设置-&gt;设备-&gt;键盘-&gt;添加自定义快捷键</code>这样自定义快捷键来启动终端，<br>比如设置<code>Ctrl+Alt+T</code>为<code>terminator --geometry=93x32+450+300</code>，geometry为窗口的布局配置。</p>\n<p>覆盖文件<code>~/.config/terminator/config</code>内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [global_config]</span><br><span class=\"line\">  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler</span><br><span class=\"line\">  suppress_multiple_term_dialog = True</span><br><span class=\"line\">  title_hide_sizetext = True</span><br><span class=\"line\">[keybindings]</span><br><span class=\"line\">  prev_tab = &lt;Alt&gt;1</span><br><span class=\"line\">  reset_clear = &lt;Primary&gt;&lt;Shift&gt;g</span><br><span class=\"line\">  clear = &lt;Primary&gt;l</span><br><span class=\"line\">  switch_to_tab_1 = &lt;Alt&gt;1</span><br><span class=\"line\">  switch_to_tab_2 = &lt;Alt&gt;2</span><br><span class=\"line\">  switch_to_tab_3 = &lt;Alt&gt;3</span><br><span class=\"line\">  switch_to_tab_4 = &lt;Alt&gt;4</span><br><span class=\"line\">  switch_to_tab_5 = &lt;Alt&gt;5</span><br><span class=\"line\">  toggle_scrollbar = None</span><br><span class=\"line\">  toggle_zoom = &lt;Primary&gt;&lt;Shift&gt;x</span><br><span class=\"line\">[layouts]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    [[[child1]]]</span><br><span class=\"line\">      parent = window0</span><br><span class=\"line\">      profile = default</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Terminal</span><br><span class=\"line\">    [[[window0]]]</span><br><span class=\"line\">      parent = <span class=\"string\">\"\"</span></span><br><span class=\"line\">      size = 925, 570</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Window</span><br><span class=\"line\">[plugins]</span><br><span class=\"line\">  [[CustomCommandsMenu]]</span><br><span class=\"line\">    [[[清屏]]]</span><br><span class=\"line\">      <span class=\"built_in\">command</span> = clear</span><br><span class=\"line\">      enabled = True</span><br><span class=\"line\">      name = 清屏</span><br><span class=\"line\">      position = 0</span><br><span class=\"line\">[profiles]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    allow_bold = False</span><br><span class=\"line\">    background_color = <span class=\"string\">\"#fbfbfb\"</span></span><br><span class=\"line\">    background_darkness = 0.93</span><br><span class=\"line\">    background_type = transparent</span><br><span class=\"line\">    copy_on_selection = True</span><br><span class=\"line\">    cursor_color = <span class=\"string\">\"#aaaaaa\"</span></span><br><span class=\"line\">    cursor_shape = ibeam</span><br><span class=\"line\">    font = Ubuntu Light 12</span><br><span class=\"line\">    foreground_color = <span class=\"string\">\"#49494a\"</span></span><br><span class=\"line\">    palette = <span class=\"string\">\"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"</span></span><br><span class=\"line\">    scroll_on_keystroke = False</span><br><span class=\"line\">    scrollbar_position = hidden</span><br><span class=\"line\">    show_titlebar = False</span><br></pre></td></tr></table></figure>\n<h4 id=\"禁用内核更新\"><a href=\"#禁用内核更新\" class=\"headerlink\" title=\"禁用内核更新\"></a>禁用内核更新</h4><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已安装内核</span></span><br><span class=\"line\">$: dpkg --get-selections |grep linux-image</span><br><span class=\"line\"><span class=\"comment\"># 查看正在使用的内核</span></span><br><span class=\"line\">$: uname -a</span><br><span class=\"line\"><span class=\"comment\"># 删除旧内核</span></span><br><span class=\"line\">$: sudo apt-get remove</span><br><span class=\"line\">$: linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-get remove  </span><br><span class=\"line\">$: linux-image-extra-x.xx.x-xx-generic  </span><br><span class=\"line\"><span class=\"comment\"># 或用这个命令移除</span></span><br><span class=\"line\">$: sudo dpkg --purge linux-image-x.x.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 禁止更新内核，需时间来验证</span></span><br><span class=\"line\">$: sudo apt-mark hold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：</span></span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic</span><br></pre></td></tr></table></figure>\n<h4 id=\"终端常用等宽字体\"><a href=\"#终端常用等宽字体\" class=\"headerlink\" title=\"终端常用等宽字体\"></a>终端常用等宽字体</h4><hr>\n<ul>\n<li>AR PL UKai CN 12</li>\n<li>Bitstream Vera Sans Mono 10</li>\n<li>Courier 10 Pitch 11</li>\n<li>DejaVu Sans Mono 10</li>\n<li>FreeMono 11</li>\n<li>Nimbus Mono L 12</li>\n<li>TlwgMono 11 </li>\n</ul>\n<h4 id=\"crossover18破解\"><a href=\"#crossover18破解\" class=\"headerlink\" title=\"crossover18破解\"></a>crossover18破解</h4><hr>\n<p>下载 <a href=\"https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g\" target=\"_blank\" rel=\"noopener\">CrossoverPatch</a> <code>密码: ffp0</code>，解压后替换文件：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  备份原文件</span></span><br><span class=\"line\">$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak</span><br><span class=\"line\"><span class=\"comment\"># 替换文件</span></span><br><span class=\"line\">$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"vim插件配置\"><a href=\"#vim插件配置\" class=\"headerlink\" title=\"vim插件配置\"></a>vim插件配置</h4><hr>\n<ol>\n<li><a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"noopener\">Vundle</a> =&gt; 插件管理器，编辑.vimrc，然后执行命令<code>vim +PluginInstall</code>即可安装  </li>\n<li><a href=\"https://github.com/vim-airline/vim-airline\" target=\"_blank\" rel=\"noopener\">vim-airline</a> =&gt; 底部状态栏  </li>\n<li><a href=\"https://juejin.im/post/5a38c37f6fb9a0450909a151\" target=\"_blank\" rel=\"noopener\">其他配置</a></li>\n</ol>\n<h4 id=\"Ubuntu18-04-定制Mac主题\"><a href=\"#Ubuntu18-04-定制Mac主题\" class=\"headerlink\" title=\"Ubuntu18.04 定制Mac主题\"></a>Ubuntu18.04 定制Mac主题</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-5.png\" alt=\"overview.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-6.png\" alt=\"desktop.png\"></p>\n<ol>\n<li>安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (<code>sudo aptitude install [name]</code>)</li>\n<li>安装GTK3主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li>\n<li>使用tweak载入应用程序主题 =&gt; tweak — 外观 — 应用程序 — 选择X-Arc-Collection</li>\n<li>安装gnome-shell 主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li>\n<li>安装gnome-shell 插件 =&gt; <a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes</a> ( 之后重启Gnome =&gt; [Alt + F2] &amp; [输入 r] &amp; [点击 Enter] )</li>\n<li>使用tweak载入shell主题 =&gt; tweak — 外观 — shell — 选择Sierra shell主题</li>\n<li>下载Mac图标主题 <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a> 或 <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li>\n<li>图标文件夹移动到 ~/.icons目录下(没有则新建目录)</li>\n<li>使用tweak载入icon主题 =&gt; tweak — 外观 — 图标 — 选择对应的图标主题</li>\n<li>安装gnome-shell插件 =&gt; Dash to dock (将原生dock转变为可定制的浮动dock)</li>\n<li>定制firefox主题 =&gt; <a href=\"https://github.com/vinceliuice/Mojave-gtk-theme\" target=\"_blank\" rel=\"noopener\">Majave-gtk-theme</a></li>\n</ol>\n<h4 id=\"Ubuntu18-04-自己定制-登录、锁屏界面的图片和样式\"><a href=\"#Ubuntu18-04-自己定制-登录、锁屏界面的图片和样式\" class=\"headerlink\" title=\"Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\"></a>Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-7.png\" alt=\"lockscreen.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-8.png\" alt=\"loginscreen.png\"></p>\n<ol>\n<li>安装脚本 =&gt; <a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu\" target=\"_blank\" rel=\"noopener\">github / nojsja / login-manager-config-ubuntu</a>  </li>\n<li>说明=&gt; 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的<code>convert -blur</code>命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装<code>gnome-tweak-tool</code>进行更改。  </li>\n<li>之前我想通过更改<code>/usr/share/gnome-shell/theme/gdm3.css</code>文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。</li>\n<li>注意=&gt; 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。</li>\n</ol>\n<h4 id=\"Ubuntu18-04-关于定制plymouth主题来更换开机动画\"><a href=\"#Ubuntu18-04-关于定制plymouth主题来更换开机动画\" class=\"headerlink\" title=\"Ubuntu18.04 关于定制plymouth主题来更换开机动画\"></a>Ubuntu18.04 关于定制plymouth主题来更换开机动画</h4><hr>\n<blockquote>\n<p>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去<a href=\"https://www.gnome-look.org/browse/cat/108/\" target=\"_blank\" rel=\"noopener\">gnome-look</a>看看，这里提供一个苹果主题<a href=\"https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ\" target=\"_blank\" rel=\"noopener\">darwin</a>，密码: <code>rc6u</code>。</p>\n<ol>\n<li>解压下载的plymouth主题到 <code>/usr/share/plymouth/themes</code></li>\n</ol>\n</blockquote>\n<ol>\n<li><p>执行安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新配置，需要手动选择plymouth编号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --config default.plymouth</span><br><span class=\"line\">$: sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手动更改错误路径参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /usr/share/plymouth/themes/default.plymouth</span><br></pre></td></tr></table></figure>\n<p>替换<code>ImageDir</code>和<code>ScriptFile</code>为正确的plymouth文件存放路径，替换后：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageDir=/usr/share/plymouth/themes/[THEME]</span><br><span class=\"line\">ScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Ubuntu18-04-使用-Dash-to-dock-插件时同时出现两个dock的问题\"><a href=\"#Ubuntu18-04-使用-Dash-to-dock-插件时同时出现两个dock的问题\" class=\"headerlink\" title=\"Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\"></a>Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</h4><hr>\n<blockquote>\n<p>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。  </p>\n</blockquote>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-9.png\" alt=\"dock-noise.png\"></p>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-10.png\" alt=\"dock-single.png\"></p>\n<h4 id=\"Ubuntu18-04-添加软件源提示：没有Release文件，忽略源的问题\"><a href=\"#Ubuntu18-04-添加软件源提示：没有Release文件，忽略源的问题\" class=\"headerlink\" title=\"Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\"></a>Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-11.png\" alt=\"dock-tweak.png\"></p>\n<ol>\n<li>打开 软件与更新</li>\n<li>选择那个源点击编辑</li>\n<li>更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)</li>\n</ol>\n<h4 id=\"Ubuntu18-04-解决一些软件依赖不满足问题的问题\"><a href=\"#Ubuntu18-04-解决一些软件依赖不满足问题的问题\" class=\"headerlink\" title=\"Ubuntu18.04 解决一些软件依赖不满足问题的问题\"></a>Ubuntu18.04 解决一些软件依赖不满足问题的问题</h4><hr>\n<p>=&gt; 以Ubuntu18.04安装16.04版本网易云音乐为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># gdebi安装包</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb</span><br><span class=\"line\">$: Dependency is not satisfiable: libqt5libqgtk2</span><br><span class=\"line\"># Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，</span><br><span class=\"line\"># 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题</span><br></pre></td></tr></table></figure><br>=&gt; 方法：解压安装包修改依赖项并重新打包<br>=&gt; 步骤：</p>\n<ol>\n<li>deb包同级目录下创建文件夹<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: mkdir netease-cloud-music</span><br></pre></td></tr></table></figure></li>\n<li>解压安装包到这个文件夹中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music</span><br></pre></td></tr></table></figure></li>\n<li>解压控制信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music&#x2F;DEBIAN&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim编辑文件</span><br><span class=\"line\">$: vim neteas-cloud-music&#x2F;DEBIAN&#x2F;control</span><br><span class=\"line\"># 使用vim正则对libqt5libqgtk2进行搜索替换</span><br><span class=\"line\">:1,$s&#x2F;libqt5libqgtk2&#x2F;qt5-style-plugins&#x2F;g</span><br><span class=\"line\"># 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可</span><br></pre></td></tr></table></figure></li>\n<li>生成新的安装包<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg-deb -b neteas-cloud-music</span><br><span class=\"line\">$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure></li>\n<li>安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gdebi或dpkg进行安装即可</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br><span class=\"line\">$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Ubuntu18-04-安装Cinnamon桌面启动器\"><a href=\"#Ubuntu18-04-安装Cinnamon桌面启动器\" class=\"headerlink\" title=\"Ubuntu18.04 安装Cinnamon桌面启动器\"></a>Ubuntu18.04 安装Cinnamon桌面启动器</h4><hr>\n<blockquote>\n<p>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。</p>\n</blockquote>\n<p>已知问题：</p>\n<ul>\n<li>Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便</li>\n<li>输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音</li>\n<li>默认没有集成蓝牙管理器，需要安装<code>blueman</code>进行蓝牙管理</li>\n<li>锁屏界面可能会非常卡顿</li>\n<li>Cinnamon面板(等同gnome任务栏)默认安装了<code>系统托盘</code>，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示</li>\n<li>Cinnamon桌面动画性能也很低效，建议强制使用独立显卡</li>\n</ul>\n<p>安装步骤：</p>\n<ol>\n<li>添加仓库Key<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:embrosyn/cinnamon  </span><br><span class=\"line\">$: sudo apt update &amp;&amp; sudo apt install cinnamon</span><br></pre></td></tr></table></figure></li>\n<li>安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境</li>\n<li>卸载cinnamon<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install ppa-purge</span><br><span class=\"line\">$: sudo ppa-purge ppa:embrosyn/cinnamon</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Linux分区过小导致后期容量不足解决方法\"><a href=\"#Linux分区过小导致后期容量不足解决方法\" class=\"headerlink\" title=\"Linux分区过小导致后期容量不足解决方法\"></a>Linux分区过小导致后期容量不足解决方法</h4><hr>\n<p>=&gt; 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了</p>\n<ul>\n<li>方法1<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get clean</span><br><span class=\"line\">$: sudo apt-get autoremove</span><br></pre></td></tr></table></figure>\n如果仍然空间不足，使用方法2。</li>\n<li>方法2<br>建立目录软链接解决(软链接和硬链接了解一下)：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以/var目录为例 将占用过大的文件夹移出</span></span><br><span class=\"line\">$: mv /var/lib /opt</span><br><span class=\"line\"><span class=\"comment\"># 建立opt下的lib内目录的软链接到var目录</span></span><br><span class=\"line\">$: sudo ln -s /opt/lib /var</span><br></pre></td></tr></table></figure></li>\n<li>方法3<br>如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。</li>\n</ul>\n<h4 id=\"Shadowsocks-Qt5安装的问题\"><a href=\"#Shadowsocks-Qt5安装的问题\" class=\"headerlink\" title=\"Shadowsocks-Qt5安装的问题\"></a>Shadowsocks-Qt5安装的问题</h4><hr>\n<blockquote>\n<p>shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 <strong>软件源提示没有Release文件的问题</strong>，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为<code>artful</code>，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。  </p>\n</blockquote>\n<p>> sudo add-apt-repository ppa:hzwhuang/ss-qt5<br>> sudo apt update<br>> sudo apt-get install shadowsocks-qt5  </p>\n<h4 id=\"使用polipo开启终端代理-需要先开启shadowsocks代理\"><a href=\"#使用polipo开启终端代理-需要先开启shadowsocks代理\" class=\"headerlink\" title=\"使用polipo开启终端代理(需要先开启shadowsocks代理)\"></a>使用polipo开启终端代理(需要先开启shadowsocks代理)</h4><hr>\n<ul>\n<li>安装脚本(适合于bash和zsh终端) =&gt; <a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal\" target=\"_blank\" rel=\"noopener\">github / nojsja / polipo-install-config.sh”</a></li>\n<li>使用方式<br>> 说明：’ hp ‘ == ‘ http_proxy=<a href=\"http://localhost:8123\" target=\"_blank\" rel=\"noopener\">http://localhost:8123</a> ‘ for any command<br>> 说明：’ gp ‘ == ‘http.proxy=localhost:8123’ for git proxy config<br>> 使用1：<code>hp curl ip.gs</code><br>> 使用2：<code>git clone https://android.googlesource.com/tools/repo --config $gp</code></li>\n<li>如果polipo启动报错的话(通过<code>systemctl status polipo</code>查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(<code>/etc/polipo/config</code>)禁用日至记录功能<h4 id=\"将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\"><a href=\"#将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\" class=\"headerlink\" title=\"将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\"></a>将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</h4></li>\n</ul>\n<hr>\n<blockquote>\n<p>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。</p>\n</blockquote>\n<p>=&gt; 安装脚本(测试环境ubuntu18.04) =&gt; <a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/application\" target=\"_blank\" rel=\"noopener\">github / nojsja / makeIconLink</a><br>=&gt; 使用方式</p>\n<ul>\n<li>安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内</li>\n<li>查看说明：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure></li>\n<li>安装指令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --dir /path/to/[<span class=\"built_in\">exec</span>-file] --target [<span class=\"built_in\">exec</span>-file-name] --icon [icon-file-name]</span><br></pre></td></tr></table></figure></li>\n<li>卸载指令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --uninstall [<span class=\"built_in\">exec</span>-file-name]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"自定义shadowsocks服务开机自启动脚本\"><a href=\"#自定义shadowsocks服务开机自启动脚本\" class=\"headerlink\" title=\"自定义shadowsocks服务开机自启动脚本\"></a>自定义shadowsocks服务开机自启动脚本</h4><hr>\n<blockquote>\n<p>使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~</p>\n</blockquote>\n<p>=&gt; 我的服务脚本：<a href=\"https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/startup.sh\" target=\"_blank\" rel=\"noopener\">startup.sh</a>、<a href=\"https://github.com/NoJsJa/maintenance/blob/master/code/shell/desktop/shadowsocks\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br>=&gt; 步骤：</p>\n<ul>\n<li>编写shadowsocks service脚本文件，比如shadow.service</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 描述</span></span><br><span class=\"line\">Description=Shadowsocks Service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=oneshot</span><br><span class=\"line\"><span class=\"comment\"># 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)</span></span><br><span class=\"line\">ExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start</span><br><span class=\"line\">ExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop</span><br><span class=\"line\">RemainAfterExit=yes</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\"><span class=\"comment\"># 一些简单的依赖信息</span></span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将服务配置文件放到<code>/etc/systemd/system</code>下<br>> sudo cp shadow.service /etc/systemd/system</li>\n<li>设置服务自启动<br>> systemctl enable shadow</li>\n<li>服务开启和关闭<br>> systemctl start shadow<br>> systemctl stop shadow</li>\n</ul>\n<h4 id=\"Ubuntu18-04设置shadowsocks全局pac自动代理对浏览器无效\"><a href=\"#Ubuntu18-04设置shadowsocks全局pac自动代理对浏览器无效\" class=\"headerlink\" title=\"Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\"></a>Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</h4><hr>\n<p>=&gt; 先来一个shadowsocks全局pac代理的步骤：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip需要先安装</span></span><br><span class=\"line\">$: sudo apt-get install python-pip python-dev build-essential</span><br><span class=\"line\">$: sudo pip install --upgrade pip</span><br><span class=\"line\">$: sudo pip install --upgrade virtualenv</span><br><span class=\"line\"><span class=\"comment\"># 安装pac自动生成程序</span></span><br><span class=\"line\">$: sudo pip install genpac</span><br><span class=\"line\"><span class=\"comment\"># 生成pac文件</span></span><br><span class=\"line\">$: mkdir ~/shadowsocks</span><br><span class=\"line\">$: <span class=\"built_in\">cd</span> shadowsocks</span><br><span class=\"line\"><span class=\"comment\"># proxy配置中的地址和端口具体要看你的shadowsocks连接配置</span></span><br><span class=\"line\">$: genpac --proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> -o autoproxy.pac --gfwlist-url=<span class=\"string\">\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"</span></span><br></pre></td></tr></table></figure><br>以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -&gt; 网络 -&gt; 网络代理 -&gt; 自动 -&gt; 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。<br>=&gt; 再写一个脚本<a href=\"https://github.com/NoJsJa/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac\" target=\"_blank\" rel=\"noopener\">genpac-command</a>，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># # 在脚本目录下执行</span></span><br><span class=\"line\"><span class=\"comment\"># 显示帮助信息</span></span><br><span class=\"line\">$: bash genpac-command --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 在线更新</span></span><br><span class=\"line\">$: bash genpac-command --update-online</span><br><span class=\"line\"><span class=\"comment\"># 从本地user-rules.txt文件读取更新</span></span><br><span class=\"line\">$: bash genpac-command --update-local</span><br><span class=\"line\"><span class=\"comment\"># 添加自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 添加多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org atom.io</span><br><span class=\"line\"><span class=\"comment\"># 删除自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 删除多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org atom.io</span><br></pre></td></tr></table></figure><br>=&gt; <strong>不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：</strong></p>\n<h4 id=\"Atom编辑器内存占用过大的问题\"><a href=\"#Atom编辑器内存占用过大的问题\" class=\"headerlink\" title=\"Atom编辑器内存占用过大的问题\"></a>Atom编辑器内存占用过大的问题</h4><hr>\n<blockquote>\n<p>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。</p>\n</blockquote>\n<h4 id=\"Grub2-主题安装\"><a href=\"#Grub2-主题安装\" class=\"headerlink\" title=\"Grub2 主题安装\"></a>Grub2 主题安装</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-12.png\" alt=\"source.png\"></p>\n<blockquote>\n<p>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。</p>\n</blockquote>\n<ol>\n<li>解压下载的主题文件 =&gt; <a href=\"https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ\" target=\"_blank\" rel=\"noopener\">Vimix</a>，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)</li>\n<li>在/boot/grub里创建GRUB2主题目录themes<br>> sudo mkdir -p /boot/grub/themes</li>\n<li>将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下<br>> sudo cp -r Vimix /boot/grub/themes</li>\n<li>修改/etc/default/grub配置文件<br>> sudo gedit /etc/default/grub<br>在文件最后添加：GRUB_THEME=”/boot/grub/themes/Vimix/theme.txt” 并保存</li>\n<li>更新GRUB<br>> sudo update-grub</li>\n<li>重启即生效(如果重启卡住请强制关机后再启动)</li>\n</ol>\n<h4 id=\"Ubuntu18-04-解决下载额外数据文件失败：ttf-mscorefonts-installer\"><a href=\"#Ubuntu18-04-解决下载额外数据文件失败：ttf-mscorefonts-installer\" class=\"headerlink\" title=\"Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\"></a>Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-13.png\" alt=\"firefox_proxy.png\"></p>\n<ol>\n<li><a href=\"http://sourceforge.net/projects/corefonts/files/the%20fonts/final/\" target=\"_blank\" rel=\"noopener\">sourceforge</a>下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li>\n<li>运行字体配置程序<br>> sudo dpkg-reconfigure ttf-mscorefonts-installer</li>\n<li>在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li>\n</ol>\n<h4 id=\"Ubuntu18-04-WPS-提示字体缺失的解决方法\"><a href=\"#Ubuntu18-04-WPS-提示字体缺失的解决方法\" class=\"headerlink\" title=\"Ubuntu18.04 WPS 提示字体缺失的解决方法\"></a>Ubuntu18.04 WPS 提示字体缺失的解决方法</h4><hr>\n<p>下载缺失的字体文件<a href=\"https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q\" target=\"_blank\" rel=\"noopener\">fonts</a> (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成字体的索引信息</span></span><br><span class=\"line\">$: sudo mkfontscale</span><br><span class=\"line\">$: sudo mkfontdir</span><br><span class=\"line\"><span class=\"comment\"># 更新字体缓存</span></span><br><span class=\"line\">$: sudo <span class=\"built_in\">fc</span>-cache</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Ubuntu20-04-使用deepin-screenshot截图后无法粘贴到输入框\"><a href=\"#Ubuntu20-04-使用deepin-screenshot截图后无法粘贴到输入框\" class=\"headerlink\" title=\"Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\"></a>Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</h4><hr>\n<p>安装<code>xfce4-clipman</code>，每次使用深度截图时保证它开启<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt install xfce4-clipman</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Ubuntu18-04-更新Gnome版本\"><a href=\"#Ubuntu18-04-更新Gnome版本\" class=\"headerlink\" title=\"Ubuntu18.04 更新Gnome版本\"></a>Ubuntu18.04 更新Gnome版本</h4><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Upgrade</span></span><br><span class=\"line\"><span class=\"comment\">#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:</span></span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3-staging</span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3</span><br><span class=\"line\">$: sudo apt install ubuntu-gnome-desktop^</span><br><span class=\"line\"><span class=\"comment\"># The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:</span></span><br><span class=\"line\">$: update-manager -c</span><br><span class=\"line\"><span class=\"comment\"># Alternatively, run the following command:</span></span><br><span class=\"line\">$: sudo <span class=\"keyword\">do</span>-release-upgrade</span><br></pre></td></tr></table></figure>\n<h4 id=\"Win10-Ubuntu18-04-双系统时间显示不对\"><a href=\"#Win10-Ubuntu18-04-双系统时间显示不对\" class=\"headerlink\" title=\"Win10 + Ubuntu18.04 双系统时间显示不对\"></a>Win10 + Ubuntu18.04 双系统时间显示不对</h4><hr>\n<blockquote>\n<p>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。</p>\n</blockquote>\n<ol>\n<li>先在Ubuntu下更新一下时间<br>> sudo apt-get install ntpdate<br>> sudo ntpdate time.windows.com</li>\n<li>将时间更新到硬件上<br>> sudo hwclock —localtime —systohc</li>\n<li>关闭linux重新进入windows系统，发现时间正常了</li>\n</ol>\n<h4 id=\"Ubuntu18-04-安装系统时说明-双硬盘\"><a href=\"#Ubuntu18-04-安装系统时说明-双硬盘\" class=\"headerlink\" title=\"Ubuntu18.04 安装系统时说明(双硬盘)\"></a>Ubuntu18.04 安装系统时说明(双硬盘)</h4><hr>\n<blockquote>\n<p>主要分为 [ <em>GPT磁盘分区+UEFI引导方案</em> ] 和 [ <em>传统MBR磁盘分区 + LEGANCY引导方案</em> ]</p>\n<ol>\n<li>方案一(兼容方案 gpt+uefi / mbr+legancy)<br>使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配”/boot “分区，分配一个大小为1GB左右的”保留bios启动区域”(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区”/“，8G内存的情况下最好还是分配8G的swap交换分区，另外除了”保留bios启动区域”为主分区，其它分区均为逻辑分区，最后一步很重要 — 格式化每个分区，要不然安装很可能会出错！<a href=\"https://blog.csdn.net/jesse_mx/article/details/61425361\" target=\"_blank\" rel=\"noopener\">参考</a></li>\n<li>方案二(gpt+uefi 已使用方案)<br>创建”efi系统分区”，同时不需要划分”/boot”分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分”/“根分区，除了根分区所有分区都为逻辑分区，最后选择”安装启动引导器的设备”为刚才创建的”efit系统分区”。</li>\n<li>方案三(传统mbr+legancy方案)<br>传统的legancy + mbr的安装，至少划分”/boot”分区(主分区) 和 “/“根分区，其余的分区按需划分，最后选择”安装启动引导器的设备”为创建的”/boot”挂载点。</li>\n</ol>\n</blockquote>\n<h4 id=\"Ubuntu-18-04-使用lvm逻辑卷管理方式安装后启动很慢的问题\"><a href=\"#Ubuntu-18-04-使用lvm逻辑卷管理方式安装后启动很慢的问题\" class=\"headerlink\" title=\"Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题\"></a>Ubuntu 18.04 使用lvm逻辑卷管理方式安装后启动很慢的问题</h4><p><a href=\"https://askubuntu.com/questions/1030867/how-to-diagnose-fix-very-slow-boot-on-ubuntu-18-04\" target=\"_blank\" rel=\"noopener\">=&gt; 原帖子</a></p>\n<ol>\n<li>编辑文件 <code>/etc/default/grub</code> 的 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 这一行，加入一个参数<strong>noresume</strong><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=<span class=\"string\">\"quiet splash noresume\"</span></span><br></pre></td></tr></table></figure></li>\n<li>更新grub<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure></li>\n<li>重启电脑</li>\n</ol>\n<h4 id=\"Ubuntu18-04-安装网易云音乐1-1-0后不能打开的解决方法\"><a href=\"#Ubuntu18-04-安装网易云音乐1-1-0后不能打开的解决方法\" class=\"headerlink\" title=\"Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\"></a>Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</h4><hr>\n<ul>\n<li>使用root权限命令行后台启动并且屏蔽输出<br>> sudo netease-cloud-music &gt; /dev/null 2&gt;&amp;1  &amp;</li>\n<li>规避session-manager引起的bug<br>> alias netease=’unset SESSION_MANAGER &amp;&amp; netease-cloud-music’<br>> netease &gt; /dev/null &amp;</li>\n<li>别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端<a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a></li>\n<li>这里还有个别人做的针对ubuntu18.04的<a href=\"https://github.com/innoob/netease-cloud-music\" target=\"_blank\" rel=\"noopener\">重新构建版本</a>，可以正常使用，也没有重复登录的bug</li>\n</ul>\n<h4 id=\"Ubuntu18-04-Crossover17安装QQ后乱码的解决方法\"><a href=\"#Ubuntu18-04-Crossover17安装QQ后乱码的解决方法\" class=\"headerlink\" title=\"Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\"></a>Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</h4><hr>\n<blockquote>\n<p>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符  </p>\n</blockquote>\n<p>使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的<a href=\"https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA\" target=\"_blank\" rel=\"noopener\">ume-ui-gothic.ttf</a>字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。</p>\n<h4 id=\"Ubuntu18-04-通过tweak安装gnome插件Blyr后设置插件报错\"><a href=\"#Ubuntu18-04-通过tweak安装gnome插件Blyr后设置插件报错\" class=\"headerlink\" title=\"Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\"></a>Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</h4><hr>\n<p>=&gt; 错误信息：<code>Error: Requiring Clutter, version none: Typelib file for namespace &#39;Clutter&#39; (any version) not found ...</code><br>=&gt; 原因分析：该插件需要的依赖Clutter尚未安装<br>=&gt; 解决方法：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Ubuntu18-04-一直提示-“检测到系统程序出现问题”\"><a href=\"#Ubuntu18-04-一直提示-“检测到系统程序出现问题”\" class=\"headerlink\" title=\"Ubuntu18.04 一直提示 “检测到系统程序出现问题”\"></a>Ubuntu18.04 一直提示 “检测到系统程序出现问题”</h4><hr>\n<p>ubuntu18.04已经移除了gksu软件，所以使用替代命令</p>\n<ol>\n<li>添加alias命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">alias</span> gksu=<span class=\"string\">'pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'</span></span><br></pre></td></tr></table></figure></li>\n<li>编辑错误报告相关设置  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: gksu gedit /etc/default/apport</span><br><span class=\"line\"><span class=\"comment\"># 把`enable = 1`改为`enable = 0`</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Ubuntu18-04-Gnome-Shell-插件\"><a href=\"#Ubuntu18-04-Gnome-Shell-插件\" class=\"headerlink\" title=\"Ubuntu18.04 Gnome-Shell 插件\"></a>Ubuntu18.04 Gnome-Shell 插件</h4><hr>\n<ul>\n<li><a href=\"https://extensions.gnome.org/extension/97/coverflow-alt-tab/\" target=\"_blank\" rel=\"noopener\">CoverFlow Alt-Tab</a> =&gt; 窗口Tab切换预览(★★★★☆)</li>\n<li><a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes(必要)</a> =&gt; 用户主题安装(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/307/dash-to-dock/\" target=\"_blank\" rel=\"noopener\">Dash To Dock</a> =&gt; dock栏(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash To Panel</a> =&gt; 将dock和顶栏显示在一起(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/595/autohide-battery/\" target=\"_blank\" rel=\"noopener\">Autohide Battery</a> =&gt; 电池充满并连接电源时自动隐藏电池按钮(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/8/places-status-indicator/\" target=\"_blank\" rel=\"noopener\">Places Status Indicator</a> =&gt; 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/7/removable-drive-menu/\" target=\"_blank\" rel=\"noopener\">Removable Drive Menu</a> =&gt; 顶部任务栏显示可移除的已挂载设备(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/826/suspend-button/\" target=\"_blank\" rel=\"noopener\">Suspend Button</a> =&gt; 顶部菜单栏显示休眠按钮(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a> =&gt; 顶部通知图标托盘(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1031/topicons/\" target=\"_blank\" rel=\"noopener\">TopIconsPlus</a> =&gt; 顶部通知图标托盘，自定义图标显示参数(★★★★☆)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1251/blyr/\" target=\"_blank\" rel=\"noopener\">Blyr</a> =&gt; 模糊应用预览背景图(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/358/activities-configurator/\" target=\"_blank\" rel=\"noopener\">Activities Configurator</a> =&gt; 配置左上角活动按钮(★★★★☆)</li>\n<li><a href=\"https://extensions.gnome.org/extension/427/workspaces-to-dock/\" target=\"_blank\" rel=\"noopener\">Workspace to Dock</a> =&gt; 将工作区转换为悬浮dock(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1036/extensions/\" target=\"_blank\" rel=\"noopener\">Extensions</a> =&gt; 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/779/clipboard-indicator/\" target=\"_blank\" rel=\"noopener\">Clipboard Indicator</a> =&gt; 可视化剪贴板(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/906/sound-output-device-chooser/\" target=\"_blank\" rel=\"noopener\">Sound Input &amp; Output Device Chooser</a> =&gt; 声音输入和输入设备快速选择(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 取消“窗口已就绪”提示直接提升窗口(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/\" target=\"_blank\" rel=\"noopener\">Bluetooth quick connect</a> =&gt; 蓝牙设备快速连接和断开(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1403/remove-alttab-delay/\" target=\"_blank\" rel=\"noopener\">Remove Alt+Tab Delay</a> =&gt; 移除【Alt + Tab】的开启应用预览延迟(★★★★★)</li>\n<li><a href=\"https://extensions.gnome.org/extension/1162/emoji-selector/\" target=\"_blank\" rel=\"noopener\">Emoji Selector</a> =&gt; 快速选择Emoji表情(★★★★)</li>\n</ul>\n<h4 id=\"Ubuntu18-04-插件-Dash-to-dock-一些常用设置\"><a href=\"#Ubuntu18-04-插件-Dash-to-dock-一些常用设置\" class=\"headerlink\" title=\"Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\"></a>Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</h4><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Use Custom Dock Indicator ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Custom Dock Shrink ( Required for Good looking) (  Required )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-shrink <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dock Transparency mode ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Restore to Default</span></span><br><span class=\"line\">$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ubuntu18-04-主题\"><a href=\"#Ubuntu18-04-主题\" class=\"headerlink\" title=\"Ubuntu18.04 主题\"></a>Ubuntu18.04 主题</h4><hr>\n<ul>\n<li>GTK3主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li>\n<li>GTK3主题(★★★★★) =&gt; <a href=\"https://www.gnome-look.org/p/1241688\" target=\"_blank\" rel=\"noopener\">McOS-themes</a></li>\n<li>Gnome Shell主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix\" target=\"_blank\" rel=\"noopener\">Flat-Remix</a></li>\n<li>Gnome Shell主题(★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1171095/\" target=\"_blank\" rel=\"noopener\">Human</a></li>\n<li>Gnome Shell主题(★★★★★) =&gt; <a href=\"https://www.opendesktop.org/c/1460761561\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li>\n<li>Gnome Shell主题(?) =&gt; <a href=\"https://www.gnome-look.org/p/1213208/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li>\n<li>Icon 主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix/releases\" target=\"_blank\" rel=\"noopener\">flat-remix</a></li>\n<li>Icon 主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1012200/\" target=\"_blank\" rel=\"noopener\">Mac OS X Icon</a></li>\n<li>Icon 主题(★★★★★) =&gt; <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a></li>\n<li>Icon 主题(★★★★★) <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li>\n<li>Icon 主题(★★★★☆) =&gt; <a href=\"https://github.com/zayronxio/Macos-sierra-CT\" target=\"_blank\" rel=\"noopener\">MacOS sierra ct</a></li>\n<li>Cursor主题(★★★★☆) =&gt; <a href=\"https://krourke.org/projects/art/capitaine-cursors\" target=\"_blank\" rel=\"noopener\">Capitaine Cursors</a></li>\n</ul>\n<h4 id=\"chrome实用插件整理\"><a href=\"#chrome实用插件整理\" class=\"headerlink\" title=\"chrome实用插件整理\"></a>chrome实用插件整理</h4><hr>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">infinity pro 标签页</a> =&gt; 主页标签管理器(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Octotree</a> =&gt; github仓库文件资源浏览树(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Postman</a> =&gt; API测试和请求模拟器(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a> =&gt; 大家都用的代理软件(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">印象笔记剪藏</a> =&gt; 随时随地把网络资源保存到你的笔记本里(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SimpRead</a> =&gt; 让浏览器支持纯净的阅读模式(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Full Page Screen Capture</a> =&gt; 全屏截图(★★★★☆)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">油猴tampermonkey</a> =&gt; 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Checker Plus for Gmail</a> =&gt; Google邮件提示插件(★★★★☆)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Vimium</a> =&gt; 让google浏览器支持vim模式(firefox也有)(★★★★★)</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg\" target=\"_blank\" rel=\"noopener\">拷贝为Markdown</a> =&gt; 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)</li>\n</ul>\n<h4 id=\"实用程序和命令\"><a href=\"#实用程序和命令\" class=\"headerlink\" title=\"实用程序和命令\"></a>实用程序和命令</h4><hr>\n<ul>\n<li><a href=\"https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager\" target=\"_blank\" rel=\"noopener\">fonts-firacode编程字体</a> =&gt; 解决vscode字体间隙过小的问题<code>sudo apt install fonts-firacode</code></li>\n<li><a href=\"https://vivaldi.com\" target=\"_blank\" rel=\"noopener\">vivaldi浏览器</a> =&gt; 可定制化程度高的个性化浏览器(★★★★★)</li>\n<li>Terminator =&gt; 默认gnome终端升级版(★★★★★)</li>\n<li>Timeshift =&gt; 创建系统快照，增量备份(★★★★★)</li>\n<li>ipython3(命令工具) =&gt; python交互解释器(★★★★★)</li>\n<li>jupyter =&gt; 交互式数据分析和记录工具(★★★★☆)</li>\n<li>pdb/ipdb(命令工具) =&gt; python调试器(★★★★☆)</li>\n<li>trash-cli(命令工具) =&gt; 命令行回收站(★★★★★)</li>\n<li>bat(命令工具) =&gt; cat升级版，支持语法高亮和git状态显示(★★★★★)</li>\n<li>axel(命令工具) =&gt; 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)</li>\n<li><a href=\"https://github.com/aria2/aria2\" target=\"_blank\" rel=\"noopener\">aria2(命令工具)</a> =&gt; 强大的命令行下载工具</li>\n<li><a href=\"https://github.com/oguzhaninan/Stacer\" target=\"_blank\" rel=\"noopener\">stacer</a> =&gt; linux电脑管家(★★★★★)</li>\n<li><a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a> =&gt; 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆[注：网易云音乐官方已修复]，界面还很酷(★★★★★)</li>\n<li>parallel(命令工具) =&gt; 利用系统的多核来并行执行你的程序(★★★★☆)</li>\n<li>cheat(命令工具) =&gt; 类似man命令的功能，简洁高效(★★★★☆)</li>\n<li>topgrade(命令工具) =&gt; 一个命令更新所有软件(★★★★)</li>\n<li><a href=\"https://www.dbkoda.com/\" target=\"_blank\" rel=\"noopener\">dbKoda</a> =&gt; mongodb GUI工具(★★★★☆)</li>\n<li><a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"noopener\">mongodb compass</a> =&gt; mongodb GUI工具(★★★★)</li>\n<li><a href=\"https://github.com/phw/peek\" target=\"_blank\" rel=\"noopener\">peek</a> =&gt; 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)</li>\n<li>tmux =&gt; 终端管理器(★★★★)</li>\n<li>深度终端(ubuntu商店下载) =&gt; 支持分屏，内置实用主题(★★★★☆)</li>\n<li>深度截图(ubuntu商店下载) =&gt; 支持截图编辑(★★★★★)</li>\n<li>flameshot =&gt; 支持Ubuntu20.04的截图编辑工具(★★★★★)</li>\n<li><a href=\"https://webtorrent.io/desktop/\" target=\"_blank\" rel=\"noopener\">WebTorrent</a>、<a href=\"https://www.frostwire.com/\" target=\"_blank\" rel=\"noopener\">FrostWire</a> =&gt; bt下载工具，支持边下边播(★★★★)</li>\n<li><a href=\"https://www.syntevo.com/smartgit/\" target=\"_blank\" rel=\"noopener\">SmartGit</a> =&gt; linux平台免费的GIT GUI工具(★★★★★)</li>\n<li>FileZilla =&gt; ftp工具(★★★★★)</li>\n<li><a href=\"https://github.com/Suremotoo/e-tools\" target=\"_blank\" rel=\"noopener\">e-tools</a> =&gt; coder常用小工具(★★★★)</li>\n<li><a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">WhatEver</a> =&gt; linux第三方印象笔记客户端，基于网页版(★★★★)</li>\n<li><a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps</a> =&gt; linux office for free made by KingSoftware(★★★★★)</li>\n<li><a href=\"https://atom.io/\" target=\"_blank\" rel=\"noopener\">Atom</a> =&gt; 我一直在用的编辑器，没有固态硬盘的不推荐使用(★★★★☆)</li>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode</a> =&gt; 轻量化编辑器，没有Atom人性化，但是很快。都是JS写的，性能差距咋这么大呢 ? (★★★★★)</li>\n<li>ndb =&gt; node.js/javascript 调试器(★★★★★)</li>\n<li><a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh\" target=\"_blank\" rel=\"noopener\">nvm</a> =&gt; nodejs版本管理器</li>\n<li>albert (添加软件源 <code>ppa:noobslab/macbuntu</code> 安装 ) =&gt; 桌面全局搜索类似Mac系统的SpotLight(★★★★★)</li>\n<li><a href=\"https://linux.cn/article-5460-1.html\" target=\"_blank\" rel=\"noopener\">lftp</a> =&gt; 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比<br>如：多线程下载、断点续传</li>\n<li><a href=\"http://jonls.dk/redshift/\" target=\"_blank\" rel=\"noopener\">redshift-gtk</a> 护眼模式，自带的色彩太黄了</li>\n<li>apt-fast =&gt; 比apt更快的包管理器，添加<code>ppa:apt-fast/stable</code>安装(★★★★★)</li>\n<li>nautilus action configure tool =&gt; 资源管理器右键菜单自定义，添加<code>ppa:daniel-marynicz/filemanager-actions</code>安装(★★★★★)</li>\n<li>tig =&gt; 可交互的命令行git命令(★★★★★)</li>\n<li>shellcheck =&gt; shell脚本语法检查(★★★★★)</li>\n<li><a href=\"https://motrix.app/zh-CN/\" target=\"_blank\" rel=\"noopener\">Motrix</a> =&gt; 全平台下载工具，用于替代迅雷(★★★★★)</li>\n<li><a href=\"https://www.insynchq.com/\" target=\"_blank\" rel=\"noopener\">Insync</a> =&gt; 全平台同步工具，支持google云和onedrive(★★★★★)</li>\n<li><a href=\"https://github.com/teejee2008/timeshift\" target=\"_blank\" rel=\"noopener\">Timeshift</a> =&gt; 创建系统增量备份计划(★★★★★)</li>\n<li>dconf-editor =&gt; gnome桌面配置gui工具(★★★★)</li>\n</ul>\n<h4 id=\"实用网站推荐\"><a href=\"#实用网站推荐\" class=\"headerlink\" title=\"实用网站推荐\"></a>实用网站推荐</h4><hr>\n<p><img src=\"/blogs/img/article/Ubuntu18.04-14.png\" alt=\"Vimix.png\"></p>\n<ul>\n<li><a href=\"https://wallpapershome.com/\" target=\"_blank\" rel=\"noopener\">Wallpaper</a>  =&gt; 高清桌面壁纸下载，支持多种分辨率(★★★★★)</li>\n<li><a href=\"https://www.flaticon.com\" target=\"_blank\" rel=\"noopener\">flaticon</a> =&gt; 免费图标下载网站，支持svg和png两种格式</li>\n<li><a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron Apps</a> =&gt; 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)</li>\n<li><a href=\"https://www.centos.bz/\" target=\"_blank\" rel=\"noopener\">Linux运维日志</a> =&gt; 服务搭建、Linux技术之类的(★★★★☆)</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/\" target=\"_blank\" rel=\"noopener\">IBM Developer</a> =&gt; 技术文档类的参考(★★★★★)</li>\n<li><a href=\"https://www.lulinux.com/archives/2513#awk\" target=\"_blank\" rel=\"noopener\">Linux常用命令</a>  =&gt;  常用命令速查(★★★★☆)</li>\n<li><a href=\"https://www.kanbilibili.com/\" target=\"_blank\" rel=\"noopener\">bilibili工具网站</a> =&gt; 支持 视频/弹幕/封面 下载等骚操作(★★★★★)</li>\n<li><a href=\"https://linux.cn/\" target=\"_blank\" rel=\"noopener\">Linux中国</a> =&gt; 没事儿就上去看看别人翻译转载的文章(★★★★☆)</li>\n<li><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">TinyPNG</a> =&gt; 免费的图片无损压缩网站(★★★★☆)</li>\n<li><a href=\"https://www.iloveimg.com/zh-cn\" target=\"_blank\" rel=\"noopener\">iLoveIMG</a> =&gt; 在线图片编辑网站(★★★★★)</li>\n<li><a href=\"https://en.savefrom.net/\" target=\"_blank\" rel=\"noopener\">savefrom</a> =&gt; 直接下载youtube视频(★★★★☆)</li>\n<li><a href=\"https://www.lulinux.com/\" target=\"_blank\" rel=\"noopener\">撸Linux</a> =&gt; 好像还蛮有趣的额(★★★★☆)</li>\n<li><a href=\"https://greasyfork.org/zh-CN/scripts\" target=\"_blank\" rel=\"noopener\">油猴脚本</a> =&gt; 你甚至可以用来破解百度云限速(★★★★★)</li>\n</ul>\n<p><em>注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合.</em></p>\n"},{"title":"echarts图表-树形图开发记录","catalog":true,"toc_nav_num":true,"date":"2020-03-22T10:24:00.000Z","subtitle":"Echarts Tree","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-03-22T10:24:00.000Z","_content":"\n### 目录\n\n1. 前言\n\n2. 树形图功能需求以及遇到的问题分析\n\n3. 问题I：V4版本label自定义效果设置不生效\n\n4. 问题II：tree图使用自定义图片加载显示不完全\n\n5. 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n### 前言\n\n-------------\nEcharts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。\n\n![snapshot](/blogs/img/article/snapshot.png)\n\n### 树形图功能需求以及遇到的问题分析\n\n-------------------------------\n\n1. 文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比\n如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。\n\n![snapshot_select](/blogs/img/article/snapshot_select.png)\n\n2. 文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。\n\n![tree-1](/blogs/img/article/tree-1.png)\n![tree-2](/blogs/img/article/tree-2.png)\n![tree-3](/blogs/img/article/tree-3.png)\n\n\n### 问题I：V4版本label自定义效果设置不生效\n\n-------------------------------\n\nseries-tree.label.formatter\n>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。\n\n#### 字符串模板的使用  \n\n1. 模板变量有：  \n* {a}：系列名。\n* {b}：数据名。\n* {c}：数据值。\n* {d}：百分比。\n* {@xxx}：数据中名为'xxx'的维度的值，如{@product}表示名为'product'` 的维度的值。\n* {@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n2. 示例：  \nformatter: '{b}: {d}'\n\n3. 回调函数格式：  \n(params: Object|Array) => string，\n参数 params 是 formatter 需要的单个数据集，格式如下：\n```js\n{\n    componentType: 'series',\n    // 系列类型\n    seriesType: string,\n    // 系列在传入的 option.series 中的 index\n    seriesIndex: number,\n    // 系列名称\n    seriesName: string,\n    // 数据名，类目名\n    name: string,\n    // 数据在传入的 data 数组中的 index\n    dataIndex: number,\n    // 传入的原始数据项\n    data: Object,\n    // 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\n    value: number|Array|Object,\n    // 坐标轴 encode 映射信息，\n    // key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n    // value 必然为数组，不会为 null/undefied，表示 dimension index 。\n    // 其内容如：\n    // {\n    //     x: [2] // dimension index 为 2 的数据映射到 x 轴\n    //     y: [0] // dimension index 为 0 的数据映射到 y 轴\n    // }\n    encode: Object,\n    // 维度名列表\n    dimensionNames: Array<String>,\n    // 数据的维度 index，如 0 或 1 或 2 ...\n    // 仅在雷达图中使用。\n    dimensionIndex: number,\n    // 数据图形的颜色\n    color: string,\n}\n```\n\n#### 字符串模板不生效问题1\n直接将formatter自定义函数和富文本标识配置在`series[0].label`下，结果以上配置都无效，正确方法是在`series[0].label.normal`下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，`normal`表示常规效果，与之对应的`emphasis`是鼠标划过高亮效果。\n![tree-4](/blogs/img/article/tree-4.png)\n\nseries-tree.label.rich支持的所有CSS属性：\n```js\n{\n  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY\n} \n```\n\nseries-tree.data.label中配置label.formatter：\n\n```js\nconst rawTreeData = {\n          name: 'snapshotA',\n          selected: false, // 自定义选择控制属性selected\n          collapsed: false, // 覆盖组件自带的collapsed效果\n          label: {\n            // * 直接引用上层定义的formatter即可，复用函数对象\n            formatter: this.echartsInitData.series[0].label.normal.formatter,\n          },\n          children: [\n            ...\n          ],\n}\n```\n\n![tree-5](/blogs/img/article/tree-5.png)\n\n### 问题II：tree图使用自定义图片加载显示不完全\n\n-------------------------------\n\n#### 解决方案1(无效)：使用对象深比较函数避免多次渲染\n> 使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。\n\n1. Js对象深比较函数deepComparison定义\n\n```js\n/**\n * [deepComparison 深比较]\n * @param  {[any]} data [any]\n * @return {[Boolean]}      [是否相同]\n */\nexport function deepComparison(data1, data2) {\n  const { hasOwnProperty } = Object.prototype;\n  // 获取变量类型\n  const getType = (d) => {\n    if (typeof d === 'object') {\n      if (!(d instanceof Object)) {\n        return 'null';\n      }\n      if (d instanceof Date) {\n        return 'date';\n      }\n      if (d instanceof RegExp) {\n        return 'regexp';\n      }\n      // object / array //\n      return 'object';\n    }\n    if (d !== d) return 'nan';\n    return (typeof d).toLowerCase();\n  };\n  // 基本类型比较\n  const is = (d1, d2, type) => {\n    if (type === 'nan') return true;\n    if (type === 'date' || type === 'regexp') return d1.toString() === d2.toString();\n    return (d1 === d2);\n  };\n  // 递归比较\n  const compare = (d1, d2) => {\n    const type1 = getType(d1);\n    const type2 = getType(d2);\n    if (type1 !== type2) {\n      return false;\n    }\n    if (type1 === 'object') {\n      const keys1 = Object.keys(d1).filter(k => hasOwnProperty.call(d1, k));\n      const keys2 = Object.keys(d2).filter(k => hasOwnProperty.call(d2, k));\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      for (let i = 0; i < keys1.length; i += 1) {\n        if (\n          !keys2.includes(keys1[i]) ||\n          !compare(d1[keys1[i]], d2[keys1[i]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return is(d1, d2, type1);\n  };\n\n  return compare(data1, data2);\n}\n```\n\n2.深度比较函数使用\n\n```js\n  componentDidUpdate() {\n    console.log('update');\n    const { treeData } = this.props;\n    const rawTreeData = toJS(treeData);\n    if (!deepComparison(this.echartsTreeData, rawTreeData)) {\n      console.log('change');\n      this.echartsTreeData = rawTreeData;\n      const optionData = this.echartsElement.getOption();\n      optionData.series[0].data = [rawTreeData];\n      console.log(optionData);\n      // this.echartsElement.clear();\n      this.echartsElement.setOption(optionData, true);\n    }\n  }\n```\n\n#### 解决方案2(无效)：使用base64字符串替换img url\n>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。\n\n![tree-6](/blogs/img/article/tree-6.png)\n\n#### 解决方案3(有效)：禁用动画加载\n>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。\n\n```js\nconst chartOption = {\n  animation: true, // 解决渲染不全的问题\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove',\n  },\n  series: [\n    ...\n  ],\n};\n```\n\n#### 解决方案4(有效)：组件渲染完成后重新手动渲染\n>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。\n\n1. 函数防抖声明  \n函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：\n```js\n/**\n   * @param  {Function} fn         [回调函数]\n   * @param  {[Time]}   delayTime  [延迟时间(ms)]\n   * @param  {Boolean}  isImediate [是否需要立即调用]\n   * @param  {[type]}   args       [回调函数传入参数]\n  */\nexport function fnDebounce() {\n  const fnObject = {};\n  let timer;\n\n  return (fn, delayTime, isImediate, args) => {\n    // 设置定时器方法\n    const setTimer = () => {\n      timer = setTimeout(() => {\n        fn(args);\n        // 清除定时器\n        clearTimeout(timer);\n        delete (fnObject[fn]);\n      }, delayTime);\n\n      fnObject[fn] = {\n        delayTime,\n        timer,\n      };\n    };\n    // 立即调用\n    if (!delayTime || isImediate) return fn(args);\n    // 判断函数是否已经在调用中\n    if (fnObject[fn]) {\n      clearTimeout(timer);\n      setTimer(fn, delayTime, args);\n    } else {\n      setTimer(fn, delayTime, args);\n    }\n  };\n}\n```\n\n2. finished事件监听和函数防抖的应用  \n其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将`finished`事件监听取消掉，减少渲染次数。\n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n\n  // 初始化事件防抖\n  fnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      // 延迟时间设置为200ms\n      this.fnDebounce(this.pendingEventsTrigger, 200, false, null);\n    });\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n\n### 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n-------------------------------\n节点选中效果原理是监听echarts的`dblclick`双击事件，双击后改变`options.series[0].data`数据项里的`selected`属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在`options.series[0].data`中额外声明`collapsed:[Boolean]`参数，同时禁用tree自带的折叠/展开控制。\n\n#### 冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\n如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性`selected:true`，那么表现为：`selected`状态不常驻，变成了类似`mouseover`的鼠标划过状态触发；\n1. 动画延迟更新属性声明  \n```js\n/* Tree的外层数据 */\nechartsInitData= {\n    tooltip: {\n      trigger: 'item',\n      triggerOn: 'mousemove',\n    },\n    series: [\n      {\n        {...},\n        leaves: {...},\n        expandAndCollapse: false,\n        animationDuration: 100,\n        animationDelayUpdate: 300, // 动画延迟更新\n        animationDurationUpdate: 400,\n      },\n    ],\n  }\n```\n\n2. 冲突效果表现\n\n![tree-bug1](/blogs/img/article/tree-bug1.gif)\n\n#### 冲突2：鼠标的悬浮操作导致选中效果无效\n按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了`300ms`)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的`selected`属性触发label.formatter的渲染效果变化)两者冲突。\n\n1. 设置`selected`属性更改函数的延迟时间  \n```js\n/* React组件自定义方法-选中一个元素 */\nonDoubleClickChart = (e) => {\n    const { name } = e.data;\n    this.selectedNodeName = name;\n    setTimeout(() => {\n      this.props.snapshot.chooseSnapShot(name);\n    }, 400);\n  }\n```\n\n2. 冲突效果表现\n![tree-bug2](/blogs/img/article/tree-bug2.gif)\n\n#### 解决方法\n方法同于上面提到的`finished事件监听和函数防抖的应用`，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有`selected`状态稍稍延迟更新和`selected`状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。\n\n1. 代码概览  \n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n  selectedNodeName = null;\n\n  // 初始化事件防抖\n  dblclickFnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    this.echartsElement.on('dblclick', this.onDoubleClickChart);\n    this.echartsElement.on('click', this.onClickChart);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      if (this.selectedNodeName) {\n        // 防抖延迟时间设置为200ms\n        this.dblclickFnDebounce(this.pendingEventsTrigger, 200, false, this.selectedNodeName);\n      }\n    });\n\n    snapshot.getSnapShotRequest();\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n2. 效果演示\n![tree-bug-fix](/blogs/img/article/tree-bug-fix.gif)","source":"_posts/echarts图表-树形图开发记录.md","raw":"---\ntitle: \"echarts图表-树形图开发记录\"\ncatalog: true\ntoc_nav_num: true\ndate:   2020-03-22 18:24:00\nsubtitle: \"Echarts Tree\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- echarts\n- react\ncategories:\n- Echarts\nupdateDate: 2020-03-22 18:24:00\n---\n\n### 目录\n\n1. 前言\n\n2. 树形图功能需求以及遇到的问题分析\n\n3. 问题I：V4版本label自定义效果设置不生效\n\n4. 问题II：tree图使用自定义图片加载显示不完全\n\n5. 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n### 前言\n\n-------------\nEcharts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。\n\n![snapshot](/blogs/img/article/snapshot.png)\n\n### 树形图功能需求以及遇到的问题分析\n\n-------------------------------\n\n1. 文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比\n如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。\n\n![snapshot_select](/blogs/img/article/snapshot_select.png)\n\n2. 文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。\n\n![tree-1](/blogs/img/article/tree-1.png)\n![tree-2](/blogs/img/article/tree-2.png)\n![tree-3](/blogs/img/article/tree-3.png)\n\n\n### 问题I：V4版本label自定义效果设置不生效\n\n-------------------------------\n\nseries-tree.label.formatter\n>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。\n\n#### 字符串模板的使用  \n\n1. 模板变量有：  \n* {a}：系列名。\n* {b}：数据名。\n* {c}：数据值。\n* {d}：百分比。\n* {@xxx}：数据中名为'xxx'的维度的值，如{@product}表示名为'product'` 的维度的值。\n* {@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n2. 示例：  \nformatter: '{b}: {d}'\n\n3. 回调函数格式：  \n(params: Object|Array) => string，\n参数 params 是 formatter 需要的单个数据集，格式如下：\n```js\n{\n    componentType: 'series',\n    // 系列类型\n    seriesType: string,\n    // 系列在传入的 option.series 中的 index\n    seriesIndex: number,\n    // 系列名称\n    seriesName: string,\n    // 数据名，类目名\n    name: string,\n    // 数据在传入的 data 数组中的 index\n    dataIndex: number,\n    // 传入的原始数据项\n    data: Object,\n    // 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\n    value: number|Array|Object,\n    // 坐标轴 encode 映射信息，\n    // key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n    // value 必然为数组，不会为 null/undefied，表示 dimension index 。\n    // 其内容如：\n    // {\n    //     x: [2] // dimension index 为 2 的数据映射到 x 轴\n    //     y: [0] // dimension index 为 0 的数据映射到 y 轴\n    // }\n    encode: Object,\n    // 维度名列表\n    dimensionNames: Array<String>,\n    // 数据的维度 index，如 0 或 1 或 2 ...\n    // 仅在雷达图中使用。\n    dimensionIndex: number,\n    // 数据图形的颜色\n    color: string,\n}\n```\n\n#### 字符串模板不生效问题1\n直接将formatter自定义函数和富文本标识配置在`series[0].label`下，结果以上配置都无效，正确方法是在`series[0].label.normal`下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，`normal`表示常规效果，与之对应的`emphasis`是鼠标划过高亮效果。\n![tree-4](/blogs/img/article/tree-4.png)\n\nseries-tree.label.rich支持的所有CSS属性：\n```js\n{\n  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY\n} \n```\n\nseries-tree.data.label中配置label.formatter：\n\n```js\nconst rawTreeData = {\n          name: 'snapshotA',\n          selected: false, // 自定义选择控制属性selected\n          collapsed: false, // 覆盖组件自带的collapsed效果\n          label: {\n            // * 直接引用上层定义的formatter即可，复用函数对象\n            formatter: this.echartsInitData.series[0].label.normal.formatter,\n          },\n          children: [\n            ...\n          ],\n}\n```\n\n![tree-5](/blogs/img/article/tree-5.png)\n\n### 问题II：tree图使用自定义图片加载显示不完全\n\n-------------------------------\n\n#### 解决方案1(无效)：使用对象深比较函数避免多次渲染\n> 使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。\n\n1. Js对象深比较函数deepComparison定义\n\n```js\n/**\n * [deepComparison 深比较]\n * @param  {[any]} data [any]\n * @return {[Boolean]}      [是否相同]\n */\nexport function deepComparison(data1, data2) {\n  const { hasOwnProperty } = Object.prototype;\n  // 获取变量类型\n  const getType = (d) => {\n    if (typeof d === 'object') {\n      if (!(d instanceof Object)) {\n        return 'null';\n      }\n      if (d instanceof Date) {\n        return 'date';\n      }\n      if (d instanceof RegExp) {\n        return 'regexp';\n      }\n      // object / array //\n      return 'object';\n    }\n    if (d !== d) return 'nan';\n    return (typeof d).toLowerCase();\n  };\n  // 基本类型比较\n  const is = (d1, d2, type) => {\n    if (type === 'nan') return true;\n    if (type === 'date' || type === 'regexp') return d1.toString() === d2.toString();\n    return (d1 === d2);\n  };\n  // 递归比较\n  const compare = (d1, d2) => {\n    const type1 = getType(d1);\n    const type2 = getType(d2);\n    if (type1 !== type2) {\n      return false;\n    }\n    if (type1 === 'object') {\n      const keys1 = Object.keys(d1).filter(k => hasOwnProperty.call(d1, k));\n      const keys2 = Object.keys(d2).filter(k => hasOwnProperty.call(d2, k));\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      for (let i = 0; i < keys1.length; i += 1) {\n        if (\n          !keys2.includes(keys1[i]) ||\n          !compare(d1[keys1[i]], d2[keys1[i]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return is(d1, d2, type1);\n  };\n\n  return compare(data1, data2);\n}\n```\n\n2.深度比较函数使用\n\n```js\n  componentDidUpdate() {\n    console.log('update');\n    const { treeData } = this.props;\n    const rawTreeData = toJS(treeData);\n    if (!deepComparison(this.echartsTreeData, rawTreeData)) {\n      console.log('change');\n      this.echartsTreeData = rawTreeData;\n      const optionData = this.echartsElement.getOption();\n      optionData.series[0].data = [rawTreeData];\n      console.log(optionData);\n      // this.echartsElement.clear();\n      this.echartsElement.setOption(optionData, true);\n    }\n  }\n```\n\n#### 解决方案2(无效)：使用base64字符串替换img url\n>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。\n\n![tree-6](/blogs/img/article/tree-6.png)\n\n#### 解决方案3(有效)：禁用动画加载\n>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。\n\n```js\nconst chartOption = {\n  animation: true, // 解决渲染不全的问题\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove',\n  },\n  series: [\n    ...\n  ],\n};\n```\n\n#### 解决方案4(有效)：组件渲染完成后重新手动渲染\n>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。\n\n1. 函数防抖声明  \n函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：\n```js\n/**\n   * @param  {Function} fn         [回调函数]\n   * @param  {[Time]}   delayTime  [延迟时间(ms)]\n   * @param  {Boolean}  isImediate [是否需要立即调用]\n   * @param  {[type]}   args       [回调函数传入参数]\n  */\nexport function fnDebounce() {\n  const fnObject = {};\n  let timer;\n\n  return (fn, delayTime, isImediate, args) => {\n    // 设置定时器方法\n    const setTimer = () => {\n      timer = setTimeout(() => {\n        fn(args);\n        // 清除定时器\n        clearTimeout(timer);\n        delete (fnObject[fn]);\n      }, delayTime);\n\n      fnObject[fn] = {\n        delayTime,\n        timer,\n      };\n    };\n    // 立即调用\n    if (!delayTime || isImediate) return fn(args);\n    // 判断函数是否已经在调用中\n    if (fnObject[fn]) {\n      clearTimeout(timer);\n      setTimer(fn, delayTime, args);\n    } else {\n      setTimer(fn, delayTime, args);\n    }\n  };\n}\n```\n\n2. finished事件监听和函数防抖的应用  \n其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将`finished`事件监听取消掉，减少渲染次数。\n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n\n  // 初始化事件防抖\n  fnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      // 延迟时间设置为200ms\n      this.fnDebounce(this.pendingEventsTrigger, 200, false, null);\n    });\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n\n### 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n-------------------------------\n节点选中效果原理是监听echarts的`dblclick`双击事件，双击后改变`options.series[0].data`数据项里的`selected`属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在`options.series[0].data`中额外声明`collapsed:[Boolean]`参数，同时禁用tree自带的折叠/展开控制。\n\n#### 冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\n如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性`selected:true`，那么表现为：`selected`状态不常驻，变成了类似`mouseover`的鼠标划过状态触发；\n1. 动画延迟更新属性声明  \n```js\n/* Tree的外层数据 */\nechartsInitData= {\n    tooltip: {\n      trigger: 'item',\n      triggerOn: 'mousemove',\n    },\n    series: [\n      {\n        {...},\n        leaves: {...},\n        expandAndCollapse: false,\n        animationDuration: 100,\n        animationDelayUpdate: 300, // 动画延迟更新\n        animationDurationUpdate: 400,\n      },\n    ],\n  }\n```\n\n2. 冲突效果表现\n\n![tree-bug1](/blogs/img/article/tree-bug1.gif)\n\n#### 冲突2：鼠标的悬浮操作导致选中效果无效\n按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了`300ms`)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的`selected`属性触发label.formatter的渲染效果变化)两者冲突。\n\n1. 设置`selected`属性更改函数的延迟时间  \n```js\n/* React组件自定义方法-选中一个元素 */\nonDoubleClickChart = (e) => {\n    const { name } = e.data;\n    this.selectedNodeName = name;\n    setTimeout(() => {\n      this.props.snapshot.chooseSnapShot(name);\n    }, 400);\n  }\n```\n\n2. 冲突效果表现\n![tree-bug2](/blogs/img/article/tree-bug2.gif)\n\n#### 解决方法\n方法同于上面提到的`finished事件监听和函数防抖的应用`，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有`selected`状态稍稍延迟更新和`selected`状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。\n\n1. 代码概览  \n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n  selectedNodeName = null;\n\n  // 初始化事件防抖\n  dblclickFnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    this.echartsElement.on('dblclick', this.onDoubleClickChart);\n    this.echartsElement.on('click', this.onClickChart);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      if (this.selectedNodeName) {\n        // 防抖延迟时间设置为200ms\n        this.dblclickFnDebounce(this.pendingEventsTrigger, 200, false, this.selectedNodeName);\n      }\n    });\n\n    snapshot.getSnapShotRequest();\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n2. 效果演示\n![tree-bug-fix](/blogs/img/article/tree-bug-fix.gif)","slug":"echarts图表-树形图开发记录","published":1,"updated":"2020-08-20T05:01:19.699Z","_id":"ckba8cy9v000r5495arr4by3e","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li><p>前言</p>\n</li>\n<li><p>树形图功能需求以及遇到的问题分析</p>\n</li>\n<li><p>问题I：V4版本label自定义效果设置不生效</p>\n</li>\n<li><p>问题II：tree图使用自定义图片加载显示不完全</p>\n</li>\n<li><p>问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</p>\n</li>\n</ol>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>Echarts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。</p>\n<p><img src=\"/blogs/img/article/snapshot.png\" alt=\"snapshot\"></p>\n<h3 id=\"树形图功能需求以及遇到的问题分析\"><a href=\"#树形图功能需求以及遇到的问题分析\" class=\"headerlink\" title=\"树形图功能需求以及遇到的问题分析\"></a>树形图功能需求以及遇到的问题分析</h3><hr>\n<ol>\n<li>文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比<br>如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。</li>\n</ol>\n<p><img src=\"/blogs/img/article/snapshot_select.png\" alt=\"snapshot_select\"></p>\n<ol>\n<li>文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。</li>\n</ol>\n<p><img src=\"/blogs/img/article/tree-1.png\" alt=\"tree-1\"><br><img src=\"/blogs/img/article/tree-2.png\" alt=\"tree-2\"><br><img src=\"/blogs/img/article/tree-3.png\" alt=\"tree-3\"></p>\n<h3 id=\"问题I：V4版本label自定义效果设置不生效\"><a href=\"#问题I：V4版本label自定义效果设置不生效\" class=\"headerlink\" title=\"问题I：V4版本label自定义效果设置不生效\"></a>问题I：V4版本label自定义效果设置不生效</h3><hr>\n<p>series-tree.label.formatter</p>\n<blockquote>\n<p>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。</p>\n</blockquote>\n<h4 id=\"字符串模板的使用\"><a href=\"#字符串模板的使用\" class=\"headerlink\" title=\"字符串模板的使用\"></a>字符串模板的使用</h4><ol>\n<li>模板变量有：  </li>\n</ol>\n<ul>\n<li>{a}：系列名。</li>\n<li>{b}：数据名。</li>\n<li>{c}：数据值。</li>\n<li>{d}：百分比。</li>\n<li>{@xxx}：数据中名为’xxx’的维度的值，如{@product}表示名为’product’` 的维度的值。</li>\n<li>{@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。</li>\n</ul>\n<ol>\n<li><p>示例：<br>formatter: ‘{b}: {d}’</p>\n</li>\n<li><p>回调函数格式：<br>(params: Object|Array) =&gt; string，<br>参数 params 是 formatter 需要的单个数据集，格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    componentType: <span class=\"string\">'series'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 系列类型</span></span><br><span class=\"line\">    seriesType: string,</span><br><span class=\"line\">    <span class=\"comment\">// 系列在传入的 option.series 中的 index</span></span><br><span class=\"line\">    seriesIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 系列名称</span></span><br><span class=\"line\">    seriesName: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据名，类目名</span></span><br><span class=\"line\">    name: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据在传入的 data 数组中的 index</span></span><br><span class=\"line\">    dataIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的原始数据项</span></span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）</span></span><br><span class=\"line\">    value: number|<span class=\"built_in\">Array</span>|<span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 坐标轴 encode 映射信息，</span></span><br><span class=\"line\">    <span class=\"comment\">// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）</span></span><br><span class=\"line\">    <span class=\"comment\">// value 必然为数组，不会为 null/undefied，表示 dimension index 。</span></span><br><span class=\"line\">    <span class=\"comment\">// 其内容如：</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     x: [2] // dimension index 为 2 的数据映射到 x 轴</span></span><br><span class=\"line\">    <span class=\"comment\">//     y: [0] // dimension index 为 0 的数据映射到 y 轴</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    encode: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 维度名列表</span></span><br><span class=\"line\">    dimensionNames: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// 数据的维度 index，如 0 或 1 或 2 ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 仅在雷达图中使用。</span></span><br><span class=\"line\">    dimensionIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 数据图形的颜色</span></span><br><span class=\"line\">    color: string,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"字符串模板不生效问题1\"><a href=\"#字符串模板不生效问题1\" class=\"headerlink\" title=\"字符串模板不生效问题1\"></a>字符串模板不生效问题1</h4><p>直接将formatter自定义函数和富文本标识配置在<code>series[0].label</code>下，结果以上配置都无效，正确方法是在<code>series[0].label.normal</code>下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，<code>normal</code>表示常规效果，与之对应的<code>emphasis</code>是鼠标划过高亮效果。<br><img src=\"/blogs/img/article/tree-4.png\" alt=\"tree-4\"></p>\n<p>series-tree.label.rich支持的所有CSS属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>series-tree.data.label中配置label.formatter：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rawTreeData = &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'snapshotA'</span>,</span><br><span class=\"line\">          selected: <span class=\"literal\">false</span>, <span class=\"comment\">// 自定义选择控制属性selected</span></span><br><span class=\"line\">          collapsed: <span class=\"literal\">false</span>, <span class=\"comment\">// 覆盖组件自带的collapsed效果</span></span><br><span class=\"line\">          label: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// * 直接引用上层定义的formatter即可，复用函数对象</span></span><br><span class=\"line\">            formatter: <span class=\"keyword\">this</span>.echartsInitData.series[<span class=\"number\">0</span>].label.normal.formatter,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            ...</span><br><span class=\"line\">          ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/blogs/img/article/tree-5.png\" alt=\"tree-5\"></p>\n<h3 id=\"问题II：tree图使用自定义图片加载显示不完全\"><a href=\"#问题II：tree图使用自定义图片加载显示不完全\" class=\"headerlink\" title=\"问题II：tree图使用自定义图片加载显示不完全\"></a>问题II：tree图使用自定义图片加载显示不完全</h3><hr>\n<h4 id=\"解决方案1-无效-：使用对象深比较函数避免多次渲染\"><a href=\"#解决方案1-无效-：使用对象深比较函数避免多次渲染\" class=\"headerlink\" title=\"解决方案1(无效)：使用对象深比较函数避免多次渲染\"></a>解决方案1(无效)：使用对象深比较函数避免多次渲染</h4><blockquote>\n<p>使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。</p>\n</blockquote>\n<ol>\n<li>Js对象深比较函数deepComparison定义</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [deepComparison 深比较]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[any]&#125;</span> </span>data [any]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[Boolean]&#125;</span>      </span>[是否相同]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepComparison</span>(<span class=\"params\">data1, data2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 获取变量类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getType = <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> d === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'date'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'regexp'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// object / array //</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'object'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d !== d) <span class=\"keyword\">return</span> <span class=\"string\">'nan'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> d).toLowerCase();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 基本类型比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">d1, d2, type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'nan'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'date'</span> || type === <span class=\"string\">'regexp'</span>) <span class=\"keyword\">return</span> d1.toString() === d2.toString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (d1 === d2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 递归比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">d1, d2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type1 = getType(d1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type2 = getType(d2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 !== type2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys1 = <span class=\"built_in\">Object</span>.keys(d1).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d1, k));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys2 = <span class=\"built_in\">Object</span>.keys(d2).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d2, k));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keys1.length !== keys2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys1.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          !keys2.includes(keys1[i]) ||</span><br><span class=\"line\">          !compare(d1[keys1[i]], d2[keys1[i]])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> is(d1, d2, type1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> compare(data1, data2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.深度比较函数使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidUpdate() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'update'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rawTreeData = toJS(treeData);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!deepComparison(<span class=\"keyword\">this</span>.echartsTreeData, rawTreeData)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'change'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsTreeData = rawTreeData;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    optionData.series[<span class=\"number\">0</span>].data = [rawTreeData];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(optionData);</span><br><span class=\"line\">    <span class=\"comment\">// this.echartsElement.clear();</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案2-无效-：使用base64字符串替换img-url\"><a href=\"#解决方案2-无效-：使用base64字符串替换img-url\" class=\"headerlink\" title=\"解决方案2(无效)：使用base64字符串替换img url\"></a>解决方案2(无效)：使用base64字符串替换img url</h4><blockquote>\n<p>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。</p>\n</blockquote>\n<p><img src=\"/blogs/img/article/tree-6.png\" alt=\"tree-6\"></p>\n<h4 id=\"解决方案3-有效-：禁用动画加载\"><a href=\"#解决方案3-有效-：禁用动画加载\" class=\"headerlink\" title=\"解决方案3(有效)：禁用动画加载\"></a>解决方案3(有效)：禁用动画加载</h4><blockquote>\n<p>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chartOption = &#123;</span><br><span class=\"line\">  animation: <span class=\"literal\">true</span>, <span class=\"comment\">// 解决渲染不全的问题</span></span><br><span class=\"line\">  tooltip: &#123;</span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案4-有效-：组件渲染完成后重新手动渲染\"><a href=\"#解决方案4-有效-：组件渲染完成后重新手动渲染\" class=\"headerlink\" title=\"解决方案4(有效)：组件渲染完成后重新手动渲染\"></a>解决方案4(有效)：组件渲染完成后重新手动渲染</h4><blockquote>\n<p>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。</p>\n</blockquote>\n<ol>\n<li><p>函数防抖声明<br>函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Function&#125;</span> </span>fn         [回调函数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Time]&#125;</span>   </span>delayTime  [延迟时间(ms)]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Boolean&#125;</span>  </span>isImediate [是否需要立即调用]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span>   </span>args       [回调函数传入参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnDebounce</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fnObject = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">fn, delayTime, isImediate, args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置定时器方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> setTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn(args);</span><br><span class=\"line\">        <span class=\"comment\">// 清除定时器</span></span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> (fnObject[fn]);</span><br><span class=\"line\">      &#125;, delayTime);</span><br><span class=\"line\"></span><br><span class=\"line\">      fnObject[fn] = &#123;</span><br><span class=\"line\">        delayTime,</span><br><span class=\"line\">        timer,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delayTime || isImediate) <span class=\"keyword\">return</span> fn(args);</span><br><span class=\"line\">    <span class=\"comment\">// 判断函数是否已经在调用中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fnObject[fn]) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>finished事件监听和函数防抖的应用<br>其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将<code>finished</code>事件监听取消掉，减少渲染次数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  fnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 延迟时间设置为200ms</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\"><a href=\"#问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\" class=\"headerlink\" title=\"问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\"></a>问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</h3><hr>\n<p>节点选中效果原理是监听echarts的<code>dblclick</code>双击事件，双击后改变<code>options.series[0].data</code>数据项里的<code>selected</code>属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在<code>options.series[0].data</code>中额外声明<code>collapsed:[Boolean]</code>参数，同时禁用tree自带的折叠/展开控制。</p>\n<h4 id=\"冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\"><a href=\"#冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\" class=\"headerlink\" title=\"冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\"></a>冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效</h4><p>如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性<code>selected:true</code>，那么表现为：<code>selected</code>状态不常驻，变成了类似<code>mouseover</code>的鼠标划过状态触发；</p>\n<ol>\n<li><p>动画延迟更新属性声明  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Tree的外层数据 */</span></span><br><span class=\"line\">echartsInitData= &#123;</span><br><span class=\"line\">    tooltip: &#123;</span><br><span class=\"line\">      trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">      triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    series: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &#123;...&#125;,</span><br><span class=\"line\">        leaves: &#123;...&#125;,</span><br><span class=\"line\">        expandAndCollapse: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        animationDuration: <span class=\"number\">100</span>,</span><br><span class=\"line\">        animationDelayUpdate: <span class=\"number\">300</span>, <span class=\"comment\">// 动画延迟更新</span></span><br><span class=\"line\">        animationDurationUpdate: <span class=\"number\">400</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>冲突效果表现</p>\n</li>\n</ol>\n<p><img src=\"/blogs/img/article/tree-bug1.gif\" alt=\"tree-bug1\"></p>\n<h4 id=\"冲突2：鼠标的悬浮操作导致选中效果无效\"><a href=\"#冲突2：鼠标的悬浮操作导致选中效果无效\" class=\"headerlink\" title=\"冲突2：鼠标的悬浮操作导致选中效果无效\"></a>冲突2：鼠标的悬浮操作导致选中效果无效</h4><p>按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了<code>300ms</code>)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的<code>selected</code>属性触发label.formatter的渲染效果变化)两者冲突。</p>\n<ol>\n<li><p>设置<code>selected</code>属性更改函数的延迟时间  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* React组件自定义方法-选中一个元素 */</span></span><br><span class=\"line\">onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = e.data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedNodeName = name;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.snapshot.chooseSnapShot(name);</span><br><span class=\"line\">    &#125;, <span class=\"number\">400</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>冲突效果表现<br><img src=\"/blogs/img/article/tree-bug2.gif\" alt=\"tree-bug2\"></p>\n</li>\n</ol>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>方法同于上面提到的<code>finished事件监听和函数防抖的应用</code>，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有<code>selected</code>状态稍稍延迟更新和<code>selected</code>状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。</p>\n<ol>\n<li><p>代码概览  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  selectedNodeName = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  dblclickFnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'dblclick'</span>, <span class=\"keyword\">this</span>.onDoubleClickChart);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClickChart);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.selectedNodeName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 防抖延迟时间设置为200ms</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dblclickFnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"keyword\">this</span>.selectedNodeName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    snapshot.getSnapShotRequest();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果演示<br><img src=\"/blogs/img/article/tree-bug-fix.gif\" alt=\"tree-bug-fix\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li><p>前言</p>\n</li>\n<li><p>树形图功能需求以及遇到的问题分析</p>\n</li>\n<li><p>问题I：V4版本label自定义效果设置不生效</p>\n</li>\n<li><p>问题II：tree图使用自定义图片加载显示不完全</p>\n</li>\n<li><p>问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</p>\n</li>\n</ol>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>Echarts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。</p>\n<p><img src=\"/blogs/img/article/snapshot.png\" alt=\"snapshot\"></p>\n<h3 id=\"树形图功能需求以及遇到的问题分析\"><a href=\"#树形图功能需求以及遇到的问题分析\" class=\"headerlink\" title=\"树形图功能需求以及遇到的问题分析\"></a>树形图功能需求以及遇到的问题分析</h3><hr>\n<ol>\n<li>文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比<br>如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。</li>\n</ol>\n<p><img src=\"/blogs/img/article/snapshot_select.png\" alt=\"snapshot_select\"></p>\n<ol>\n<li>文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。</li>\n</ol>\n<p><img src=\"/blogs/img/article/tree-1.png\" alt=\"tree-1\"><br><img src=\"/blogs/img/article/tree-2.png\" alt=\"tree-2\"><br><img src=\"/blogs/img/article/tree-3.png\" alt=\"tree-3\"></p>\n<h3 id=\"问题I：V4版本label自定义效果设置不生效\"><a href=\"#问题I：V4版本label自定义效果设置不生效\" class=\"headerlink\" title=\"问题I：V4版本label自定义效果设置不生效\"></a>问题I：V4版本label自定义效果设置不生效</h3><hr>\n<p>series-tree.label.formatter</p>\n<blockquote>\n<p>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。</p>\n</blockquote>\n<h4 id=\"字符串模板的使用\"><a href=\"#字符串模板的使用\" class=\"headerlink\" title=\"字符串模板的使用\"></a>字符串模板的使用</h4><ol>\n<li>模板变量有：  </li>\n</ol>\n<ul>\n<li>{a}：系列名。</li>\n<li>{b}：数据名。</li>\n<li>{c}：数据值。</li>\n<li>{d}：百分比。</li>\n<li>{@xxx}：数据中名为’xxx’的维度的值，如{@product}表示名为’product’` 的维度的值。</li>\n<li>{@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。</li>\n</ul>\n<ol>\n<li><p>示例：<br>formatter: ‘{b}: {d}’</p>\n</li>\n<li><p>回调函数格式：<br>(params: Object|Array) =&gt; string，<br>参数 params 是 formatter 需要的单个数据集，格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    componentType: <span class=\"string\">'series'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 系列类型</span></span><br><span class=\"line\">    seriesType: string,</span><br><span class=\"line\">    <span class=\"comment\">// 系列在传入的 option.series 中的 index</span></span><br><span class=\"line\">    seriesIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 系列名称</span></span><br><span class=\"line\">    seriesName: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据名，类目名</span></span><br><span class=\"line\">    name: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据在传入的 data 数组中的 index</span></span><br><span class=\"line\">    dataIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的原始数据项</span></span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）</span></span><br><span class=\"line\">    value: number|<span class=\"built_in\">Array</span>|<span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 坐标轴 encode 映射信息，</span></span><br><span class=\"line\">    <span class=\"comment\">// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）</span></span><br><span class=\"line\">    <span class=\"comment\">// value 必然为数组，不会为 null/undefied，表示 dimension index 。</span></span><br><span class=\"line\">    <span class=\"comment\">// 其内容如：</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     x: [2] // dimension index 为 2 的数据映射到 x 轴</span></span><br><span class=\"line\">    <span class=\"comment\">//     y: [0] // dimension index 为 0 的数据映射到 y 轴</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    encode: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 维度名列表</span></span><br><span class=\"line\">    dimensionNames: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// 数据的维度 index，如 0 或 1 或 2 ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 仅在雷达图中使用。</span></span><br><span class=\"line\">    dimensionIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 数据图形的颜色</span></span><br><span class=\"line\">    color: string,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"字符串模板不生效问题1\"><a href=\"#字符串模板不生效问题1\" class=\"headerlink\" title=\"字符串模板不生效问题1\"></a>字符串模板不生效问题1</h4><p>直接将formatter自定义函数和富文本标识配置在<code>series[0].label</code>下，结果以上配置都无效，正确方法是在<code>series[0].label.normal</code>下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，<code>normal</code>表示常规效果，与之对应的<code>emphasis</code>是鼠标划过高亮效果。<br><img src=\"/blogs/img/article/tree-4.png\" alt=\"tree-4\"></p>\n<p>series-tree.label.rich支持的所有CSS属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>series-tree.data.label中配置label.formatter：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rawTreeData = &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'snapshotA'</span>,</span><br><span class=\"line\">          selected: <span class=\"literal\">false</span>, <span class=\"comment\">// 自定义选择控制属性selected</span></span><br><span class=\"line\">          collapsed: <span class=\"literal\">false</span>, <span class=\"comment\">// 覆盖组件自带的collapsed效果</span></span><br><span class=\"line\">          label: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// * 直接引用上层定义的formatter即可，复用函数对象</span></span><br><span class=\"line\">            formatter: <span class=\"keyword\">this</span>.echartsInitData.series[<span class=\"number\">0</span>].label.normal.formatter,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            ...</span><br><span class=\"line\">          ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/blogs/img/article/tree-5.png\" alt=\"tree-5\"></p>\n<h3 id=\"问题II：tree图使用自定义图片加载显示不完全\"><a href=\"#问题II：tree图使用自定义图片加载显示不完全\" class=\"headerlink\" title=\"问题II：tree图使用自定义图片加载显示不完全\"></a>问题II：tree图使用自定义图片加载显示不完全</h3><hr>\n<h4 id=\"解决方案1-无效-：使用对象深比较函数避免多次渲染\"><a href=\"#解决方案1-无效-：使用对象深比较函数避免多次渲染\" class=\"headerlink\" title=\"解决方案1(无效)：使用对象深比较函数避免多次渲染\"></a>解决方案1(无效)：使用对象深比较函数避免多次渲染</h4><blockquote>\n<p>使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。</p>\n</blockquote>\n<ol>\n<li>Js对象深比较函数deepComparison定义</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [deepComparison 深比较]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[any]&#125;</span> </span>data [any]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[Boolean]&#125;</span>      </span>[是否相同]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepComparison</span>(<span class=\"params\">data1, data2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 获取变量类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getType = <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> d === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'date'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'regexp'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// object / array //</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'object'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d !== d) <span class=\"keyword\">return</span> <span class=\"string\">'nan'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> d).toLowerCase();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 基本类型比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">d1, d2, type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'nan'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'date'</span> || type === <span class=\"string\">'regexp'</span>) <span class=\"keyword\">return</span> d1.toString() === d2.toString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (d1 === d2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 递归比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">d1, d2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type1 = getType(d1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type2 = getType(d2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 !== type2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys1 = <span class=\"built_in\">Object</span>.keys(d1).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d1, k));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys2 = <span class=\"built_in\">Object</span>.keys(d2).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d2, k));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keys1.length !== keys2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys1.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          !keys2.includes(keys1[i]) ||</span><br><span class=\"line\">          !compare(d1[keys1[i]], d2[keys1[i]])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> is(d1, d2, type1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> compare(data1, data2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.深度比较函数使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidUpdate() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'update'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rawTreeData = toJS(treeData);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!deepComparison(<span class=\"keyword\">this</span>.echartsTreeData, rawTreeData)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'change'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsTreeData = rawTreeData;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    optionData.series[<span class=\"number\">0</span>].data = [rawTreeData];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(optionData);</span><br><span class=\"line\">    <span class=\"comment\">// this.echartsElement.clear();</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案2-无效-：使用base64字符串替换img-url\"><a href=\"#解决方案2-无效-：使用base64字符串替换img-url\" class=\"headerlink\" title=\"解决方案2(无效)：使用base64字符串替换img url\"></a>解决方案2(无效)：使用base64字符串替换img url</h4><blockquote>\n<p>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。</p>\n</blockquote>\n<p><img src=\"/blogs/img/article/tree-6.png\" alt=\"tree-6\"></p>\n<h4 id=\"解决方案3-有效-：禁用动画加载\"><a href=\"#解决方案3-有效-：禁用动画加载\" class=\"headerlink\" title=\"解决方案3(有效)：禁用动画加载\"></a>解决方案3(有效)：禁用动画加载</h4><blockquote>\n<p>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chartOption = &#123;</span><br><span class=\"line\">  animation: <span class=\"literal\">true</span>, <span class=\"comment\">// 解决渲染不全的问题</span></span><br><span class=\"line\">  tooltip: &#123;</span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案4-有效-：组件渲染完成后重新手动渲染\"><a href=\"#解决方案4-有效-：组件渲染完成后重新手动渲染\" class=\"headerlink\" title=\"解决方案4(有效)：组件渲染完成后重新手动渲染\"></a>解决方案4(有效)：组件渲染完成后重新手动渲染</h4><blockquote>\n<p>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。</p>\n</blockquote>\n<ol>\n<li><p>函数防抖声明<br>函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Function&#125;</span> </span>fn         [回调函数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Time]&#125;</span>   </span>delayTime  [延迟时间(ms)]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Boolean&#125;</span>  </span>isImediate [是否需要立即调用]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span>   </span>args       [回调函数传入参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnDebounce</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fnObject = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">fn, delayTime, isImediate, args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置定时器方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> setTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn(args);</span><br><span class=\"line\">        <span class=\"comment\">// 清除定时器</span></span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> (fnObject[fn]);</span><br><span class=\"line\">      &#125;, delayTime);</span><br><span class=\"line\"></span><br><span class=\"line\">      fnObject[fn] = &#123;</span><br><span class=\"line\">        delayTime,</span><br><span class=\"line\">        timer,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delayTime || isImediate) <span class=\"keyword\">return</span> fn(args);</span><br><span class=\"line\">    <span class=\"comment\">// 判断函数是否已经在调用中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fnObject[fn]) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>finished事件监听和函数防抖的应用<br>其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将<code>finished</code>事件监听取消掉，减少渲染次数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  fnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 延迟时间设置为200ms</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\"><a href=\"#问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\" class=\"headerlink\" title=\"问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\"></a>问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</h3><hr>\n<p>节点选中效果原理是监听echarts的<code>dblclick</code>双击事件，双击后改变<code>options.series[0].data</code>数据项里的<code>selected</code>属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在<code>options.series[0].data</code>中额外声明<code>collapsed:[Boolean]</code>参数，同时禁用tree自带的折叠/展开控制。</p>\n<h4 id=\"冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\"><a href=\"#冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\" class=\"headerlink\" title=\"冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\"></a>冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效</h4><p>如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性<code>selected:true</code>，那么表现为：<code>selected</code>状态不常驻，变成了类似<code>mouseover</code>的鼠标划过状态触发；</p>\n<ol>\n<li><p>动画延迟更新属性声明  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Tree的外层数据 */</span></span><br><span class=\"line\">echartsInitData= &#123;</span><br><span class=\"line\">    tooltip: &#123;</span><br><span class=\"line\">      trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">      triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    series: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &#123;...&#125;,</span><br><span class=\"line\">        leaves: &#123;...&#125;,</span><br><span class=\"line\">        expandAndCollapse: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        animationDuration: <span class=\"number\">100</span>,</span><br><span class=\"line\">        animationDelayUpdate: <span class=\"number\">300</span>, <span class=\"comment\">// 动画延迟更新</span></span><br><span class=\"line\">        animationDurationUpdate: <span class=\"number\">400</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>冲突效果表现</p>\n</li>\n</ol>\n<p><img src=\"/blogs/img/article/tree-bug1.gif\" alt=\"tree-bug1\"></p>\n<h4 id=\"冲突2：鼠标的悬浮操作导致选中效果无效\"><a href=\"#冲突2：鼠标的悬浮操作导致选中效果无效\" class=\"headerlink\" title=\"冲突2：鼠标的悬浮操作导致选中效果无效\"></a>冲突2：鼠标的悬浮操作导致选中效果无效</h4><p>按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了<code>300ms</code>)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的<code>selected</code>属性触发label.formatter的渲染效果变化)两者冲突。</p>\n<ol>\n<li><p>设置<code>selected</code>属性更改函数的延迟时间  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* React组件自定义方法-选中一个元素 */</span></span><br><span class=\"line\">onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = e.data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedNodeName = name;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.snapshot.chooseSnapShot(name);</span><br><span class=\"line\">    &#125;, <span class=\"number\">400</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>冲突效果表现<br><img src=\"/blogs/img/article/tree-bug2.gif\" alt=\"tree-bug2\"></p>\n</li>\n</ol>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>方法同于上面提到的<code>finished事件监听和函数防抖的应用</code>，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有<code>selected</code>状态稍稍延迟更新和<code>selected</code>状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。</p>\n<ol>\n<li><p>代码概览  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  selectedNodeName = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  dblclickFnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'dblclick'</span>, <span class=\"keyword\">this</span>.onDoubleClickChart);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClickChart);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.selectedNodeName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 防抖延迟时间设置为200ms</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dblclickFnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"keyword\">this</span>.selectedNodeName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    snapshot.getSnapShotRequest();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果演示<br><img src=\"/blogs/img/article/tree-bug-fix.gif\" alt=\"tree-bug-fix\"></p>\n</li>\n</ol>\n"},{"title":"Linux Mint18.3 日常软件安装配置","catalog":true,"toc_nav_num":true,"date":"2018-04-04T08:30:35.000Z","subtitle":"linux mint","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-04-04T08:30:35.000Z","_content":"\n![city](/blogs/img/article/city.jpg)\n>实装机器是linux mint18.3，理论上也适用于ubuntu\n\n#### 目录\n1. QQ 8.1 的 安装配置\n2. 微信的安装配置\n3. 印象笔记的安装配置\n4. 安装 Mac-os 主题\n5. 怎样自由上网(翻墙)\n6. 安装办公软件wps\n7. 实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky\n8. chrome实用插件整理\n\n#### QQ 8.1 的 安装配置\n---------------------\n\n##### 方案一： Wine + deepingCrossover + deepinQQ 8.1\n>日常使用基本没有bug，能够保存密码自动登录  \n\n1. Wine安装  \nWine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。  \n跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。[-->阅读安装步骤](https://wiki.winehq.org/Ubuntu)  \n\n2. deepinCrossover安装  \n如果是64位系统，先添加对32位库的支持：  \n~~~sh\nsudo dpkg --add-architecture i386\nsudo apt-get update\n~~~\n可能需要添加下列32位库：\n~~~sh\nsudo apt-get install lib32z1 lib32ncurses5  \n~~~\n[crossover下载地址](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85)，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。\n\n3. deepinQQ 8.1安装  \ndeepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。\n\n##### 方案二： 绿色无需安装精简版QQ\n> 缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零  \n\n* 下载地址：[QQ.AppImage](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux)下载好后直接双击并允许可执行权限即可。\n\n#### 微信的安装配置\n----------------\n>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行  \n\n##### 方案一：electron-wechat\n[下载地址](https://github.com/geeeeeeeeek/electronic-wechat/releases)，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。  \n\n##### 方案二：weweChat\n[下载地址](https://github.com/trazyn/weweChat/releases)，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。  \n\n#### 印象笔记的安装配置\n--------------------\n>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个[Electron的应用中心](https://electronjs.org/apps)，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的[下载地址](https://electronjs.org/apps/whatever)，选择适合你的版本下载安装即可。\n\n#### 安装 Mac-os 主题\n-------------------\n* 安装到Linux Mint  \n~~~sh\nsudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt update\nsudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7\n~~~\n\n* 从Linux Mint卸载  \n~~~sh\nsudo add-apt-repository -r ppa:noobslab/macbuntu\nsudo apt update\nsudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts\n-v7\n~~~\n\n安装好了要自己去设置界面切换啊～\n\n#### 怎样自由上网(翻墙)\n--------------------\n1. 从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低[官方地址](https://my.vultr.com/)  \n2. 登录自己的服务器  \n3. 服务器一键安装shadowsocks服务 [参考地址](https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/)  \n4. 自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口  \n~~~sh\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n~~~\n5. chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇[教程](http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/)\n\n#### 安装办公软件wps\n------------------\n>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，[wps官网下载直达](http://linux.wps.cn/)\n\n#### 实用工具推荐\n---------------\n1. tmux终端工具\n>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上\n[使用教程](http://wdxtub.com/2016/03/30/tmux-guide/)\n\n2. stacer系统管理工具\n>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上[下载地址](https://sourceforge.net/projects/stacer/)\n\n3. oh-my-zsh终端模拟器\n>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上[安装教程](http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html)\n\n4. SmartGit仓库管理可视化工具\n>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意\n\n5. Docky  \n>漂亮的dock工具栏，方便酷炫实用  \n\n6. Peek\n>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件  \n\n7. Inkscape\n>跨平台免费强大的svg图片绘制工具  \n\n#### chrome实用插件整理\n---------------------\n1. infinity标签页  \n>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观\n2. Octotree  \n>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转\n3. Postman  \n>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用\n4. SwitchyOmega  \n>大家都用的代理软件，不说了\n5. 印象笔记剪藏  \n>随时随地把网络资源保存到你的笔记本里\n6. SimpRead - 简阅  \n>让浏览器支持纯净的阅读模式\n7. Full Page Screen Capture  \n>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长\n8. 高效网页截图编辑插件\n>另一个好用的截图插件\n\n#### 感谢阅读\n有时间还会继续更新本文\n","source":"_posts/linux-mint-configure.md","raw":"---\ntitle: \"Linux Mint18.3 日常软件安装配置\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-04-04 16:30:35\nsubtitle: \"linux mint\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- linux\n- mint\ncategories:\n- Linux\nupdateDate: 2018-04-04 16:30:35\n---\n\n![city](/blogs/img/article/city.jpg)\n>实装机器是linux mint18.3，理论上也适用于ubuntu\n\n#### 目录\n1. QQ 8.1 的 安装配置\n2. 微信的安装配置\n3. 印象笔记的安装配置\n4. 安装 Mac-os 主题\n5. 怎样自由上网(翻墙)\n6. 安装办公软件wps\n7. 实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky\n8. chrome实用插件整理\n\n#### QQ 8.1 的 安装配置\n---------------------\n\n##### 方案一： Wine + deepingCrossover + deepinQQ 8.1\n>日常使用基本没有bug，能够保存密码自动登录  \n\n1. Wine安装  \nWine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。  \n跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。[-->阅读安装步骤](https://wiki.winehq.org/Ubuntu)  \n\n2. deepinCrossover安装  \n如果是64位系统，先添加对32位库的支持：  \n~~~sh\nsudo dpkg --add-architecture i386\nsudo apt-get update\n~~~\n可能需要添加下列32位库：\n~~~sh\nsudo apt-get install lib32z1 lib32ncurses5  \n~~~\n[crossover下载地址](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85)，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。\n\n3. deepinQQ 8.1安装  \ndeepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。\n\n##### 方案二： 绿色无需安装精简版QQ\n> 缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零  \n\n* 下载地址：[QQ.AppImage](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux)下载好后直接双击并允许可执行权限即可。\n\n#### 微信的安装配置\n----------------\n>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行  \n\n##### 方案一：electron-wechat\n[下载地址](https://github.com/geeeeeeeeek/electronic-wechat/releases)，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。  \n\n##### 方案二：weweChat\n[下载地址](https://github.com/trazyn/weweChat/releases)，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。  \n\n#### 印象笔记的安装配置\n--------------------\n>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个[Electron的应用中心](https://electronjs.org/apps)，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的[下载地址](https://electronjs.org/apps/whatever)，选择适合你的版本下载安装即可。\n\n#### 安装 Mac-os 主题\n-------------------\n* 安装到Linux Mint  \n~~~sh\nsudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt update\nsudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7\n~~~\n\n* 从Linux Mint卸载  \n~~~sh\nsudo add-apt-repository -r ppa:noobslab/macbuntu\nsudo apt update\nsudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts\n-v7\n~~~\n\n安装好了要自己去设置界面切换啊～\n\n#### 怎样自由上网(翻墙)\n--------------------\n1. 从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低[官方地址](https://my.vultr.com/)  \n2. 登录自己的服务器  \n3. 服务器一键安装shadowsocks服务 [参考地址](https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/)  \n4. 自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口  \n~~~sh\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n~~~\n5. chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇[教程](http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/)\n\n#### 安装办公软件wps\n------------------\n>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，[wps官网下载直达](http://linux.wps.cn/)\n\n#### 实用工具推荐\n---------------\n1. tmux终端工具\n>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上\n[使用教程](http://wdxtub.com/2016/03/30/tmux-guide/)\n\n2. stacer系统管理工具\n>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上[下载地址](https://sourceforge.net/projects/stacer/)\n\n3. oh-my-zsh终端模拟器\n>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上[安装教程](http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html)\n\n4. SmartGit仓库管理可视化工具\n>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意\n\n5. Docky  \n>漂亮的dock工具栏，方便酷炫实用  \n\n6. Peek\n>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件  \n\n7. Inkscape\n>跨平台免费强大的svg图片绘制工具  \n\n#### chrome实用插件整理\n---------------------\n1. infinity标签页  \n>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观\n2. Octotree  \n>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转\n3. Postman  \n>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用\n4. SwitchyOmega  \n>大家都用的代理软件，不说了\n5. 印象笔记剪藏  \n>随时随地把网络资源保存到你的笔记本里\n6. SimpRead - 简阅  \n>让浏览器支持纯净的阅读模式\n7. Full Page Screen Capture  \n>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长\n8. 高效网页截图编辑插件\n>另一个好用的截图插件\n\n#### 感谢阅读\n有时间还会继续更新本文\n","slug":"linux-mint-configure","published":1,"updated":"2020-08-20T04:58:28.379Z","_id":"ckba8cy9w000u5495atju3svm","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/blogs/img/article/city.jpg\" alt=\"city\"></p>\n<blockquote>\n<p>实装机器是linux mint18.3，理论上也适用于ubuntu</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><ol>\n<li>QQ 8.1 的 安装配置</li>\n<li>微信的安装配置</li>\n<li>印象笔记的安装配置</li>\n<li>安装 Mac-os 主题</li>\n<li>怎样自由上网(翻墙)</li>\n<li>安装办公软件wps</li>\n<li>实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky</li>\n<li>chrome实用插件整理</li>\n</ol>\n<h4 id=\"QQ-8-1-的-安装配置\"><a href=\"#QQ-8-1-的-安装配置\" class=\"headerlink\" title=\"QQ 8.1 的 安装配置\"></a>QQ 8.1 的 安装配置</h4><hr>\n<h5 id=\"方案一：-Wine-deepingCrossover-deepinQQ-8-1\"><a href=\"#方案一：-Wine-deepingCrossover-deepinQQ-8-1\" class=\"headerlink\" title=\"方案一： Wine + deepingCrossover + deepinQQ 8.1\"></a>方案一： Wine + deepingCrossover + deepinQQ 8.1</h5><blockquote>\n<p>日常使用基本没有bug，能够保存密码自动登录  </p>\n</blockquote>\n<ol>\n<li><p>Wine安装<br>Wine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。<br>跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。<a href=\"https://wiki.winehq.org/Ubuntu\" target=\"_blank\" rel=\"noopener\">—&gt;阅读安装步骤</a>  </p>\n</li>\n<li><p>deepinCrossover安装<br>如果是64位系统，先添加对32位库的支持：  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --add-architecture i386</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>可能需要添加下列32位库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32z1 lib32ncurses5</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">crossover下载地址</a>，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。</p>\n</li>\n<li><p>deepinQQ 8.1安装<br>deepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。</p>\n</li>\n</ol>\n<h5 id=\"方案二：-绿色无需安装精简版QQ\"><a href=\"#方案二：-绿色无需安装精简版QQ\" class=\"headerlink\" title=\"方案二： 绿色无需安装精简版QQ\"></a>方案二： 绿色无需安装精简版QQ</h5><blockquote>\n<p>缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零  </p>\n</blockquote>\n<ul>\n<li>下载地址：<a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux\" target=\"_blank\" rel=\"noopener\">QQ.AppImage</a>下载好后直接双击并允许可执行权限即可。</li>\n</ul>\n<h4 id=\"微信的安装配置\"><a href=\"#微信的安装配置\" class=\"headerlink\" title=\"微信的安装配置\"></a>微信的安装配置</h4><hr>\n<blockquote>\n<p>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行  </p>\n</blockquote>\n<h5 id=\"方案一：electron-wechat\"><a href=\"#方案一：electron-wechat\" class=\"headerlink\" title=\"方案一：electron-wechat\"></a>方案一：electron-wechat</h5><p><a href=\"https://github.com/geeeeeeeeek/electronic-wechat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。  </p>\n<h5 id=\"方案二：weweChat\"><a href=\"#方案二：weweChat\" class=\"headerlink\" title=\"方案二：weweChat\"></a>方案二：weweChat</h5><p><a href=\"https://github.com/trazyn/weweChat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。  </p>\n<h4 id=\"印象笔记的安装配置\"><a href=\"#印象笔记的安装配置\" class=\"headerlink\" title=\"印象笔记的安装配置\"></a>印象笔记的安装配置</h4><hr>\n<blockquote>\n<p>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个<a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron的应用中心</a>，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的<a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">下载地址</a>，选择适合你的版本下载安装即可。</p>\n</blockquote>\n<h4 id=\"安装-Mac-os-主题\"><a href=\"#安装-Mac-os-主题\" class=\"headerlink\" title=\"安装 Mac-os 主题\"></a>安装 Mac-os 主题</h4><hr>\n<ul>\n<li><p>安装到Linux Mint  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从Linux Mint卸载  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository -r ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts</span><br><span class=\"line\">-v7</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>安装好了要自己去设置界面切换啊～</p>\n<h4 id=\"怎样自由上网-翻墙\"><a href=\"#怎样自由上网-翻墙\" class=\"headerlink\" title=\"怎样自由上网(翻墙)\"></a>怎样自由上网(翻墙)</h4><hr>\n<ol>\n<li>从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低<a href=\"https://my.vultr.com/\" target=\"_blank\" rel=\"noopener\">官方地址</a>  </li>\n<li>登录自己的服务器  </li>\n<li>服务器一键安装shadowsocks服务 <a href=\"https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">参考地址</a>  </li>\n<li>自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure></li>\n<li>chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇<a href=\"http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n</ol>\n<h4 id=\"安装办公软件wps\"><a href=\"#安装办公软件wps\" class=\"headerlink\" title=\"安装办公软件wps\"></a>安装办公软件wps</h4><hr>\n<blockquote>\n<p>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，<a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps官网下载直达</a></p>\n</blockquote>\n<h4 id=\"实用工具推荐\"><a href=\"#实用工具推荐\" class=\"headerlink\" title=\"实用工具推荐\"></a>实用工具推荐</h4><hr>\n<ol>\n<li><p>tmux终端工具</p>\n<blockquote>\n<p>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上<br><a href=\"http://wdxtub.com/2016/03/30/tmux-guide/\" target=\"_blank\" rel=\"noopener\">使用教程</a></p>\n</blockquote>\n</li>\n<li><p>stacer系统管理工具</p>\n<blockquote>\n<p>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上<a href=\"https://sourceforge.net/projects/stacer/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</blockquote>\n</li>\n<li><p>oh-my-zsh终端模拟器</p>\n<blockquote>\n<p>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上<a href=\"http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html\" target=\"_blank\" rel=\"noopener\">安装教程</a></p>\n</blockquote>\n</li>\n<li><p>SmartGit仓库管理可视化工具</p>\n<blockquote>\n<p>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意</p>\n</blockquote>\n</li>\n<li><p>Docky  </p>\n<blockquote>\n<p>漂亮的dock工具栏，方便酷炫实用  </p>\n</blockquote>\n</li>\n<li><p>Peek</p>\n<blockquote>\n<p>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件  </p>\n</blockquote>\n</li>\n<li><p>Inkscape</p>\n<blockquote>\n<p>跨平台免费强大的svg图片绘制工具  </p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"chrome实用插件整理\"><a href=\"#chrome实用插件整理\" class=\"headerlink\" title=\"chrome实用插件整理\"></a>chrome实用插件整理</h4><hr>\n<ol>\n<li>infinity标签页  <blockquote>\n<p>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观</p>\n</blockquote>\n</li>\n<li>Octotree  <blockquote>\n<p>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转</p>\n</blockquote>\n</li>\n<li>Postman  <blockquote>\n<p>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用</p>\n</blockquote>\n</li>\n<li>SwitchyOmega  <blockquote>\n<p>大家都用的代理软件，不说了</p>\n</blockquote>\n</li>\n<li>印象笔记剪藏  <blockquote>\n<p>随时随地把网络资源保存到你的笔记本里</p>\n</blockquote>\n</li>\n<li>SimpRead - 简阅  <blockquote>\n<p>让浏览器支持纯净的阅读模式</p>\n</blockquote>\n</li>\n<li>Full Page Screen Capture  <blockquote>\n<p>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长</p>\n</blockquote>\n</li>\n<li>高效网页截图编辑插件<blockquote>\n<p>另一个好用的截图插件</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h4><p>有时间还会继续更新本文</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blogs/img/article/city.jpg\" alt=\"city\"></p>\n<blockquote>\n<p>实装机器是linux mint18.3，理论上也适用于ubuntu</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><ol>\n<li>QQ 8.1 的 安装配置</li>\n<li>微信的安装配置</li>\n<li>印象笔记的安装配置</li>\n<li>安装 Mac-os 主题</li>\n<li>怎样自由上网(翻墙)</li>\n<li>安装办公软件wps</li>\n<li>实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky</li>\n<li>chrome实用插件整理</li>\n</ol>\n<h4 id=\"QQ-8-1-的-安装配置\"><a href=\"#QQ-8-1-的-安装配置\" class=\"headerlink\" title=\"QQ 8.1 的 安装配置\"></a>QQ 8.1 的 安装配置</h4><hr>\n<h5 id=\"方案一：-Wine-deepingCrossover-deepinQQ-8-1\"><a href=\"#方案一：-Wine-deepingCrossover-deepinQQ-8-1\" class=\"headerlink\" title=\"方案一： Wine + deepingCrossover + deepinQQ 8.1\"></a>方案一： Wine + deepingCrossover + deepinQQ 8.1</h5><blockquote>\n<p>日常使用基本没有bug，能够保存密码自动登录  </p>\n</blockquote>\n<ol>\n<li><p>Wine安装<br>Wine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。<br>跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。<a href=\"https://wiki.winehq.org/Ubuntu\" target=\"_blank\" rel=\"noopener\">—&gt;阅读安装步骤</a>  </p>\n</li>\n<li><p>deepinCrossover安装<br>如果是64位系统，先添加对32位库的支持：  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --add-architecture i386</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>可能需要添加下列32位库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32z1 lib32ncurses5</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">crossover下载地址</a>，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。</p>\n</li>\n<li><p>deepinQQ 8.1安装<br>deepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。</p>\n</li>\n</ol>\n<h5 id=\"方案二：-绿色无需安装精简版QQ\"><a href=\"#方案二：-绿色无需安装精简版QQ\" class=\"headerlink\" title=\"方案二： 绿色无需安装精简版QQ\"></a>方案二： 绿色无需安装精简版QQ</h5><blockquote>\n<p>缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零  </p>\n</blockquote>\n<ul>\n<li>下载地址：<a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux\" target=\"_blank\" rel=\"noopener\">QQ.AppImage</a>下载好后直接双击并允许可执行权限即可。</li>\n</ul>\n<h4 id=\"微信的安装配置\"><a href=\"#微信的安装配置\" class=\"headerlink\" title=\"微信的安装配置\"></a>微信的安装配置</h4><hr>\n<blockquote>\n<p>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行  </p>\n</blockquote>\n<h5 id=\"方案一：electron-wechat\"><a href=\"#方案一：electron-wechat\" class=\"headerlink\" title=\"方案一：electron-wechat\"></a>方案一：electron-wechat</h5><p><a href=\"https://github.com/geeeeeeeeek/electronic-wechat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。  </p>\n<h5 id=\"方案二：weweChat\"><a href=\"#方案二：weweChat\" class=\"headerlink\" title=\"方案二：weweChat\"></a>方案二：weweChat</h5><p><a href=\"https://github.com/trazyn/weweChat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。  </p>\n<h4 id=\"印象笔记的安装配置\"><a href=\"#印象笔记的安装配置\" class=\"headerlink\" title=\"印象笔记的安装配置\"></a>印象笔记的安装配置</h4><hr>\n<blockquote>\n<p>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个<a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron的应用中心</a>，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的<a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">下载地址</a>，选择适合你的版本下载安装即可。</p>\n</blockquote>\n<h4 id=\"安装-Mac-os-主题\"><a href=\"#安装-Mac-os-主题\" class=\"headerlink\" title=\"安装 Mac-os 主题\"></a>安装 Mac-os 主题</h4><hr>\n<ul>\n<li><p>安装到Linux Mint  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从Linux Mint卸载  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository -r ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts</span><br><span class=\"line\">-v7</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>安装好了要自己去设置界面切换啊～</p>\n<h4 id=\"怎样自由上网-翻墙\"><a href=\"#怎样自由上网-翻墙\" class=\"headerlink\" title=\"怎样自由上网(翻墙)\"></a>怎样自由上网(翻墙)</h4><hr>\n<ol>\n<li>从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低<a href=\"https://my.vultr.com/\" target=\"_blank\" rel=\"noopener\">官方地址</a>  </li>\n<li>登录自己的服务器  </li>\n<li>服务器一键安装shadowsocks服务 <a href=\"https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">参考地址</a>  </li>\n<li>自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure></li>\n<li>chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇<a href=\"http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n</ol>\n<h4 id=\"安装办公软件wps\"><a href=\"#安装办公软件wps\" class=\"headerlink\" title=\"安装办公软件wps\"></a>安装办公软件wps</h4><hr>\n<blockquote>\n<p>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，<a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps官网下载直达</a></p>\n</blockquote>\n<h4 id=\"实用工具推荐\"><a href=\"#实用工具推荐\" class=\"headerlink\" title=\"实用工具推荐\"></a>实用工具推荐</h4><hr>\n<ol>\n<li><p>tmux终端工具</p>\n<blockquote>\n<p>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上<br><a href=\"http://wdxtub.com/2016/03/30/tmux-guide/\" target=\"_blank\" rel=\"noopener\">使用教程</a></p>\n</blockquote>\n</li>\n<li><p>stacer系统管理工具</p>\n<blockquote>\n<p>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上<a href=\"https://sourceforge.net/projects/stacer/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</blockquote>\n</li>\n<li><p>oh-my-zsh终端模拟器</p>\n<blockquote>\n<p>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上<a href=\"http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html\" target=\"_blank\" rel=\"noopener\">安装教程</a></p>\n</blockquote>\n</li>\n<li><p>SmartGit仓库管理可视化工具</p>\n<blockquote>\n<p>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意</p>\n</blockquote>\n</li>\n<li><p>Docky  </p>\n<blockquote>\n<p>漂亮的dock工具栏，方便酷炫实用  </p>\n</blockquote>\n</li>\n<li><p>Peek</p>\n<blockquote>\n<p>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件  </p>\n</blockquote>\n</li>\n<li><p>Inkscape</p>\n<blockquote>\n<p>跨平台免费强大的svg图片绘制工具  </p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"chrome实用插件整理\"><a href=\"#chrome实用插件整理\" class=\"headerlink\" title=\"chrome实用插件整理\"></a>chrome实用插件整理</h4><hr>\n<ol>\n<li>infinity标签页  <blockquote>\n<p>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观</p>\n</blockquote>\n</li>\n<li>Octotree  <blockquote>\n<p>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转</p>\n</blockquote>\n</li>\n<li>Postman  <blockquote>\n<p>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用</p>\n</blockquote>\n</li>\n<li>SwitchyOmega  <blockquote>\n<p>大家都用的代理软件，不说了</p>\n</blockquote>\n</li>\n<li>印象笔记剪藏  <blockquote>\n<p>随时随地把网络资源保存到你的笔记本里</p>\n</blockquote>\n</li>\n<li>SimpRead - 简阅  <blockquote>\n<p>让浏览器支持纯净的阅读模式</p>\n</blockquote>\n</li>\n<li>Full Page Screen Capture  <blockquote>\n<p>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长</p>\n</blockquote>\n</li>\n<li>高效网页截图编辑插件<blockquote>\n<p>另一个好用的截图插件</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h4><p>有时间还会继续更新本文</p>\n"},{"title":"proxychains终端代理","catalog":true,"toc_nav_num":true,"date":"2018-04-04T08:30:35.000Z","subtitle":"proxy linux","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-04-04T08:30:35.000Z","_content":"\n### proxychains安装  \n\n`sudo apt install proxychains`\n\n### 编辑proxychains配置  \n\n`vim /etc/proxychains.conf`\n\n### 将socks4 127.0.0.1 9095改为  \n\n`socks5 127.0.0.1 1080`\n\nps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。  \n\n```bash\nProxyList format\n 94 #       type  ip  port  [user pass]\n 95 #       (values separated by 'tab' or 'blank')\n 96 #\n 97 #       only numeric ipv4 addresses are valid\n 98 #\n 99 #\n100 #        Examples:\n101 #\n102 #       socks5  192.168.67.78   1080    lamer   secret\n103 #       http    192.168.89.3    8080    justu   hidden\n104 #       socks4  192.168.1.49    1080\n105 #       http    192.168.39.93   8080\n```\n\n### 使用方法  \n在需要代理的命令前加上 proxychains ，如：\n```bash\nproxychains wget http://xxx.com/xxx.zip\nproxychains git clone https://xxxxxxxxx.git\n```\nnpm设置http代理：\n```bash\n# 假设本地代理端口为8002\nnpm config set proxy http://127.0.0.1:1081\nnpm config set https-proxy http://127.0.0.1:1081\n\n# 有用户密码的代理\nnpm config set proxy http://username:password@127.0.0.1:1081\nnpm confit set https-proxy http://username:password@127.0.0.1:1081\n```\nnpm设置socks5代理：\n```bash\n# 假设本地socks5代理端口为1081\n# 首先安装转换工具\nnpm install -g http-proxy-to-socks\n# 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上\nhpts -s 127.0.0.1:1081 -p 8002\n# 最后设置npm代理为8080\nnpm config set proxy http://127.0.0.1:8002\nnpm config set https-proxy http://127.0.0.1:8002\n```\n\n查看删除代理\n```bash\nnpm config get\n  or\nnpm config list\n\nnpm config delete proxy\n  and\nnpm config delete https-proxy\n```","source":"_posts/proxychains终端代理.md","raw":"---\ntitle: \"proxychains终端代理\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-04-04 16:30:35\nsubtitle: \"proxy linux\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- proxy\n- shadowsocks\ncategories:\n- Linux\nupdateDate: 2018-04-04 16:30:35\n---\n\n### proxychains安装  \n\n`sudo apt install proxychains`\n\n### 编辑proxychains配置  \n\n`vim /etc/proxychains.conf`\n\n### 将socks4 127.0.0.1 9095改为  \n\n`socks5 127.0.0.1 1080`\n\nps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。  \n\n```bash\nProxyList format\n 94 #       type  ip  port  [user pass]\n 95 #       (values separated by 'tab' or 'blank')\n 96 #\n 97 #       only numeric ipv4 addresses are valid\n 98 #\n 99 #\n100 #        Examples:\n101 #\n102 #       socks5  192.168.67.78   1080    lamer   secret\n103 #       http    192.168.89.3    8080    justu   hidden\n104 #       socks4  192.168.1.49    1080\n105 #       http    192.168.39.93   8080\n```\n\n### 使用方法  \n在需要代理的命令前加上 proxychains ，如：\n```bash\nproxychains wget http://xxx.com/xxx.zip\nproxychains git clone https://xxxxxxxxx.git\n```\nnpm设置http代理：\n```bash\n# 假设本地代理端口为8002\nnpm config set proxy http://127.0.0.1:1081\nnpm config set https-proxy http://127.0.0.1:1081\n\n# 有用户密码的代理\nnpm config set proxy http://username:password@127.0.0.1:1081\nnpm confit set https-proxy http://username:password@127.0.0.1:1081\n```\nnpm设置socks5代理：\n```bash\n# 假设本地socks5代理端口为1081\n# 首先安装转换工具\nnpm install -g http-proxy-to-socks\n# 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上\nhpts -s 127.0.0.1:1081 -p 8002\n# 最后设置npm代理为8080\nnpm config set proxy http://127.0.0.1:8002\nnpm config set https-proxy http://127.0.0.1:8002\n```\n\n查看删除代理\n```bash\nnpm config get\n  or\nnpm config list\n\nnpm config delete proxy\n  and\nnpm config delete https-proxy\n```","slug":"proxychains终端代理","published":1,"updated":"2020-08-20T08:33:47.565Z","_id":"ckba8cy9y000w549541ukgdcm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"proxychains安装\"><a href=\"#proxychains安装\" class=\"headerlink\" title=\"proxychains安装\"></a>proxychains安装</h3><p><code>sudo apt install proxychains</code></p>\n<h3 id=\"编辑proxychains配置\"><a href=\"#编辑proxychains配置\" class=\"headerlink\" title=\"编辑proxychains配置\"></a>编辑proxychains配置</h3><p><code>vim /etc/proxychains.conf</code></p>\n<h3 id=\"将socks4-127-0-0-1-9095改为\"><a href=\"#将socks4-127-0-0-1-9095改为\" class=\"headerlink\" title=\"将socks4 127.0.0.1 9095改为\"></a>将socks4 127.0.0.1 9095改为</h3><p><code>socks5 127.0.0.1 1080</code></p>\n<p>ps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProxyList format</span><br><span class=\"line\"> 94 <span class=\"comment\">#       type  ip  port  [user pass]</span></span><br><span class=\"line\"> 95 <span class=\"comment\">#       (values separated by 'tab' or 'blank')</span></span><br><span class=\"line\"> 96 <span class=\"comment\">#</span></span><br><span class=\"line\"> 97 <span class=\"comment\">#       only numeric ipv4 addresses are valid</span></span><br><span class=\"line\"> 98 <span class=\"comment\">#</span></span><br><span class=\"line\"> 99 <span class=\"comment\">#</span></span><br><span class=\"line\">100 <span class=\"comment\">#        Examples:</span></span><br><span class=\"line\">101 <span class=\"comment\">#</span></span><br><span class=\"line\">102 <span class=\"comment\">#       socks5  192.168.67.78   1080    lamer   secret</span></span><br><span class=\"line\">103 <span class=\"comment\">#       http    192.168.89.3    8080    justu   hidden</span></span><br><span class=\"line\">104 <span class=\"comment\">#       socks4  192.168.1.49    1080</span></span><br><span class=\"line\">105 <span class=\"comment\">#       http    192.168.39.93   8080</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>在需要代理的命令前加上 proxychains ，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains wget http://xxx.com/xxx.zip</span><br><span class=\"line\">proxychains git <span class=\"built_in\">clone</span> https://xxxxxxxxx.git</span><br></pre></td></tr></table></figure><br>npm设置http代理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地代理端口为8002</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:1081</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:1081</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有用户密码的代理</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://username:password@127.0.0.1:1081</span><br><span class=\"line\">npm confit <span class=\"built_in\">set</span> https-proxy http://username:password@127.0.0.1:1081</span><br></pre></td></tr></table></figure><br>npm设置socks5代理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地socks5代理端口为1081</span></span><br><span class=\"line\"><span class=\"comment\"># 首先安装转换工具</span></span><br><span class=\"line\">npm install -g http-proxy-to-socks</span><br><span class=\"line\"><span class=\"comment\"># 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上</span></span><br><span class=\"line\">hpts -s 127.0.0.1:1081 -p 8002</span><br><span class=\"line\"><span class=\"comment\"># 最后设置npm代理为8080</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:8002</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:8002</span><br></pre></td></tr></table></figure></p>\n<p>查看删除代理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get</span><br><span class=\"line\">  or</span><br><span class=\"line\">npm config list</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">  and</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"proxychains安装\"><a href=\"#proxychains安装\" class=\"headerlink\" title=\"proxychains安装\"></a>proxychains安装</h3><p><code>sudo apt install proxychains</code></p>\n<h3 id=\"编辑proxychains配置\"><a href=\"#编辑proxychains配置\" class=\"headerlink\" title=\"编辑proxychains配置\"></a>编辑proxychains配置</h3><p><code>vim /etc/proxychains.conf</code></p>\n<h3 id=\"将socks4-127-0-0-1-9095改为\"><a href=\"#将socks4-127-0-0-1-9095改为\" class=\"headerlink\" title=\"将socks4 127.0.0.1 9095改为\"></a>将socks4 127.0.0.1 9095改为</h3><p><code>socks5 127.0.0.1 1080</code></p>\n<p>ps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProxyList format</span><br><span class=\"line\"> 94 <span class=\"comment\">#       type  ip  port  [user pass]</span></span><br><span class=\"line\"> 95 <span class=\"comment\">#       (values separated by 'tab' or 'blank')</span></span><br><span class=\"line\"> 96 <span class=\"comment\">#</span></span><br><span class=\"line\"> 97 <span class=\"comment\">#       only numeric ipv4 addresses are valid</span></span><br><span class=\"line\"> 98 <span class=\"comment\">#</span></span><br><span class=\"line\"> 99 <span class=\"comment\">#</span></span><br><span class=\"line\">100 <span class=\"comment\">#        Examples:</span></span><br><span class=\"line\">101 <span class=\"comment\">#</span></span><br><span class=\"line\">102 <span class=\"comment\">#       socks5  192.168.67.78   1080    lamer   secret</span></span><br><span class=\"line\">103 <span class=\"comment\">#       http    192.168.89.3    8080    justu   hidden</span></span><br><span class=\"line\">104 <span class=\"comment\">#       socks4  192.168.1.49    1080</span></span><br><span class=\"line\">105 <span class=\"comment\">#       http    192.168.39.93   8080</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>在需要代理的命令前加上 proxychains ，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains wget http://xxx.com/xxx.zip</span><br><span class=\"line\">proxychains git <span class=\"built_in\">clone</span> https://xxxxxxxxx.git</span><br></pre></td></tr></table></figure><br>npm设置http代理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地代理端口为8002</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:1081</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:1081</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有用户密码的代理</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://username:password@127.0.0.1:1081</span><br><span class=\"line\">npm confit <span class=\"built_in\">set</span> https-proxy http://username:password@127.0.0.1:1081</span><br></pre></td></tr></table></figure><br>npm设置socks5代理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地socks5代理端口为1081</span></span><br><span class=\"line\"><span class=\"comment\"># 首先安装转换工具</span></span><br><span class=\"line\">npm install -g http-proxy-to-socks</span><br><span class=\"line\"><span class=\"comment\"># 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上</span></span><br><span class=\"line\">hpts -s 127.0.0.1:1081 -p 8002</span><br><span class=\"line\"><span class=\"comment\"># 最后设置npm代理为8080</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:8002</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:8002</span><br></pre></td></tr></table></figure></p>\n<p>查看删除代理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get</span><br><span class=\"line\">  or</span><br><span class=\"line\">npm config list</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">  and</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure></p>\n"},{"title":"sass开发规范","catalog":true,"toc_nav_num":true,"date":"2018-04-04T08:30:35.000Z","subtitle":"sass css","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-04-04T08:30:35.000Z","_content":"\n>author: NoJsJa\n\n#### 目录\n---------------------------------\n\n1. sass语法  \n2. 命名  \n3. 书写顺序  \n4. 代码嵌套  \n5. 注释  \n\n#### sass语法\n---------------------------------\n\n>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。  \n\n1. 变量  \n2. 计算功能    \n3. 继承  \n4. Mixin  \n5. 函数  \n6. 高级用法  \n\n##### 变量  \n\nSass允许使用变量，所有变量以$开头：  \n\n```scss\n$blue: #1875e7;\n　div {\n　　　color: $blue;\n　}\n```\n\n内嵌到字符串中的变量需要写在 ' #{} ' 中间：  \n\n```scss\n$side: left;\n.rounded {\n　border-#{$side}-radius: 5px;\n}\n```\n\n##### 计算功能  \n\nSass允许在代码中使用算式：  \n\n```scss\nbody {\n　margin: (14px/2);\n　top: 50px + 100px;\n　right: $var * 10%;\n}\n```\n\n##### 继承  \n\nSass允许一个选择器使用关键字 @extend 继承另一个选择器：  \n\n```scss\n.class1 {\n　　border: 1px solid #ddd;\n}\n\n.class2 {\n　 @extend .class1;\n　 font-size:120%;\n}\n```\n\n##### Mixin  \n\nMixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：  \n\n```scss\n@mixin left {\n　float: left;\n　margin-left: 10px;\n}\n\n```\n\n使用 @include 调用这个mixin：  \n\n```scss\ndiv {\n　 @include left;\n}\n```\n\nmixin还能制定参数和参数默认值：  \n\n```scss\n@mixin left($value: 10px) {\n　 float: left;\n　 margin-right: $value;\n}\n```\n\n使用的时候可以直接使用默认值或是加入参数值：  \n\n```scss\ndiv {\n　　　　@include left(20px);\n　　}\n```\n\n##### 函数  \n\nSass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：  \n\n```scss\n@function double($n) {\n　 @return $n * 2;\n}\n\n#sidebar {\n　width: double(5px);\n}\n```\n\n##### 高级用法  \n\n* 引入外部文件  \n* 使用条件语句  \n* 使用循环语句  \n\n引入外部文件：  \n\n```scss\n@import \"../foo.css\";\n```\n\n使用条件语句：  \n```scss\np {\n　@if 1 + 1 == 2 { border: 1px solid; }\n　@if 5 < 3 { border: 2px dotted; }\n}\n\n@if $color == '#fff' {\n　background-color: #000;\n} @else {\n　background-color: #fff;\n}\n```\n\n使用循环语句，支持for和while循环：　\n\n```scss\n@for $i from 1 to 10 {\n　　.border-#{$i} {\n　　　　border: #{$i}px solid blue;\n　　}\n}\n\n$i: 6;\n　　@while $i > 0 {\n　　　　.item-#{$i} { width: 2em * $i; }\n　　　　$i: $i - 2;\n　　}\n```\n\n#### 命名\n---------------------------------\n\n1. ID命名  \n2. Class命名  \n3. 父元素和子元素的命名规则  \n\n##### ID命名  \n\n统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：  \n\n```scss\n/* bad */\n#rootlistitem {...}\n#RootListItem {...}\n\n/* good */\n#rootListItem {...}\n```\n\n命名单词数最好不要超过3个：  \n\n```scss\n/* bad */\n#rootListItemWrapper {...}\n\n/* good */\n#rootListWrapper {...}\n```\n\n##### Class命名  \n\n类的命名统一使用连字符 '-' 连接各个单词，命名中不允许出现大写字母：  \n\n```\n/* bad */\n.contentWrapper {...}\n\n/* good */\n.content-wrapper {...}\n```\n\n类名最好使用三个及三个以下的单词，至多不超过四个：  \n\n```scss\n/* bad */\n.file-detail-list-item-wrapper {...}\n\n/* not-good */\n.file-detail-list-wrapper {...}\n\n/* good */\n.file-detail-wrapper {...}\n.file-wrapper {...}\n\n```\n\n##### 父元素和子元素的命名规则  \n\n父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：  \n\n```scss\n.file-list-wrapper {\n\n  .file-list-header {...}\n\n  .file-list-body {\n\n    .list-body-aside {\n\n      .body-aside-left {...}\n      .body-aside-right {...}\n    }\n\n    .list-body-main {...}\n  }\n\n  .file-list-footer {...}\n}\n```\n\n#### 书写顺序\n---------------------------------\n\n内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：  \n\n```scss\n.class {\n  /* 布局定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  /* 盒模型属性 */\n  display: block;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: 1rem;\n  height: 1rem;\n  margin: 1em;\n  padding: 1em;\n  border: 3px solid #ddd;\n  border-radius: 5px;\n\n  /* 表现性属性 */\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  font-weight: bold;\n  line-height: 1rem;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #eee;\n  color: #000;\n\n  /* 其它 */\n  z-index: 500;\n}\n\n```\n\n#### 代码缩进和嵌套\n---------------------------------\n\n1. 代码缩进  \n2. 多层嵌套  \n\n##### 代码缩进  \n\n代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)   \n\n```scss\n/* bad */\n.class {\n    position: fixed;\n}\n\n/* good */\n.class {\n  position: fixed;\n}\n```\n\n选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格    \n\n```scss\n/* bad */\n.class>div{\n  position:fixed;\n}\n\n/* good */\n.class > div {\n  position: fixed;\n}\n```\n\n##### 多层嵌套  \n\n在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器' > '，提高css查询性能)  \n\n```scss\n/* bad */\n.content {\n  display: block;\n}\n\n.content > .news-article > .title {\n  font-size: 1.2em;\n\n/* bad */\n.content {\n  display: block;\n\n  > .news-article {\n    > .title {\n      font-size: 1.2em;\n    }\n  }\n\n/* good */\ncontent {\n  display: block;\n\n  > .news-article > .title {\n    font-size: 1.2em;\n  }\n}\n```\n\n在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询  \n\n```scss\n/* bad */\n.content-page {\n  font-size: 1.2rem;\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n  }\n}\n\n@media screen and (min-width: 641px) {\n  .content-page {\n    font-size: 1rem;\n\n    > .main > .latest-news > .news-article > .title {\n      font-size: 3rem;\n    }\n\n    > .page-footer {\n      font-size: 0.8rem;\n    }\n  }\n}\n\n\n\n/* good */\n.content-page {\n  font-size: 1.2rem;\n\n  @media screen and (min-width: 641px) {\n    font-size: 1rem;\n  }\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n\n          @media screen and (min-width: 641px) {\n            font-size: 3rem;\n          }\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n\n    @media screen and (min-width: 641px) {\n      font-size: 0.8rem;\n    }\n  }\n}\n```\n\n嵌套顺序和选择器，以下是一个sass块应该具有的顺序：  \n\n1. 当前选择器的样式属性  \n2. 当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)  \n3. 当前选择器的声明样式 (.selected, .active, .enlarged)  \n4. 用Sass的上下文媒体查询  \n5. 子选择器作为最后的部分  \n\n```scss\n.product-teaser {\n  /* 当前选择器的样式属性 */\n  display: inline-block;\n  padding: 1rem;\n  background-color: whitesmoke;\n  color: grey;\n\n  /* 当前选择器的伪类选择器 */\n  &:hover {\n    color: black;\n  }\n\n  &:before {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  &:after {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  /* 当前选择器的声明样式 */\n  &.active {\n    background-color: pink;\n    color: red;\n  }\n\n  /* 上下文媒体查询 */\n  @media screen and (max-width: 640px) {\n    display: block;\n    font-size: 2em;\n  }\n\n  /* 子选择器 */\n  > .content > .title {\n    font-size: 1.2em;\n\n    /* 子选择器上下文媒体查询 */\n    @media screen and (max-width: 640px) {\n      letter-spacing: 0.2em;\n      text-transform: uppercase;\n    }\n  }\n}\n```\n\n#### 注释  \n---------------------------------\n\n>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段  \n\n1. 组件注释  \n2. 子组件注释  \n3. 一般注释  \n\n##### 组件注释  \n\n一个大组件需要使用组件注释，体现页面结构。  \n\n```scss\n  /* ==========================================================\n  父组件 file-list\n  ============================================================= */\n  .file-list {...}\n\n```\n\n##### 子组件注释  \n\n一个组件的子组件需要使用子组件注释，体现组件整体结构。  \n\n```scss\n  /* 子组件 file-list-item\n  ============================================================= */\n  .file-list-item {...}\n\n```\n\n##### 一般注释  \n\n使用块注释和行注释都行，重要的是体现代码结构和代码简洁度  \n\n```scss\n/* 块注释 */\n.class1 {\n\n  // 行注释\n  .title {...}\n\n  .content {  // 行注释2\n    color: #fff;\n  }\n}\n```\n","source":"_posts/sass开发规范.md","raw":"---\ntitle: \"sass开发规范\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-04-04 16:30:35\nsubtitle: \"sass css\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- sass\n- css\ncategories:\n- Sass\nupdateDate: 2018-04-04 16:30:35\n---\n\n>author: NoJsJa\n\n#### 目录\n---------------------------------\n\n1. sass语法  \n2. 命名  \n3. 书写顺序  \n4. 代码嵌套  \n5. 注释  \n\n#### sass语法\n---------------------------------\n\n>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。  \n\n1. 变量  \n2. 计算功能    \n3. 继承  \n4. Mixin  \n5. 函数  \n6. 高级用法  \n\n##### 变量  \n\nSass允许使用变量，所有变量以$开头：  \n\n```scss\n$blue: #1875e7;\n　div {\n　　　color: $blue;\n　}\n```\n\n内嵌到字符串中的变量需要写在 ' #{} ' 中间：  \n\n```scss\n$side: left;\n.rounded {\n　border-#{$side}-radius: 5px;\n}\n```\n\n##### 计算功能  \n\nSass允许在代码中使用算式：  \n\n```scss\nbody {\n　margin: (14px/2);\n　top: 50px + 100px;\n　right: $var * 10%;\n}\n```\n\n##### 继承  \n\nSass允许一个选择器使用关键字 @extend 继承另一个选择器：  \n\n```scss\n.class1 {\n　　border: 1px solid #ddd;\n}\n\n.class2 {\n　 @extend .class1;\n　 font-size:120%;\n}\n```\n\n##### Mixin  \n\nMixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：  \n\n```scss\n@mixin left {\n　float: left;\n　margin-left: 10px;\n}\n\n```\n\n使用 @include 调用这个mixin：  \n\n```scss\ndiv {\n　 @include left;\n}\n```\n\nmixin还能制定参数和参数默认值：  \n\n```scss\n@mixin left($value: 10px) {\n　 float: left;\n　 margin-right: $value;\n}\n```\n\n使用的时候可以直接使用默认值或是加入参数值：  \n\n```scss\ndiv {\n　　　　@include left(20px);\n　　}\n```\n\n##### 函数  \n\nSass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：  \n\n```scss\n@function double($n) {\n　 @return $n * 2;\n}\n\n#sidebar {\n　width: double(5px);\n}\n```\n\n##### 高级用法  \n\n* 引入外部文件  \n* 使用条件语句  \n* 使用循环语句  \n\n引入外部文件：  \n\n```scss\n@import \"../foo.css\";\n```\n\n使用条件语句：  \n```scss\np {\n　@if 1 + 1 == 2 { border: 1px solid; }\n　@if 5 < 3 { border: 2px dotted; }\n}\n\n@if $color == '#fff' {\n　background-color: #000;\n} @else {\n　background-color: #fff;\n}\n```\n\n使用循环语句，支持for和while循环：　\n\n```scss\n@for $i from 1 to 10 {\n　　.border-#{$i} {\n　　　　border: #{$i}px solid blue;\n　　}\n}\n\n$i: 6;\n　　@while $i > 0 {\n　　　　.item-#{$i} { width: 2em * $i; }\n　　　　$i: $i - 2;\n　　}\n```\n\n#### 命名\n---------------------------------\n\n1. ID命名  \n2. Class命名  \n3. 父元素和子元素的命名规则  \n\n##### ID命名  \n\n统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：  \n\n```scss\n/* bad */\n#rootlistitem {...}\n#RootListItem {...}\n\n/* good */\n#rootListItem {...}\n```\n\n命名单词数最好不要超过3个：  \n\n```scss\n/* bad */\n#rootListItemWrapper {...}\n\n/* good */\n#rootListWrapper {...}\n```\n\n##### Class命名  \n\n类的命名统一使用连字符 '-' 连接各个单词，命名中不允许出现大写字母：  \n\n```\n/* bad */\n.contentWrapper {...}\n\n/* good */\n.content-wrapper {...}\n```\n\n类名最好使用三个及三个以下的单词，至多不超过四个：  \n\n```scss\n/* bad */\n.file-detail-list-item-wrapper {...}\n\n/* not-good */\n.file-detail-list-wrapper {...}\n\n/* good */\n.file-detail-wrapper {...}\n.file-wrapper {...}\n\n```\n\n##### 父元素和子元素的命名规则  \n\n父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：  \n\n```scss\n.file-list-wrapper {\n\n  .file-list-header {...}\n\n  .file-list-body {\n\n    .list-body-aside {\n\n      .body-aside-left {...}\n      .body-aside-right {...}\n    }\n\n    .list-body-main {...}\n  }\n\n  .file-list-footer {...}\n}\n```\n\n#### 书写顺序\n---------------------------------\n\n内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：  \n\n```scss\n.class {\n  /* 布局定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  /* 盒模型属性 */\n  display: block;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: 1rem;\n  height: 1rem;\n  margin: 1em;\n  padding: 1em;\n  border: 3px solid #ddd;\n  border-radius: 5px;\n\n  /* 表现性属性 */\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  font-weight: bold;\n  line-height: 1rem;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #eee;\n  color: #000;\n\n  /* 其它 */\n  z-index: 500;\n}\n\n```\n\n#### 代码缩进和嵌套\n---------------------------------\n\n1. 代码缩进  \n2. 多层嵌套  \n\n##### 代码缩进  \n\n代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)   \n\n```scss\n/* bad */\n.class {\n    position: fixed;\n}\n\n/* good */\n.class {\n  position: fixed;\n}\n```\n\n选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格    \n\n```scss\n/* bad */\n.class>div{\n  position:fixed;\n}\n\n/* good */\n.class > div {\n  position: fixed;\n}\n```\n\n##### 多层嵌套  \n\n在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器' > '，提高css查询性能)  \n\n```scss\n/* bad */\n.content {\n  display: block;\n}\n\n.content > .news-article > .title {\n  font-size: 1.2em;\n\n/* bad */\n.content {\n  display: block;\n\n  > .news-article {\n    > .title {\n      font-size: 1.2em;\n    }\n  }\n\n/* good */\ncontent {\n  display: block;\n\n  > .news-article > .title {\n    font-size: 1.2em;\n  }\n}\n```\n\n在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询  \n\n```scss\n/* bad */\n.content-page {\n  font-size: 1.2rem;\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n  }\n}\n\n@media screen and (min-width: 641px) {\n  .content-page {\n    font-size: 1rem;\n\n    > .main > .latest-news > .news-article > .title {\n      font-size: 3rem;\n    }\n\n    > .page-footer {\n      font-size: 0.8rem;\n    }\n  }\n}\n\n\n\n/* good */\n.content-page {\n  font-size: 1.2rem;\n\n  @media screen and (min-width: 641px) {\n    font-size: 1rem;\n  }\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n\n          @media screen and (min-width: 641px) {\n            font-size: 3rem;\n          }\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n\n    @media screen and (min-width: 641px) {\n      font-size: 0.8rem;\n    }\n  }\n}\n```\n\n嵌套顺序和选择器，以下是一个sass块应该具有的顺序：  \n\n1. 当前选择器的样式属性  \n2. 当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)  \n3. 当前选择器的声明样式 (.selected, .active, .enlarged)  \n4. 用Sass的上下文媒体查询  \n5. 子选择器作为最后的部分  \n\n```scss\n.product-teaser {\n  /* 当前选择器的样式属性 */\n  display: inline-block;\n  padding: 1rem;\n  background-color: whitesmoke;\n  color: grey;\n\n  /* 当前选择器的伪类选择器 */\n  &:hover {\n    color: black;\n  }\n\n  &:before {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  &:after {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  /* 当前选择器的声明样式 */\n  &.active {\n    background-color: pink;\n    color: red;\n  }\n\n  /* 上下文媒体查询 */\n  @media screen and (max-width: 640px) {\n    display: block;\n    font-size: 2em;\n  }\n\n  /* 子选择器 */\n  > .content > .title {\n    font-size: 1.2em;\n\n    /* 子选择器上下文媒体查询 */\n    @media screen and (max-width: 640px) {\n      letter-spacing: 0.2em;\n      text-transform: uppercase;\n    }\n  }\n}\n```\n\n#### 注释  \n---------------------------------\n\n>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段  \n\n1. 组件注释  \n2. 子组件注释  \n3. 一般注释  \n\n##### 组件注释  \n\n一个大组件需要使用组件注释，体现页面结构。  \n\n```scss\n  /* ==========================================================\n  父组件 file-list\n  ============================================================= */\n  .file-list {...}\n\n```\n\n##### 子组件注释  \n\n一个组件的子组件需要使用子组件注释，体现组件整体结构。  \n\n```scss\n  /* 子组件 file-list-item\n  ============================================================= */\n  .file-list-item {...}\n\n```\n\n##### 一般注释  \n\n使用块注释和行注释都行，重要的是体现代码结构和代码简洁度  \n\n```scss\n/* 块注释 */\n.class1 {\n\n  // 行注释\n  .title {...}\n\n  .content {  // 行注释2\n    color: #fff;\n  }\n}\n```\n","slug":"sass开发规范","published":1,"updated":"2020-08-20T04:58:42.503Z","_id":"ckba8cya2000z5495gtwe9zc4","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>author: NoJsJa</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><hr>\n<ol>\n<li>sass语法  </li>\n<li>命名  </li>\n<li>书写顺序  </li>\n<li>代码嵌套  </li>\n<li>注释  </li>\n</ol>\n<h4 id=\"sass语法\"><a href=\"#sass语法\" class=\"headerlink\" title=\"sass语法\"></a>sass语法</h4><hr>\n<blockquote>\n<p>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。  </p>\n</blockquote>\n<ol>\n<li>变量  </li>\n<li>计算功能    </li>\n<li>继承  </li>\n<li>Mixin  </li>\n<li>函数  </li>\n<li>高级用法  </li>\n</ol>\n<h5 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h5><p>Sass允许使用变量，所有变量以$开头：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$blue</span>: <span class=\"number\">#1875e7</span>;</span><br><span class=\"line\">　<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"variable\">$blue</span>;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n<p>内嵌到字符串中的变量需要写在 ‘ #{} ‘ 中间：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$side</span>: left;</span><br><span class=\"line\"><span class=\"selector-class\">.rounded</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$side</span>&#125;-radius: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"计算功能\"><a href=\"#计算功能\" class=\"headerlink\" title=\"计算功能\"></a>计算功能</h5><p>Sass允许在代码中使用算式：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">margin</span>: (<span class=\"number\">14px</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">　<span class=\"attribute\">top</span>: <span class=\"number\">50px</span> + <span class=\"number\">100px</span>;</span><br><span class=\"line\">　<span class=\"attribute\">right</span>: <span class=\"variable\">$var</span> * <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h5><p>Sass允许一个选择器使用关键字 @extend 继承另一个选择器：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\">　　<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class2</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@extend</span> .class1;</span><br><span class=\"line\">　 <span class=\"attribute\">font-size</span>:<span class=\"number\">120%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a>Mixin</h5><p>Mixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left &#123;</span><br><span class=\"line\">　<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 @include 调用这个mixin：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@include</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mixin还能制定参数和参数默认值：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left(<span class=\"variable\">$value</span>: <span class=\"number\">10px</span>) &#123;</span><br><span class=\"line\">　 <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　 <span class=\"attribute\">margin-right</span>: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的时候可以直接使用默认值或是加入参数值：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">@include</span> left(<span class=\"number\">20px</span>);</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h5><p>Sass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@function</span> double(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@return</span> <span class=\"variable\">$n</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">width</span>: double(<span class=\"number\">5px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h5><ul>\n<li>引入外部文件  </li>\n<li>使用条件语句  </li>\n<li>使用循环语句  </li>\n</ul>\n<p>引入外部文件：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"../foo.css\"</span>;</span><br></pre></td></tr></table></figure>\n<p>使用条件语句：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; &#125;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@if</span> <span class=\"variable\">$color</span> == <span class=\"string\">'#fff'</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用循环语句，支持for和while循环：　</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> to <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">　　<span class=\"selector-class\">.border-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">　　　　<span class=\"attribute\">border</span>: #&#123;<span class=\"variable\">$i</span>&#125;px solid blue;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">@while</span> <span class=\"variable\">$i</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">　　　　<span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h4><hr>\n<ol>\n<li>ID命名  </li>\n<li>Class命名  </li>\n<li>父元素和子元素的命名规则  </li>\n</ol>\n<h5 id=\"ID命名\"><a href=\"#ID命名\" class=\"headerlink\" title=\"ID命名\"></a>ID命名</h5><p>统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootlistitem</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#RootListItem</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItem</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>命名单词数最好不要超过3个：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItemWrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListWrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Class命名\"><a href=\"#Class命名\" class=\"headerlink\" title=\"Class命名\"></a>Class命名</h5><p>类的命名统一使用连字符 ‘-‘ 连接各个单词，命名中不允许出现大写字母：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* bad *&#x2F;</span><br><span class=\"line\">.contentWrapper &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* good *&#x2F;</span><br><span class=\"line\">.content-wrapper &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>类名最好使用三个及三个以下的单词，至多不超过四个：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-item-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* not-good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.file-wrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"父元素和子元素的命名规则\"><a href=\"#父元素和子元素的命名规则\" class=\"headerlink\" title=\"父元素和子元素的命名规则\"></a>父元素和子元素的命名规则</h5><p>父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.file-list-wrapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-header</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-body</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-aside</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-left</span> &#123;...&#125;</span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-right</span> &#123;...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-main</span> &#123;...&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-footer</span> &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"书写顺序\"><a href=\"#书写顺序\" class=\"headerlink\" title=\"书写顺序\"></a>书写顺序</h4><hr>\n<p>内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 布局定位 */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 盒模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 表现性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Arial'</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 其它 */</span></span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码缩进和嵌套\"><a href=\"#代码缩进和嵌套\" class=\"headerlink\" title=\"代码缩进和嵌套\"></a>代码缩进和嵌套</h4><hr>\n<ol>\n<li>代码缩进  </li>\n<li>多层嵌套  </li>\n</ol>\n<h5 id=\"代码缩进\"><a href=\"#代码缩进\" class=\"headerlink\" title=\"代码缩进\"></a>代码缩进</h5><p>代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)   </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格    </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span>&gt;<span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"多层嵌套\"><a href=\"#多层嵌套\" class=\"headerlink\" title=\"多层嵌套\"></a>多层嵌套</h5><p>在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器’ &gt; ‘，提高css查询性能)  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"attribute\">content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.main</span> &gt; <span class=\"selector-class\">.latest-news</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嵌套顺序和选择器，以下是一个sass块应该具有的顺序：  </p>\n<ol>\n<li>当前选择器的样式属性  </li>\n<li>当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)  </li>\n<li>当前选择器的声明样式 (.selected, .active, .enlarged)  </li>\n<li>用Sass的上下文媒体查询  </li>\n<li>子选择器作为最后的部分  </li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.product-teaser</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的样式属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的伪类选择器 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的声明样式 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 上下文媒体查询 */</span></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 子选择器 */</span></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 子选择器上下文媒体查询 */</span></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2em</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><hr>\n<blockquote>\n<p>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段  </p>\n</blockquote>\n<ol>\n<li>组件注释  </li>\n<li>子组件注释  </li>\n<li>一般注释  </li>\n</ol>\n<h5 id=\"组件注释\"><a href=\"#组件注释\" class=\"headerlink\" title=\"组件注释\"></a>组件注释</h5><p>一个大组件需要使用组件注释，体现页面结构。  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ==========================================================</span></span><br><span class=\"line\"><span class=\"comment\">父组件 file-list</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"子组件注释\"><a href=\"#子组件注释\" class=\"headerlink\" title=\"子组件注释\"></a>子组件注释</h5><p>一个组件的子组件需要使用子组件注释，体现组件整体结构。  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 子组件 file-list-item</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list-item</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"一般注释\"><a href=\"#一般注释\" class=\"headerlink\" title=\"一般注释\"></a>一般注释</h5><p>使用块注释和行注释都行，重要的是体现代码结构和代码简洁度  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 块注释 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 行注释</span></span><br><span class=\"line\">  <span class=\"selector-class\">.title</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.content</span> &#123;  <span class=\"comment\">// 行注释2</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>author: NoJsJa</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><hr>\n<ol>\n<li>sass语法  </li>\n<li>命名  </li>\n<li>书写顺序  </li>\n<li>代码嵌套  </li>\n<li>注释  </li>\n</ol>\n<h4 id=\"sass语法\"><a href=\"#sass语法\" class=\"headerlink\" title=\"sass语法\"></a>sass语法</h4><hr>\n<blockquote>\n<p>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。  </p>\n</blockquote>\n<ol>\n<li>变量  </li>\n<li>计算功能    </li>\n<li>继承  </li>\n<li>Mixin  </li>\n<li>函数  </li>\n<li>高级用法  </li>\n</ol>\n<h5 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h5><p>Sass允许使用变量，所有变量以$开头：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$blue</span>: <span class=\"number\">#1875e7</span>;</span><br><span class=\"line\">　<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"variable\">$blue</span>;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n<p>内嵌到字符串中的变量需要写在 ‘ #{} ‘ 中间：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$side</span>: left;</span><br><span class=\"line\"><span class=\"selector-class\">.rounded</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$side</span>&#125;-radius: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"计算功能\"><a href=\"#计算功能\" class=\"headerlink\" title=\"计算功能\"></a>计算功能</h5><p>Sass允许在代码中使用算式：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">margin</span>: (<span class=\"number\">14px</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">　<span class=\"attribute\">top</span>: <span class=\"number\">50px</span> + <span class=\"number\">100px</span>;</span><br><span class=\"line\">　<span class=\"attribute\">right</span>: <span class=\"variable\">$var</span> * <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h5><p>Sass允许一个选择器使用关键字 @extend 继承另一个选择器：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\">　　<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class2</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@extend</span> .class1;</span><br><span class=\"line\">　 <span class=\"attribute\">font-size</span>:<span class=\"number\">120%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a>Mixin</h5><p>Mixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left &#123;</span><br><span class=\"line\">　<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 @include 调用这个mixin：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@include</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mixin还能制定参数和参数默认值：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left(<span class=\"variable\">$value</span>: <span class=\"number\">10px</span>) &#123;</span><br><span class=\"line\">　 <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　 <span class=\"attribute\">margin-right</span>: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的时候可以直接使用默认值或是加入参数值：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">@include</span> left(<span class=\"number\">20px</span>);</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h5><p>Sass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@function</span> double(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@return</span> <span class=\"variable\">$n</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">width</span>: double(<span class=\"number\">5px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h5><ul>\n<li>引入外部文件  </li>\n<li>使用条件语句  </li>\n<li>使用循环语句  </li>\n</ul>\n<p>引入外部文件：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"../foo.css\"</span>;</span><br></pre></td></tr></table></figure>\n<p>使用条件语句：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; &#125;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@if</span> <span class=\"variable\">$color</span> == <span class=\"string\">'#fff'</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用循环语句，支持for和while循环：　</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> to <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">　　<span class=\"selector-class\">.border-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">　　　　<span class=\"attribute\">border</span>: #&#123;<span class=\"variable\">$i</span>&#125;px solid blue;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">@while</span> <span class=\"variable\">$i</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">　　　　<span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h4><hr>\n<ol>\n<li>ID命名  </li>\n<li>Class命名  </li>\n<li>父元素和子元素的命名规则  </li>\n</ol>\n<h5 id=\"ID命名\"><a href=\"#ID命名\" class=\"headerlink\" title=\"ID命名\"></a>ID命名</h5><p>统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootlistitem</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#RootListItem</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItem</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>命名单词数最好不要超过3个：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItemWrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListWrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Class命名\"><a href=\"#Class命名\" class=\"headerlink\" title=\"Class命名\"></a>Class命名</h5><p>类的命名统一使用连字符 ‘-‘ 连接各个单词，命名中不允许出现大写字母：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* bad *&#x2F;</span><br><span class=\"line\">.contentWrapper &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* good *&#x2F;</span><br><span class=\"line\">.content-wrapper &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>类名最好使用三个及三个以下的单词，至多不超过四个：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-item-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* not-good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.file-wrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"父元素和子元素的命名规则\"><a href=\"#父元素和子元素的命名规则\" class=\"headerlink\" title=\"父元素和子元素的命名规则\"></a>父元素和子元素的命名规则</h5><p>父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.file-list-wrapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-header</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-body</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-aside</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-left</span> &#123;...&#125;</span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-right</span> &#123;...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-main</span> &#123;...&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-footer</span> &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"书写顺序\"><a href=\"#书写顺序\" class=\"headerlink\" title=\"书写顺序\"></a>书写顺序</h4><hr>\n<p>内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 布局定位 */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 盒模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 表现性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Arial'</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 其它 */</span></span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码缩进和嵌套\"><a href=\"#代码缩进和嵌套\" class=\"headerlink\" title=\"代码缩进和嵌套\"></a>代码缩进和嵌套</h4><hr>\n<ol>\n<li>代码缩进  </li>\n<li>多层嵌套  </li>\n</ol>\n<h5 id=\"代码缩进\"><a href=\"#代码缩进\" class=\"headerlink\" title=\"代码缩进\"></a>代码缩进</h5><p>代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)   </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格    </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span>&gt;<span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"多层嵌套\"><a href=\"#多层嵌套\" class=\"headerlink\" title=\"多层嵌套\"></a>多层嵌套</h5><p>在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器’ &gt; ‘，提高css查询性能)  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"attribute\">content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.main</span> &gt; <span class=\"selector-class\">.latest-news</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嵌套顺序和选择器，以下是一个sass块应该具有的顺序：  </p>\n<ol>\n<li>当前选择器的样式属性  </li>\n<li>当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)  </li>\n<li>当前选择器的声明样式 (.selected, .active, .enlarged)  </li>\n<li>用Sass的上下文媒体查询  </li>\n<li>子选择器作为最后的部分  </li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.product-teaser</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的样式属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的伪类选择器 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的声明样式 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 上下文媒体查询 */</span></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 子选择器 */</span></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 子选择器上下文媒体查询 */</span></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2em</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><hr>\n<blockquote>\n<p>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段  </p>\n</blockquote>\n<ol>\n<li>组件注释  </li>\n<li>子组件注释  </li>\n<li>一般注释  </li>\n</ol>\n<h5 id=\"组件注释\"><a href=\"#组件注释\" class=\"headerlink\" title=\"组件注释\"></a>组件注释</h5><p>一个大组件需要使用组件注释，体现页面结构。  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ==========================================================</span></span><br><span class=\"line\"><span class=\"comment\">父组件 file-list</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"子组件注释\"><a href=\"#子组件注释\" class=\"headerlink\" title=\"子组件注释\"></a>子组件注释</h5><p>一个组件的子组件需要使用子组件注释，体现组件整体结构。  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 子组件 file-list-item</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list-item</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"一般注释\"><a href=\"#一般注释\" class=\"headerlink\" title=\"一般注释\"></a>一般注释</h5><p>使用块注释和行注释都行，重要的是体现代码结构和代码简洁度  </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 块注释 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 行注释</span></span><br><span class=\"line\">  <span class=\"selector-class\">.title</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.content</span> &#123;  <span class=\"comment\">// 行注释2</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"polipo服务配置shadowsocks终端代理","catalog":true,"toc_nav_num":true,"date":"2018-04-04T08:30:35.000Z","subtitle":"shadowsocks polipo","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-04-04T08:30:35.000Z","_content":"\n在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是`socks5`协议，而大部分终端都只支持`http`和`https`等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。\n\n#### 安装shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks)\n\n通过pip可以非常简单地安装。需要安装ss需要的依赖。\n\n```\nsudo apt-get update\nsudo apt-get install python-pip\nsudo apt-get install python-setuptools m2crypto\n\npip install shadowsocks\n```\n\n#### 启动shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks)\n\n使用`sslocal`命令来启动shadowsocks。\n\n一般在`/etc`目录下创建一个`shadowsocks.json`文件：\n\n```\nvi /etc/shadowsocks.json\n```\n\n保存如下形式的ss服务端信息：\n\n```\n{\n    \"server\":\"11.22.33.44\",\n    \"server_port\":6666,\n    \"local_port\":1080,\n    \"password\":\"123456\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\"\n}\n```\n\n启动ss。\n\n```\nsslocal -c /etc/shadowsocks.json\n```\n\n可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。\n\n#### 安装配置polipo[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo)\n\n安装：\n\n```\nsudo apt-get install polipo\n```\n\npolio的配置文件在`/etc/polipo/config`目录。打开，编辑保存如下信息：\n\n```\n# This file only needs to list configuration variables that deviate\n# from the default values.  See /usr/share/doc/polipo/examples/config.sample\n# and \"polipo -v\" for variables you can tweak and further information.\n\nlogSyslog = true\nlogFile = /var/log/polipo/polipo.log\n\nproxyAddress = \"0.0.0.0\"\n\nsocksParentProxy = \"127.0.0.1:1080\"\nsocksProxyType = socks5\nproxyPort = 8123\n\nchunkHighMark = 50331648\nobjectHighMark = 16384\n\nserverMaxSlots = 64\nserverSlots = 16\nserverSlots1 = 32\n```\n\n重新启动polipo服务：\n\n```\n/etc/init.d/polipo restart\n```\n\n#### 使用代理[](http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86)\n\npolipo的默认端口号是 8123，**每次使用**代理前，**必须**进行如下操作：\n\n```\nexport http_proxy=http://127.0.0.1:8123\n```\n\n然后可以验证是否成功：\n\n```\ncurl www.google.com\n```\n\n**取消代理**：\n\n```\nunset http_proxy\n```\n\n如果想**持久化**运行，可以将` export http_proxy=http://127.0.0.1:8123`这个语句添加到` ~/.bashrc`文件内，并用`source ~/.bashrc`命令使之生效。\n","source":"_posts/shadowsocks_polipo.md","raw":"---\ntitle: \"polipo服务配置shadowsocks终端代理\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-04-04 16:30:35\nsubtitle: \"shadowsocks polipo\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- shadowsocks\n- proxy\ncategories:\n- Linux\nupdateDate: 2018-04-04 16:30:35\n---\n\n在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是`socks5`协议，而大部分终端都只支持`http`和`https`等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。\n\n#### 安装shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks)\n\n通过pip可以非常简单地安装。需要安装ss需要的依赖。\n\n```\nsudo apt-get update\nsudo apt-get install python-pip\nsudo apt-get install python-setuptools m2crypto\n\npip install shadowsocks\n```\n\n#### 启动shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks)\n\n使用`sslocal`命令来启动shadowsocks。\n\n一般在`/etc`目录下创建一个`shadowsocks.json`文件：\n\n```\nvi /etc/shadowsocks.json\n```\n\n保存如下形式的ss服务端信息：\n\n```\n{\n    \"server\":\"11.22.33.44\",\n    \"server_port\":6666,\n    \"local_port\":1080,\n    \"password\":\"123456\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\"\n}\n```\n\n启动ss。\n\n```\nsslocal -c /etc/shadowsocks.json\n```\n\n可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。\n\n#### 安装配置polipo[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo)\n\n安装：\n\n```\nsudo apt-get install polipo\n```\n\npolio的配置文件在`/etc/polipo/config`目录。打开，编辑保存如下信息：\n\n```\n# This file only needs to list configuration variables that deviate\n# from the default values.  See /usr/share/doc/polipo/examples/config.sample\n# and \"polipo -v\" for variables you can tweak and further information.\n\nlogSyslog = true\nlogFile = /var/log/polipo/polipo.log\n\nproxyAddress = \"0.0.0.0\"\n\nsocksParentProxy = \"127.0.0.1:1080\"\nsocksProxyType = socks5\nproxyPort = 8123\n\nchunkHighMark = 50331648\nobjectHighMark = 16384\n\nserverMaxSlots = 64\nserverSlots = 16\nserverSlots1 = 32\n```\n\n重新启动polipo服务：\n\n```\n/etc/init.d/polipo restart\n```\n\n#### 使用代理[](http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86)\n\npolipo的默认端口号是 8123，**每次使用**代理前，**必须**进行如下操作：\n\n```\nexport http_proxy=http://127.0.0.1:8123\n```\n\n然后可以验证是否成功：\n\n```\ncurl www.google.com\n```\n\n**取消代理**：\n\n```\nunset http_proxy\n```\n\n如果想**持久化**运行，可以将` export http_proxy=http://127.0.0.1:8123`这个语句添加到` ~/.bashrc`文件内，并用`source ~/.bashrc`命令使之生效。\n","slug":"shadowsocks-polipo","published":1,"updated":"2020-08-20T04:58:47.495Z","_id":"ckba8cya300115495b68r7bwk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是<code>socks5</code>协议，而大部分终端都只支持<code>http</code>和<code>https</code>等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。</p>\n<h4 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>通过pip可以非常简单地安装。需要安装ss需要的依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">sudo apt-get install python-setuptools m2crypto</span><br><span class=\"line\"></span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动shadowsocks\"><a href=\"#启动shadowsocks\" class=\"headerlink\" title=\"启动shadowsocks\"></a>启动shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>使用<code>sslocal</code>命令来启动shadowsocks。</p>\n<p>一般在<code>/etc</code>目录下创建一个<code>shadowsocks.json</code>文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure>\n<p>保存如下形式的ss服务端信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;11.22.33.44&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:6666,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;123456&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动ss。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure>\n<p>可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。</p>\n<h4 id=\"安装配置polipo\"><a href=\"#安装配置polipo\" class=\"headerlink\" title=\"安装配置polipo\"></a>安装配置polipo<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo\" target=\"_blank\" rel=\"noopener\"></a></h4><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install polipo</span><br></pre></td></tr></table></figure>\n<p>polio的配置文件在<code>/etc/polipo/config</code>目录。打开，编辑保存如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This file only needs to list configuration variables that deviate</span><br><span class=\"line\"># from the default values.  See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;polipo&#x2F;examples&#x2F;config.sample</span><br><span class=\"line\"># and &quot;polipo -v&quot; for variables you can tweak and further information.</span><br><span class=\"line\"></span><br><span class=\"line\">logSyslog &#x3D; true</span><br><span class=\"line\">logFile &#x3D; &#x2F;var&#x2F;log&#x2F;polipo&#x2F;polipo.log</span><br><span class=\"line\"></span><br><span class=\"line\">proxyAddress &#x3D; &quot;0.0.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">socksParentProxy &#x3D; &quot;127.0.0.1:1080&quot;</span><br><span class=\"line\">socksProxyType &#x3D; socks5</span><br><span class=\"line\">proxyPort &#x3D; 8123</span><br><span class=\"line\"></span><br><span class=\"line\">chunkHighMark &#x3D; 50331648</span><br><span class=\"line\">objectHighMark &#x3D; 16384</span><br><span class=\"line\"></span><br><span class=\"line\">serverMaxSlots &#x3D; 64</span><br><span class=\"line\">serverSlots &#x3D; 16</span><br><span class=\"line\">serverSlots1 &#x3D; 32</span><br></pre></td></tr></table></figure>\n<p>重新启动polipo服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;init.d&#x2F;polipo restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用代理\"><a href=\"#使用代理\" class=\"headerlink\" title=\"使用代理\"></a>使用代理<a href=\"http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86\" target=\"_blank\" rel=\"noopener\"></a></h4><p>polipo的默认端口号是 8123，<strong>每次使用</strong>代理前，<strong>必须</strong>进行如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8123</span><br></pre></td></tr></table></figure>\n<p>然后可以验证是否成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl www.google.com</span><br></pre></td></tr></table></figure>\n<p><strong>取消代理</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset http_proxy</span><br></pre></td></tr></table></figure>\n<p>如果想<strong>持久化</strong>运行，可以将<code>export http_proxy=http://127.0.0.1:8123</code>这个语句添加到<code>~/.bashrc</code>文件内，并用<code>source ~/.bashrc</code>命令使之生效。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是<code>socks5</code>协议，而大部分终端都只支持<code>http</code>和<code>https</code>等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。</p>\n<h4 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>通过pip可以非常简单地安装。需要安装ss需要的依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">sudo apt-get install python-setuptools m2crypto</span><br><span class=\"line\"></span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动shadowsocks\"><a href=\"#启动shadowsocks\" class=\"headerlink\" title=\"启动shadowsocks\"></a>启动shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>使用<code>sslocal</code>命令来启动shadowsocks。</p>\n<p>一般在<code>/etc</code>目录下创建一个<code>shadowsocks.json</code>文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure>\n<p>保存如下形式的ss服务端信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;11.22.33.44&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:6666,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;123456&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动ss。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure>\n<p>可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。</p>\n<h4 id=\"安装配置polipo\"><a href=\"#安装配置polipo\" class=\"headerlink\" title=\"安装配置polipo\"></a>安装配置polipo<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo\" target=\"_blank\" rel=\"noopener\"></a></h4><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install polipo</span><br></pre></td></tr></table></figure>\n<p>polio的配置文件在<code>/etc/polipo/config</code>目录。打开，编辑保存如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This file only needs to list configuration variables that deviate</span><br><span class=\"line\"># from the default values.  See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;polipo&#x2F;examples&#x2F;config.sample</span><br><span class=\"line\"># and &quot;polipo -v&quot; for variables you can tweak and further information.</span><br><span class=\"line\"></span><br><span class=\"line\">logSyslog &#x3D; true</span><br><span class=\"line\">logFile &#x3D; &#x2F;var&#x2F;log&#x2F;polipo&#x2F;polipo.log</span><br><span class=\"line\"></span><br><span class=\"line\">proxyAddress &#x3D; &quot;0.0.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">socksParentProxy &#x3D; &quot;127.0.0.1:1080&quot;</span><br><span class=\"line\">socksProxyType &#x3D; socks5</span><br><span class=\"line\">proxyPort &#x3D; 8123</span><br><span class=\"line\"></span><br><span class=\"line\">chunkHighMark &#x3D; 50331648</span><br><span class=\"line\">objectHighMark &#x3D; 16384</span><br><span class=\"line\"></span><br><span class=\"line\">serverMaxSlots &#x3D; 64</span><br><span class=\"line\">serverSlots &#x3D; 16</span><br><span class=\"line\">serverSlots1 &#x3D; 32</span><br></pre></td></tr></table></figure>\n<p>重新启动polipo服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;init.d&#x2F;polipo restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用代理\"><a href=\"#使用代理\" class=\"headerlink\" title=\"使用代理\"></a>使用代理<a href=\"http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86\" target=\"_blank\" rel=\"noopener\"></a></h4><p>polipo的默认端口号是 8123，<strong>每次使用</strong>代理前，<strong>必须</strong>进行如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8123</span><br></pre></td></tr></table></figure>\n<p>然后可以验证是否成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl www.google.com</span><br></pre></td></tr></table></figure>\n<p><strong>取消代理</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset http_proxy</span><br></pre></td></tr></table></figure>\n<p>如果想<strong>持久化</strong>运行，可以将<code>export http_proxy=http://127.0.0.1:8123</code>这个语句添加到<code>~/.bashrc</code>文件内，并用<code>source ~/.bashrc</code>命令使之生效。</p>\n"},{"title":"原生Js实现瀑布流效果","catalog":true,"toc_nav_num":true,"date":"2018-04-01T08:01:26.000Z","subtitle":"javascript waterFall","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-04-01T08:01:26.000Z","_content":"\n#### 盗用的效果图\n![preview](/blogs/img/article/waterfall-1.gif)\n\n#### 效果分析\n瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。\n\n![float](/blogs/img/article/waterfall-2.jpg)  \n\n看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个... 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。\n\n![baidu](/blogs/img/article/waterfall-3.jpg)  \n\n#### 解决方法\n\n* html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。\n\n```html\n<!-- 页面结构 -->\n<div class=\"water-fall-container\">\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n  ...\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n</div>\n\n```\n\n* 我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、\n每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，\n(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，\n其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。\n\n```javascript\n\n/**\n * [WaterFall 图片瀑布流构造函数]\n * @param  {DomElement} father   [瀑布流的容器元素]\n * @param  {String} childClass   [瀑布流子元素类名选择器 如: .water-fall-item]\n * @param  {Number} columnWidth  [设定每一列的宽度，单位: px]\n * @param  {Number} paddingWidth [设定图片之间的间隔距离， 单位: px]\n */\nfunction WaterFall(father, childClass, columnWidth, paddingWidth) {\n  this.$container = father;  // 容器\n  this.childSelector = childClass;  // 子代img选择器\n  this.children = [];  // 子代img\n  this.columnWidth = columnWidth;  // 单列宽度\n  this.paddingWidth = paddingWidth + 'px';  // 图片之间的间隔距离\n\n  this.totalWidth = this.$container.clientWidth;  // 容器宽度\n  this.columnNum = ~~(this.totalWidth / this.columnWidth);  // 列数\n\n  // 调用多次\n  this.step = function () {\n    this.totalWidth = this.$container.clientWidth;\n    this.columnNum = ~~(this.totalWidth / this.columnWidth);\n    this.children = this.$container.querySelectorAll(this.childSelector);\n    for (var i = 0; i < this.children.length; i++) {\n      this.children[i].style.width = this.columnWidth + 'px';\n      this.children[i].style.height = 'auto';\n      this.children[i].style.paddingRight = this.paddingWidth;\n      this.children[i].style.paddingBottom = this.paddingWidth;\n\n      // 每行第一个设置左padding\n      if (i % this.columnNum === 0) {\n        this.children[i].style.paddingLeft = this.paddingWidth;\n      }\n\n      // 第一行 和 其它行的不同处理\n      if (i < this.columnNum) {\n        this.children[i].style.left = (i) * this.columnWidth + 'px';\n        this.children[i].style.top = (i) * 0 + 'px';\n      }else {\n        this.children[i].style.left = this.children[i - this.columnNum].style.left;\n        this.children[i].style.top = +this.children[i - this.columnNum].style.top.replace('px', '') +\n                                      this.children[i - this.columnNum].clientHeight + 'px';\n      }\n    }\n  };\n};\n\n```\n\n* 再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是\n弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !\n\n```javascript\n\n/**\n * [waterFallInit 瀑布流初始化]\n * @param  {String} wData [图片url的数组]\n */\nvar waterFallInit = function (wData) {\n  var fragment = document.createDocumentFragment();\n  var div, img, timer, $imgs, length, index = 0;\n  // 载入图片\n  for (var i = 0; i < wData.length; i++) {\n    div = document.createElement('div');\n    img = document.createElement('img');\n    div.setAttribute('class', 'water-fall-item');\n    img.setAttribute('src', wData[i]);\n    div.appendChild(img);\n    fragment.appendChild(div);\n    if (i === wData.length - 1) {\n      domMap.$waterFall.appendChild(fragment);\n    }\n  }\n\n  // 一个瀑布流实例\n  var waterfall = new WaterFall(domMap.$waterFall, '.water-fall-item', 200, 5);\n\n  // 轮询所有图片的加载状态\n  timer = setInterval(function () {\n    index=0;\n    $imgs = domMap.$waterFall.querySelectorAll('.water-fall-item > img');\n    length = $imgs.length;\n    // 统计图片加载完成的数量\n    for (var i = 0; i < $imgs.length; i++) {\n      if ($imgs[i].complete) {\n        if (++index === length) clearInterval(timer);\n      }\n    }\n    waterfall.step();\n  }, 250);\n\n  // 窗口拖动\n   window.onresize =  function () {\n     Utils.FnDelay(function () {\n       waterfall.step();\n     }, 800);\n   }\n};\n\n```\n\n#### 感谢阅读\n_代码存放在github：[nojsja](https://github.com/NoJsJa/javascript-learning/tree/master/normal/water-fall-layout)_\n","source":"_posts/water-fall-layout.md","raw":"---\ntitle: \"原生Js实现瀑布流效果\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-04-01 16:01:26\nsubtitle: \"javascript waterFall\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- javascript\ncategories:\n- Javascript\nupdateDate: 2018-04-01 16:01:26\n---\n\n#### 盗用的效果图\n![preview](/blogs/img/article/waterfall-1.gif)\n\n#### 效果分析\n瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。\n\n![float](/blogs/img/article/waterfall-2.jpg)  \n\n看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个... 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。\n\n![baidu](/blogs/img/article/waterfall-3.jpg)  \n\n#### 解决方法\n\n* html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。\n\n```html\n<!-- 页面结构 -->\n<div class=\"water-fall-container\">\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n  ...\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n</div>\n\n```\n\n* 我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、\n每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，\n(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，\n其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。\n\n```javascript\n\n/**\n * [WaterFall 图片瀑布流构造函数]\n * @param  {DomElement} father   [瀑布流的容器元素]\n * @param  {String} childClass   [瀑布流子元素类名选择器 如: .water-fall-item]\n * @param  {Number} columnWidth  [设定每一列的宽度，单位: px]\n * @param  {Number} paddingWidth [设定图片之间的间隔距离， 单位: px]\n */\nfunction WaterFall(father, childClass, columnWidth, paddingWidth) {\n  this.$container = father;  // 容器\n  this.childSelector = childClass;  // 子代img选择器\n  this.children = [];  // 子代img\n  this.columnWidth = columnWidth;  // 单列宽度\n  this.paddingWidth = paddingWidth + 'px';  // 图片之间的间隔距离\n\n  this.totalWidth = this.$container.clientWidth;  // 容器宽度\n  this.columnNum = ~~(this.totalWidth / this.columnWidth);  // 列数\n\n  // 调用多次\n  this.step = function () {\n    this.totalWidth = this.$container.clientWidth;\n    this.columnNum = ~~(this.totalWidth / this.columnWidth);\n    this.children = this.$container.querySelectorAll(this.childSelector);\n    for (var i = 0; i < this.children.length; i++) {\n      this.children[i].style.width = this.columnWidth + 'px';\n      this.children[i].style.height = 'auto';\n      this.children[i].style.paddingRight = this.paddingWidth;\n      this.children[i].style.paddingBottom = this.paddingWidth;\n\n      // 每行第一个设置左padding\n      if (i % this.columnNum === 0) {\n        this.children[i].style.paddingLeft = this.paddingWidth;\n      }\n\n      // 第一行 和 其它行的不同处理\n      if (i < this.columnNum) {\n        this.children[i].style.left = (i) * this.columnWidth + 'px';\n        this.children[i].style.top = (i) * 0 + 'px';\n      }else {\n        this.children[i].style.left = this.children[i - this.columnNum].style.left;\n        this.children[i].style.top = +this.children[i - this.columnNum].style.top.replace('px', '') +\n                                      this.children[i - this.columnNum].clientHeight + 'px';\n      }\n    }\n  };\n};\n\n```\n\n* 再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是\n弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !\n\n```javascript\n\n/**\n * [waterFallInit 瀑布流初始化]\n * @param  {String} wData [图片url的数组]\n */\nvar waterFallInit = function (wData) {\n  var fragment = document.createDocumentFragment();\n  var div, img, timer, $imgs, length, index = 0;\n  // 载入图片\n  for (var i = 0; i < wData.length; i++) {\n    div = document.createElement('div');\n    img = document.createElement('img');\n    div.setAttribute('class', 'water-fall-item');\n    img.setAttribute('src', wData[i]);\n    div.appendChild(img);\n    fragment.appendChild(div);\n    if (i === wData.length - 1) {\n      domMap.$waterFall.appendChild(fragment);\n    }\n  }\n\n  // 一个瀑布流实例\n  var waterfall = new WaterFall(domMap.$waterFall, '.water-fall-item', 200, 5);\n\n  // 轮询所有图片的加载状态\n  timer = setInterval(function () {\n    index=0;\n    $imgs = domMap.$waterFall.querySelectorAll('.water-fall-item > img');\n    length = $imgs.length;\n    // 统计图片加载完成的数量\n    for (var i = 0; i < $imgs.length; i++) {\n      if ($imgs[i].complete) {\n        if (++index === length) clearInterval(timer);\n      }\n    }\n    waterfall.step();\n  }, 250);\n\n  // 窗口拖动\n   window.onresize =  function () {\n     Utils.FnDelay(function () {\n       waterfall.step();\n     }, 800);\n   }\n};\n\n```\n\n#### 感谢阅读\n_代码存放在github：[nojsja](https://github.com/NoJsJa/javascript-learning/tree/master/normal/water-fall-layout)_\n","slug":"water-fall-layout","published":1,"updated":"2020-08-20T04:59:04.999Z","_id":"ckba8cya400135495fk5k1f4c","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"盗用的效果图\"><a href=\"#盗用的效果图\" class=\"headerlink\" title=\"盗用的效果图\"></a>盗用的效果图</h4><p><img src=\"/blogs/img/article/waterfall-1.gif\" alt=\"preview\"></p>\n<h4 id=\"效果分析\"><a href=\"#效果分析\" class=\"headerlink\" title=\"效果分析\"></a>效果分析</h4><p>瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。</p>\n<p><img src=\"/blogs/img/article/waterfall-2.jpg\" alt=\"float\">  </p>\n<p>看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个… 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。</p>\n<p><img src=\"/blogs/img/article/waterfall-3.jpg\" alt=\"baidu\">  </p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><ul>\n<li>html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面结构 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、<br>每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，<br>(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，<br>其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [WaterFall 图片瀑布流构造函数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;DomElement&#125;</span> </span>father   [瀑布流的容器元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>childClass   [瀑布流子元素类名选择器 如: .water-fall-item]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>columnWidth  [设定每一列的宽度，单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>paddingWidth [设定图片之间的间隔距离， 单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WaterFall</span>(<span class=\"params\">father, childClass, columnWidth, paddingWidth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$container = father;  <span class=\"comment\">// 容器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.childSelector = childClass;  <span class=\"comment\">// 子代img选择器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];  <span class=\"comment\">// 子代img</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnWidth = columnWidth;  <span class=\"comment\">// 单列宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.paddingWidth = paddingWidth + <span class=\"string\">'px'</span>;  <span class=\"comment\">// 图片之间的间隔距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;  <span class=\"comment\">// 容器宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);  <span class=\"comment\">// 列数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用多次</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = <span class=\"keyword\">this</span>.$container.querySelectorAll(<span class=\"keyword\">this</span>.childSelector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.children.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.width = <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.height = <span class=\"string\">'auto'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingRight = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingBottom = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 每行第一个设置左padding</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i % <span class=\"keyword\">this</span>.columnNum === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.paddingLeft = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 第一行 和 其它行的不同处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &lt; <span class=\"keyword\">this</span>.columnNum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = (i) * <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = (i) * <span class=\"number\">0</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = +<span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.top.replace(<span class=\"string\">'px'</span>, <span class=\"string\">''</span>) +</span><br><span class=\"line\">                                      <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].clientHeight + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是<br>弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [waterFallInit 瀑布流初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>wData [图片url的数组]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> waterFallInit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">wData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> div, img, timer, $imgs, length, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 载入图片</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; wData.length; i++) &#123;</span><br><span class=\"line\">    div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">    div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'water-fall-item'</span>);</span><br><span class=\"line\">    img.setAttribute(<span class=\"string\">'src'</span>, wData[i]);</span><br><span class=\"line\">    div.appendChild(img);</span><br><span class=\"line\">    fragment.appendChild(div);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === wData.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      domMap.$waterFall.appendChild(fragment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个瀑布流实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> waterfall = <span class=\"keyword\">new</span> WaterFall(domMap.$waterFall, <span class=\"string\">'.water-fall-item'</span>, <span class=\"number\">200</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 轮询所有图片的加载状态</span></span><br><span class=\"line\">  timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    $imgs = domMap.$waterFall.querySelectorAll(<span class=\"string\">'.water-fall-item &gt; img'</span>);</span><br><span class=\"line\">    length = $imgs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 统计图片加载完成的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $imgs.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($imgs[i].complete) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++index === length) clearInterval(timer);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    waterfall.step();</span><br><span class=\"line\">  &#125;, <span class=\"number\">250</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 窗口拖动</span></span><br><span class=\"line\">   <span class=\"built_in\">window</span>.onresize =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     Utils.FnDelay(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       waterfall.step();</span><br><span class=\"line\">     &#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h4><p><em>代码存放在github：<a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/normal/water-fall-layout\" target=\"_blank\" rel=\"noopener\">nojsja</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"盗用的效果图\"><a href=\"#盗用的效果图\" class=\"headerlink\" title=\"盗用的效果图\"></a>盗用的效果图</h4><p><img src=\"/blogs/img/article/waterfall-1.gif\" alt=\"preview\"></p>\n<h4 id=\"效果分析\"><a href=\"#效果分析\" class=\"headerlink\" title=\"效果分析\"></a>效果分析</h4><p>瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。</p>\n<p><img src=\"/blogs/img/article/waterfall-2.jpg\" alt=\"float\">  </p>\n<p>看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个… 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。</p>\n<p><img src=\"/blogs/img/article/waterfall-3.jpg\" alt=\"baidu\">  </p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><ul>\n<li>html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面结构 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、<br>每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，<br>(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，<br>其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [WaterFall 图片瀑布流构造函数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;DomElement&#125;</span> </span>father   [瀑布流的容器元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>childClass   [瀑布流子元素类名选择器 如: .water-fall-item]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>columnWidth  [设定每一列的宽度，单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>paddingWidth [设定图片之间的间隔距离， 单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WaterFall</span>(<span class=\"params\">father, childClass, columnWidth, paddingWidth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$container = father;  <span class=\"comment\">// 容器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.childSelector = childClass;  <span class=\"comment\">// 子代img选择器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];  <span class=\"comment\">// 子代img</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnWidth = columnWidth;  <span class=\"comment\">// 单列宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.paddingWidth = paddingWidth + <span class=\"string\">'px'</span>;  <span class=\"comment\">// 图片之间的间隔距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;  <span class=\"comment\">// 容器宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);  <span class=\"comment\">// 列数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用多次</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = <span class=\"keyword\">this</span>.$container.querySelectorAll(<span class=\"keyword\">this</span>.childSelector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.children.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.width = <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.height = <span class=\"string\">'auto'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingRight = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingBottom = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 每行第一个设置左padding</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i % <span class=\"keyword\">this</span>.columnNum === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.paddingLeft = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 第一行 和 其它行的不同处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &lt; <span class=\"keyword\">this</span>.columnNum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = (i) * <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = (i) * <span class=\"number\">0</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = +<span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.top.replace(<span class=\"string\">'px'</span>, <span class=\"string\">''</span>) +</span><br><span class=\"line\">                                      <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].clientHeight + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是<br>弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [waterFallInit 瀑布流初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>wData [图片url的数组]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> waterFallInit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">wData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> div, img, timer, $imgs, length, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 载入图片</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; wData.length; i++) &#123;</span><br><span class=\"line\">    div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">    div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'water-fall-item'</span>);</span><br><span class=\"line\">    img.setAttribute(<span class=\"string\">'src'</span>, wData[i]);</span><br><span class=\"line\">    div.appendChild(img);</span><br><span class=\"line\">    fragment.appendChild(div);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === wData.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      domMap.$waterFall.appendChild(fragment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个瀑布流实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> waterfall = <span class=\"keyword\">new</span> WaterFall(domMap.$waterFall, <span class=\"string\">'.water-fall-item'</span>, <span class=\"number\">200</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 轮询所有图片的加载状态</span></span><br><span class=\"line\">  timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    $imgs = domMap.$waterFall.querySelectorAll(<span class=\"string\">'.water-fall-item &gt; img'</span>);</span><br><span class=\"line\">    length = $imgs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 统计图片加载完成的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $imgs.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($imgs[i].complete) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++index === length) clearInterval(timer);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    waterfall.step();</span><br><span class=\"line\">  &#125;, <span class=\"number\">250</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 窗口拖动</span></span><br><span class=\"line\">   <span class=\"built_in\">window</span>.onresize =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     Utils.FnDelay(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       waterfall.step();</span><br><span class=\"line\">     &#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h4><p><em>代码存放在github：<a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/normal/water-fall-layout\" target=\"_blank\" rel=\"noopener\">nojsja</a></em></p>\n"},{"title":"使用ES5手动实现ES6中的Promise API","catalog":true,"toc_nav_num":true,"date":"2018-10-30T17:15:00.000Z","subtitle":"es6 promise","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-10-30T17:15:00.000Z","_content":"\n![life is strange](/blogs/img/article/lifeIsStrange.jpg)\n\n[源代码 => github / nojsja / promise-self](https://github.com/NoJsJa/promise-nojsja)\n\n### 目录\n\n1. 谈谈Promise\n2. Promise分析和实现\n3. 总结\n\n### 谈谈Promise\n---------------\n\n>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。\n它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像\n同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。  \n\n>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，\n也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的\nthen 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled\n和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的\nonfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，\n所以在异步操作的完成和绑定处理方法之间不存在竞争）。  \n\n#### 一个 Promise有以下几种状态\n * pending: 初始状态，不是成功或失败状态。  \n * fulfilled: 意味着操作成功完成。  \n * rejected: 意味着操作失败。  \n\n#### Javascript事件循环\n关于js线程和事件循环可以看[这篇文章](https://zhuanlan.zhihu.com/p/33058983)\n * 创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。\n * Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。  \n\n具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：\n```js\nvar p1 = new Promise(function (resolve, reject) {\n  resolve('a');\n}).then(function (value) {\n  console.log(value);\n});\n\nconsole.log('b');\n\n// result => b a\n\n```\n\n#### Promise.all(iterable)\n这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象\n都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise\n对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值\n的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败\n状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。\n\n#### Promise.race(iterable)\n当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回\n值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。  \n\n#### Promise.reject(value) / Promise.resolve(value)\n返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。\n如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；\n否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，\n并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，\n使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n### Promise分析和实现\n--------------------\n\n#### 实现难点分析\n在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。\n\n#### 难点分析和解决\n通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的`analysisPromise`方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法`reject`和`resolve`递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。\n\n* promise.then的设计\n```js\n/**\n * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]\n * @param  {[type]} successFn [description]\n * @param  {[type]} errorFn   [description]\n */\nPromise.prototype.then = function (successCallback, errorCallback) {\n\n  var promise, x;\n  var self = this;\n\n  if (self.status === 'fulfilled') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = successCallback(self.value);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }else if (self.status === 'rejected') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = errorCallback(self.reason);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n\n    });\n  }else if (self.status === 'pending') {\n    promise = new Promise(function (resolve, reject) {\n\n      // 延迟到下一个事件循环\n      setTimeout(function () {\n        self.onFulfilledCallbacks.push(function () {\n          try {\n            x = successCallback(self.value);\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n\n        self.onRejectedCallbacks.push(function () {\n          try {\n            x = errorCallback ? errorCallback(self.reason) : undefined;\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      })\n    });\n\n  }\n\n  return promise;\n};\n```\n* analysisPromise方法的设计\n```js\n/**\n * [analysisPromise 使用递归将状态控制权转移]\n * @param  {[Any]} x        [value]\n * @param  {[Func]} resolve [get into success state]\n * @param  {[Func]} reject  [get into fail state]\n */\nvar analysisPromise = function (x, resolve, reject) {\n\n  var then, y;\n  if (x !== undefined && (typeof x === 'object' || typeof x === 'function')) {\n    then = x.then;\n    // obj Promise\n    if (then && typeof then === 'function') {\n      then.call(x, function (value) {\n        // callback return a promise\n        analysisPromise(value, resolve, reject);\n      }, function (error) {\n        reject(error);\n      });\n    // normal\n    }else {\n      resolve(x);\n    }\n  // normal\n  }else {\n    resolve(x);\n  }\n};\n```\n\n#### 其它部分的实现\n* catch方法  \n这边只是简单的捕获了一下错误然后调用回调函数即可。\n```js\nPromise.prototype.catch = function (handleError) {\n  if (this.status === 'pending') {\n    this.onRejectedCallbacks.push(handleError);\n  }else {\n    this.reason && handleError(this.reason);\n  }\n};\n```\n\n* all方法  \nall方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。\n```js\nPromise.all = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n\n    pArray.forEach(function (pr, i) {\n\n        if (pr instanceof Promise) {\n          pr.then(function (value1) {\n            analysisPromise(value1, function (value2) {\n              rArray[i] = value2;\n              if (rArray.length === pArray.length) {\n                resolve(rArray);\n              }\n            }, reject);\n\n          }, function (error) {\n            reject(error);\n          });\n\n        }else {\n          rArray[i] = pr;\n          if (rArray.length === pArray.length) {\n            resolve(rArray);\n          }\n        }\n\n    });\n\n  });\n\n  return promise;\n};\n```\n\n* race方法  \nrace方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。\n```js\nPromise.race = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n    pArray.forEach(function (pr, i) {\n        if (pr instanceof Promise) {\n          pr.then(function (value) {\n            analysisPromise(value, resolve, reject);\n          }, function (error) {\n            reject(error);\n          });\n        }else {\n          rArray[i] = pr;\n        }\n    });\n  });\n\n  return promise;\n};\n```\n\n* 静态方法 Promise.resolve 和 Promise.reject\n直接返回一个最终态为成功或失败的promise对象即可。\n```js\nPromise.resolve = function (value) {\n  return new Promise(function (resolve, reject) {\n      resolve(value);\n  });\n};\nPromise.reject = function (reason) {\n  return new Promise(function (resolve, reject) {\n      reject(reason);\n  });\n};\n```\n\n### 总结\n--------\nPromise实现的难点其实是怎样考虑那个状态传递的过程(`analysisPromise`方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的`原子性`同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，`Promise.all`、`Promise.race`这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。\n","source":"_posts/使用ES5实现ES6中的Promise.md","raw":"---\ntitle: \"使用ES5手动实现ES6中的Promise API\"\ncatalog: true\ntoc_nav_num: true\ndate: 2018-10-31 01:15:00\nsubtitle: \"es6 promise\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- promise\n- es6\ncategories:\n- Javascript\nupdateDate: 2018-10-31 01:15:00\n---\n\n![life is strange](/blogs/img/article/lifeIsStrange.jpg)\n\n[源代码 => github / nojsja / promise-self](https://github.com/NoJsJa/promise-nojsja)\n\n### 目录\n\n1. 谈谈Promise\n2. Promise分析和实现\n3. 总结\n\n### 谈谈Promise\n---------------\n\n>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。\n它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像\n同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。  \n\n>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，\n也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的\nthen 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled\n和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的\nonfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，\n所以在异步操作的完成和绑定处理方法之间不存在竞争）。  \n\n#### 一个 Promise有以下几种状态\n * pending: 初始状态，不是成功或失败状态。  \n * fulfilled: 意味着操作成功完成。  \n * rejected: 意味着操作失败。  \n\n#### Javascript事件循环\n关于js线程和事件循环可以看[这篇文章](https://zhuanlan.zhihu.com/p/33058983)\n * 创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。\n * Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。  \n\n具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：\n```js\nvar p1 = new Promise(function (resolve, reject) {\n  resolve('a');\n}).then(function (value) {\n  console.log(value);\n});\n\nconsole.log('b');\n\n// result => b a\n\n```\n\n#### Promise.all(iterable)\n这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象\n都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise\n对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值\n的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败\n状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。\n\n#### Promise.race(iterable)\n当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回\n值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。  \n\n#### Promise.reject(value) / Promise.resolve(value)\n返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。\n如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；\n否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，\n并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，\n使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n### Promise分析和实现\n--------------------\n\n#### 实现难点分析\n在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。\n\n#### 难点分析和解决\n通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的`analysisPromise`方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法`reject`和`resolve`递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。\n\n* promise.then的设计\n```js\n/**\n * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]\n * @param  {[type]} successFn [description]\n * @param  {[type]} errorFn   [description]\n */\nPromise.prototype.then = function (successCallback, errorCallback) {\n\n  var promise, x;\n  var self = this;\n\n  if (self.status === 'fulfilled') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = successCallback(self.value);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }else if (self.status === 'rejected') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = errorCallback(self.reason);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n\n    });\n  }else if (self.status === 'pending') {\n    promise = new Promise(function (resolve, reject) {\n\n      // 延迟到下一个事件循环\n      setTimeout(function () {\n        self.onFulfilledCallbacks.push(function () {\n          try {\n            x = successCallback(self.value);\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n\n        self.onRejectedCallbacks.push(function () {\n          try {\n            x = errorCallback ? errorCallback(self.reason) : undefined;\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      })\n    });\n\n  }\n\n  return promise;\n};\n```\n* analysisPromise方法的设计\n```js\n/**\n * [analysisPromise 使用递归将状态控制权转移]\n * @param  {[Any]} x        [value]\n * @param  {[Func]} resolve [get into success state]\n * @param  {[Func]} reject  [get into fail state]\n */\nvar analysisPromise = function (x, resolve, reject) {\n\n  var then, y;\n  if (x !== undefined && (typeof x === 'object' || typeof x === 'function')) {\n    then = x.then;\n    // obj Promise\n    if (then && typeof then === 'function') {\n      then.call(x, function (value) {\n        // callback return a promise\n        analysisPromise(value, resolve, reject);\n      }, function (error) {\n        reject(error);\n      });\n    // normal\n    }else {\n      resolve(x);\n    }\n  // normal\n  }else {\n    resolve(x);\n  }\n};\n```\n\n#### 其它部分的实现\n* catch方法  \n这边只是简单的捕获了一下错误然后调用回调函数即可。\n```js\nPromise.prototype.catch = function (handleError) {\n  if (this.status === 'pending') {\n    this.onRejectedCallbacks.push(handleError);\n  }else {\n    this.reason && handleError(this.reason);\n  }\n};\n```\n\n* all方法  \nall方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。\n```js\nPromise.all = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n\n    pArray.forEach(function (pr, i) {\n\n        if (pr instanceof Promise) {\n          pr.then(function (value1) {\n            analysisPromise(value1, function (value2) {\n              rArray[i] = value2;\n              if (rArray.length === pArray.length) {\n                resolve(rArray);\n              }\n            }, reject);\n\n          }, function (error) {\n            reject(error);\n          });\n\n        }else {\n          rArray[i] = pr;\n          if (rArray.length === pArray.length) {\n            resolve(rArray);\n          }\n        }\n\n    });\n\n  });\n\n  return promise;\n};\n```\n\n* race方法  \nrace方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。\n```js\nPromise.race = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n    pArray.forEach(function (pr, i) {\n        if (pr instanceof Promise) {\n          pr.then(function (value) {\n            analysisPromise(value, resolve, reject);\n          }, function (error) {\n            reject(error);\n          });\n        }else {\n          rArray[i] = pr;\n        }\n    });\n  });\n\n  return promise;\n};\n```\n\n* 静态方法 Promise.resolve 和 Promise.reject\n直接返回一个最终态为成功或失败的promise对象即可。\n```js\nPromise.resolve = function (value) {\n  return new Promise(function (resolve, reject) {\n      resolve(value);\n  });\n};\nPromise.reject = function (reason) {\n  return new Promise(function (resolve, reject) {\n      reject(reason);\n  });\n};\n```\n\n### 总结\n--------\nPromise实现的难点其实是怎样考虑那个状态传递的过程(`analysisPromise`方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的`原子性`同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，`Promise.all`、`Promise.race`这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。\n","slug":"使用ES5实现ES6中的Promise","published":1,"updated":"2020-08-20T05:00:28.175Z","_id":"ckba8cya400145495dy5jb0qv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/blogs/img/article/lifeIsStrange.jpg\" alt=\"life is strange\"></p>\n<p><a href=\"https://github.com/NoJsJa/promise-nojsja\" target=\"_blank\" rel=\"noopener\">源代码 =&gt; github / nojsja / promise-self</a></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li>谈谈Promise</li>\n<li>Promise分析和实现</li>\n<li>总结</li>\n</ol>\n<h3 id=\"谈谈Promise\"><a href=\"#谈谈Promise\" class=\"headerlink\" title=\"谈谈Promise\"></a>谈谈Promise</h3><hr>\n<blockquote>\n<p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。<br>它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像<br>同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。  </p>\n<p>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，<br>也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的<br>then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled<br>和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的<br>onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，<br>所以在异步操作的完成和绑定处理方法之间不存在竞争）。  </p>\n</blockquote>\n<h4 id=\"一个-Promise有以下几种状态\"><a href=\"#一个-Promise有以下几种状态\" class=\"headerlink\" title=\"一个 Promise有以下几种状态\"></a>一个 Promise有以下几种状态</h4><ul>\n<li>pending: 初始状态，不是成功或失败状态。  </li>\n<li>fulfilled: 意味着操作成功完成。  </li>\n<li>rejected: 意味着操作失败。  </li>\n</ul>\n<h4 id=\"Javascript事件循环\"><a href=\"#Javascript事件循环\" class=\"headerlink\" title=\"Javascript事件循环\"></a>Javascript事件循环</h4><p>关于js线程和事件循环可以看<a href=\"https://zhuanlan.zhihu.com/p/33058983\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<ul>\n<li>创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。</li>\n<li>Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。  </li>\n</ul>\n<p>具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result =&gt; b a</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Promise-all-iterable\"><a href=\"#Promise-all-iterable\" class=\"headerlink\" title=\"Promise.all(iterable)\"></a>Promise.all(iterable)</h4><p>这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象<br>都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise<br>对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值<br>的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败<br>状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。</p>\n<h4 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h4><p>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回<br>值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。  </p>\n<h4 id=\"Promise-reject-value-Promise-resolve-value\"><a href=\"#Promise-reject-value-Promise-resolve-value\" class=\"headerlink\" title=\"Promise.reject(value) / Promise.resolve(value)\"></a>Promise.reject(value) / Promise.resolve(value)</h4><p>返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。<br>如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；<br>否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，<br>并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，<br>使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。</p>\n<h3 id=\"Promise分析和实现\"><a href=\"#Promise分析和实现\" class=\"headerlink\" title=\"Promise分析和实现\"></a>Promise分析和实现</h3><hr>\n<h4 id=\"实现难点分析\"><a href=\"#实现难点分析\" class=\"headerlink\" title=\"实现难点分析\"></a>实现难点分析</h4><p>在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。</p>\n<h4 id=\"难点分析和解决\"><a href=\"#难点分析和解决\" class=\"headerlink\" title=\"难点分析和解决\"></a>难点分析和解决</h4><p>通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的<code>analysisPromise</code>方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法<code>reject</code>和<code>resolve</code>递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。</p>\n<ul>\n<li>promise.then的设计<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>successFn [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>errorFn   [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">successCallback, errorCallback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise, x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = successCallback(self.value);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = errorCallback(self.reason);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 延迟到下一个事件循环</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        self.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = successCallback(self.value);</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        self.onRejectedCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = errorCallback ? errorCallback(self.reason) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>analysisPromise方法的设计<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [analysisPromise 使用递归将状态控制权转移]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>x        [value]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>resolve [get into success state]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>reject  [get into fail state]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> analysisPromise = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> then, y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x !== <span class=\"literal\">undefined</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    then = x.then;</span><br><span class=\"line\">    <span class=\"comment\">// obj Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (then &amp;&amp; <span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// callback return a promise</span></span><br><span class=\"line\">        analysisPromise(value, resolve, reject);</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// normal</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"其它部分的实现\"><a href=\"#其它部分的实现\" class=\"headerlink\" title=\"其它部分的实现\"></a>其它部分的实现</h4><ul>\n<li><p>catch方法<br>这边只是简单的捕获了一下错误然后调用回调函数即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handleError</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks.push(handleError);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason &amp;&amp; handleError(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>all方法<br>all方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value2</span>) </span>&#123;</span><br><span class=\"line\">              rArray[i] = value2;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">                resolve(rArray);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">            resolve(rArray);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>race方法<br>race方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value, resolve, reject);</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态方法 Promise.resolve 和 Promise.reject<br>直接返回一个最终态为成功或失败的promise对象即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      reject(reason);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><hr>\n<p>Promise实现的难点其实是怎样考虑那个状态传递的过程(<code>analysisPromise</code>方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的<code>原子性</code>同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，<code>Promise.all</code>、<code>Promise.race</code>这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/blogs/img/article/lifeIsStrange.jpg\" alt=\"life is strange\"></p>\n<p><a href=\"https://github.com/NoJsJa/promise-nojsja\" target=\"_blank\" rel=\"noopener\">源代码 =&gt; github / nojsja / promise-self</a></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ol>\n<li>谈谈Promise</li>\n<li>Promise分析和实现</li>\n<li>总结</li>\n</ol>\n<h3 id=\"谈谈Promise\"><a href=\"#谈谈Promise\" class=\"headerlink\" title=\"谈谈Promise\"></a>谈谈Promise</h3><hr>\n<blockquote>\n<p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。<br>它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像<br>同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。  </p>\n<p>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，<br>也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的<br>then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled<br>和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的<br>onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，<br>所以在异步操作的完成和绑定处理方法之间不存在竞争）。  </p>\n</blockquote>\n<h4 id=\"一个-Promise有以下几种状态\"><a href=\"#一个-Promise有以下几种状态\" class=\"headerlink\" title=\"一个 Promise有以下几种状态\"></a>一个 Promise有以下几种状态</h4><ul>\n<li>pending: 初始状态，不是成功或失败状态。  </li>\n<li>fulfilled: 意味着操作成功完成。  </li>\n<li>rejected: 意味着操作失败。  </li>\n</ul>\n<h4 id=\"Javascript事件循环\"><a href=\"#Javascript事件循环\" class=\"headerlink\" title=\"Javascript事件循环\"></a>Javascript事件循环</h4><p>关于js线程和事件循环可以看<a href=\"https://zhuanlan.zhihu.com/p/33058983\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<ul>\n<li>创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。</li>\n<li>Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。  </li>\n</ul>\n<p>具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result =&gt; b a</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Promise-all-iterable\"><a href=\"#Promise-all-iterable\" class=\"headerlink\" title=\"Promise.all(iterable)\"></a>Promise.all(iterable)</h4><p>这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象<br>都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise<br>对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值<br>的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败<br>状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。</p>\n<h4 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h4><p>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回<br>值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。  </p>\n<h4 id=\"Promise-reject-value-Promise-resolve-value\"><a href=\"#Promise-reject-value-Promise-resolve-value\" class=\"headerlink\" title=\"Promise.reject(value) / Promise.resolve(value)\"></a>Promise.reject(value) / Promise.resolve(value)</h4><p>返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。<br>如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；<br>否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，<br>并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，<br>使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。</p>\n<h3 id=\"Promise分析和实现\"><a href=\"#Promise分析和实现\" class=\"headerlink\" title=\"Promise分析和实现\"></a>Promise分析和实现</h3><hr>\n<h4 id=\"实现难点分析\"><a href=\"#实现难点分析\" class=\"headerlink\" title=\"实现难点分析\"></a>实现难点分析</h4><p>在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。</p>\n<h4 id=\"难点分析和解决\"><a href=\"#难点分析和解决\" class=\"headerlink\" title=\"难点分析和解决\"></a>难点分析和解决</h4><p>通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的<code>analysisPromise</code>方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法<code>reject</code>和<code>resolve</code>递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。</p>\n<ul>\n<li>promise.then的设计<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>successFn [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>errorFn   [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">successCallback, errorCallback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise, x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = successCallback(self.value);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = errorCallback(self.reason);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 延迟到下一个事件循环</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        self.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = successCallback(self.value);</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        self.onRejectedCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = errorCallback ? errorCallback(self.reason) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>analysisPromise方法的设计<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [analysisPromise 使用递归将状态控制权转移]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>x        [value]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>resolve [get into success state]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>reject  [get into fail state]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> analysisPromise = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> then, y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x !== <span class=\"literal\">undefined</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    then = x.then;</span><br><span class=\"line\">    <span class=\"comment\">// obj Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (then &amp;&amp; <span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// callback return a promise</span></span><br><span class=\"line\">        analysisPromise(value, resolve, reject);</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// normal</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"其它部分的实现\"><a href=\"#其它部分的实现\" class=\"headerlink\" title=\"其它部分的实现\"></a>其它部分的实现</h4><ul>\n<li><p>catch方法<br>这边只是简单的捕获了一下错误然后调用回调函数即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handleError</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks.push(handleError);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason &amp;&amp; handleError(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>all方法<br>all方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value2</span>) </span>&#123;</span><br><span class=\"line\">              rArray[i] = value2;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">                resolve(rArray);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">            resolve(rArray);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>race方法<br>race方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value, resolve, reject);</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态方法 Promise.resolve 和 Promise.reject<br>直接返回一个最终态为成功或失败的promise对象即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      reject(reason);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><hr>\n<p>Promise实现的难点其实是怎样考虑那个状态传递的过程(<code>analysisPromise</code>方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的<code>原子性</code>同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，<code>Promise.all</code>、<code>Promise.race</code>这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。</p>\n"},{"title":"前端浏览器开发工具","catalog":true,"toc_nav_num":true,"date":"2020-04-16T03:45:00.000Z","subtitle":"browser tools","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-04-16T03:45:00.000Z","_content":"\n\n>author: NoJsJa\n\n![life is strange](/blogs/img/article/dev-tools.png)\n\n### 目录\n---------------------------------\n\n1. DevTools常用功能区域介绍\n2. 使用DevTools查看浏览器DOM元素\n3. 使用DevTools查看浏览器本地数据\n4. 使用DevTools在线编辑DOM样式\n5. 使用DevTools查看网络请求情况\n6. 使用DevTools查看控制台信息\n7. 使用DevTools在线调试代码\n\n### DevTools常用功能区域介绍\n---------------------------------\n\n#### 查看器  \n\n* 快速定位元素\n\n* 展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。\n\n* 可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息\n\n* 响应式设计模式\n\n#### 存储\n\n* Cookie\n* SessionStorage\n* LocalStorage\n* Indexed DB\n\n#### 调试器\n\n* 定位代码，断点调试\n* 调试：暂停/继续、跨越、步进、步出\n\n#### 控制台\n\n* 多行模式和单行模式\n* console命令\n\n#### 网络\n\n* 筛选请求类型\n* 查看某个网络请求\n* 构造极限情况-限流\n\n#### 样式编辑器\n\n* 查看盒模型属性\n* 查看字体\n* 定位和编辑元素样式表\n\n#### 性能\n\n* 内存占用\n\n* 浏览器自身渲染过程和调用情况\n\n### 使用DevTools查看浏览器DOM元素\n---------------------------------\n\n1. 右键选择`检查元素`快速定位元素\n2. 通过控制台`选取页面中的元素`(Ctrl+Shift+C)来预览和选择元素\n3. 通过控制台`搜索HTML`使用querySelector语法搜索一个元素\n\n### 使用DevTools查看浏览器本地数据\n---------------------------------\n![life is strange](/blogs/img/article/dev-tools-storage.png)\n\n#### Cookie\n>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。  \n\nCookie主要用于以下三个方面：\n* 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n* 个性化设置（如用户自定义设置、主题等）\n* 浏览器行为跟踪（如跟踪分析用户行为等）\n\nCookie特点：\n1. 不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读\n2. 使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对\n3. 数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式\n\n\n#### SessionStorage\n> sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。\n\n![life is strange](/blogs/img/article/dev-tools-storage2.png)\n\n#### LocalStorage\n> localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M\n\n#### Indexed DB\n>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。\n\n特点：\n\n1. 键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以\"键值对\"的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误\n\n2. 异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现\n\n3. 支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况\n\n4. 同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库\n\n5. 储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限\n\n5. 支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）\n\n### 使用DevTools在线编辑DOM样式\n---------------------------------\n\n1. 查看字体\n2. 定位和编辑元素样式表\n\n### 使用DevTools查看网络请求情况\n---------------------------------\n\n1. 筛选请求类型\n2. 查看某个网络请求\n3. 构造极限情况-限流\n\n### 使用DevTools查看控制台信息\n---------------------------------\n\n#### 通过控制台打印数据\n\n1. console.log 用于输出普通信息\n\n2. console.info 用于输出提示性信息\n\n3. console.error用于输出错误信息\n\n4. console.warn用于输出警示信息\n\n5. console.debug用于输出调试信息\n\n6. console.dirxml打印dom对象结构\n\n#### printf格式化输出数据\n\n1. 打印字符串  \nconsole.log(\"他是%s\", \"nojsja\");\n\n2. 打印数字  \nconsole.log(\"%d年%d月%d日\",2011,3,26);\n\n3. 打印浮点数字  \nconsole.log(\"圆周率是%f\",3.1415926);\n\n#### 打印一组数据\n>bilibili控制台demo\n\n1. console.group输出一组信息的开头\n\n2. console.groupEnd结束一组输出信息\n\n#### 断言\n>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台\n\n1. console.assert(boolValue, info);\n\n#### 统计代码段执行次数\n>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数\n\n1. console.count(symbol)\n\n#### 统计一段代码的执行时间\n>通过传入参数确定定时器归属\n\n1. console.time(symbol)开始统计\n\n2. console.timeEnd(symbol)结束统计\n\n### 打印堆栈信息\n\nconsole.trace 堆栈跟踪相关的调试\n\n### 使用DevTools在线调试代码\n---------------------------------\n![life is strange](/blogs/img/article/dev-tools-debug.png)\n\n1. 定位代码，断点调试\n2. 调试：暂停/继续、跨越、步进、步出","source":"_posts/前端浏览器开发者工具.md","raw":"---\ntitle: \"前端浏览器开发工具\"\ncatalog: true\ntoc_nav_num: true\ndate:   2020-04-16 11:45:00\nsubtitle: \"browser tools\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- browser\n- tools\ncategories:\n- Tools\nupdateDate: 2020-04-16 11:45:00\n---\n\n\n>author: NoJsJa\n\n![life is strange](/blogs/img/article/dev-tools.png)\n\n### 目录\n---------------------------------\n\n1. DevTools常用功能区域介绍\n2. 使用DevTools查看浏览器DOM元素\n3. 使用DevTools查看浏览器本地数据\n4. 使用DevTools在线编辑DOM样式\n5. 使用DevTools查看网络请求情况\n6. 使用DevTools查看控制台信息\n7. 使用DevTools在线调试代码\n\n### DevTools常用功能区域介绍\n---------------------------------\n\n#### 查看器  \n\n* 快速定位元素\n\n* 展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。\n\n* 可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息\n\n* 响应式设计模式\n\n#### 存储\n\n* Cookie\n* SessionStorage\n* LocalStorage\n* Indexed DB\n\n#### 调试器\n\n* 定位代码，断点调试\n* 调试：暂停/继续、跨越、步进、步出\n\n#### 控制台\n\n* 多行模式和单行模式\n* console命令\n\n#### 网络\n\n* 筛选请求类型\n* 查看某个网络请求\n* 构造极限情况-限流\n\n#### 样式编辑器\n\n* 查看盒模型属性\n* 查看字体\n* 定位和编辑元素样式表\n\n#### 性能\n\n* 内存占用\n\n* 浏览器自身渲染过程和调用情况\n\n### 使用DevTools查看浏览器DOM元素\n---------------------------------\n\n1. 右键选择`检查元素`快速定位元素\n2. 通过控制台`选取页面中的元素`(Ctrl+Shift+C)来预览和选择元素\n3. 通过控制台`搜索HTML`使用querySelector语法搜索一个元素\n\n### 使用DevTools查看浏览器本地数据\n---------------------------------\n![life is strange](/blogs/img/article/dev-tools-storage.png)\n\n#### Cookie\n>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。  \n\nCookie主要用于以下三个方面：\n* 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n* 个性化设置（如用户自定义设置、主题等）\n* 浏览器行为跟踪（如跟踪分析用户行为等）\n\nCookie特点：\n1. 不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读\n2. 使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对\n3. 数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式\n\n\n#### SessionStorage\n> sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。\n\n![life is strange](/blogs/img/article/dev-tools-storage2.png)\n\n#### LocalStorage\n> localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M\n\n#### Indexed DB\n>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。\n\n特点：\n\n1. 键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以\"键值对\"的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误\n\n2. 异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现\n\n3. 支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况\n\n4. 同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库\n\n5. 储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限\n\n5. 支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）\n\n### 使用DevTools在线编辑DOM样式\n---------------------------------\n\n1. 查看字体\n2. 定位和编辑元素样式表\n\n### 使用DevTools查看网络请求情况\n---------------------------------\n\n1. 筛选请求类型\n2. 查看某个网络请求\n3. 构造极限情况-限流\n\n### 使用DevTools查看控制台信息\n---------------------------------\n\n#### 通过控制台打印数据\n\n1. console.log 用于输出普通信息\n\n2. console.info 用于输出提示性信息\n\n3. console.error用于输出错误信息\n\n4. console.warn用于输出警示信息\n\n5. console.debug用于输出调试信息\n\n6. console.dirxml打印dom对象结构\n\n#### printf格式化输出数据\n\n1. 打印字符串  \nconsole.log(\"他是%s\", \"nojsja\");\n\n2. 打印数字  \nconsole.log(\"%d年%d月%d日\",2011,3,26);\n\n3. 打印浮点数字  \nconsole.log(\"圆周率是%f\",3.1415926);\n\n#### 打印一组数据\n>bilibili控制台demo\n\n1. console.group输出一组信息的开头\n\n2. console.groupEnd结束一组输出信息\n\n#### 断言\n>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台\n\n1. console.assert(boolValue, info);\n\n#### 统计代码段执行次数\n>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数\n\n1. console.count(symbol)\n\n#### 统计一段代码的执行时间\n>通过传入参数确定定时器归属\n\n1. console.time(symbol)开始统计\n\n2. console.timeEnd(symbol)结束统计\n\n### 打印堆栈信息\n\nconsole.trace 堆栈跟踪相关的调试\n\n### 使用DevTools在线调试代码\n---------------------------------\n![life is strange](/blogs/img/article/dev-tools-debug.png)\n\n1. 定位代码，断点调试\n2. 调试：暂停/继续、跨越、步进、步出","slug":"前端浏览器开发者工具","published":1,"updated":"2020-08-20T05:00:19.179Z","_id":"ckba8cya5001654950um8h3vt","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>author: NoJsJa</p>\n</blockquote>\n<p><img src=\"/blogs/img/article/dev-tools.png\" alt=\"life is strange\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><hr>\n<ol>\n<li>DevTools常用功能区域介绍</li>\n<li>使用DevTools查看浏览器DOM元素</li>\n<li>使用DevTools查看浏览器本地数据</li>\n<li>使用DevTools在线编辑DOM样式</li>\n<li>使用DevTools查看网络请求情况</li>\n<li>使用DevTools查看控制台信息</li>\n<li>使用DevTools在线调试代码</li>\n</ol>\n<h3 id=\"DevTools常用功能区域介绍\"><a href=\"#DevTools常用功能区域介绍\" class=\"headerlink\" title=\"DevTools常用功能区域介绍\"></a>DevTools常用功能区域介绍</h3><hr>\n<h4 id=\"查看器\"><a href=\"#查看器\" class=\"headerlink\" title=\"查看器\"></a>查看器</h4><ul>\n<li><p>快速定位元素</p>\n</li>\n<li><p>展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。</p>\n</li>\n<li><p>可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息</p>\n</li>\n<li><p>响应式设计模式</p>\n</li>\n</ul>\n<h4 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h4><ul>\n<li>Cookie</li>\n<li>SessionStorage</li>\n<li>LocalStorage</li>\n<li>Indexed DB</li>\n</ul>\n<h4 id=\"调试器\"><a href=\"#调试器\" class=\"headerlink\" title=\"调试器\"></a>调试器</h4><ul>\n<li>定位代码，断点调试</li>\n<li>调试：暂停/继续、跨越、步进、步出</li>\n</ul>\n<h4 id=\"控制台\"><a href=\"#控制台\" class=\"headerlink\" title=\"控制台\"></a>控制台</h4><ul>\n<li>多行模式和单行模式</li>\n<li>console命令</li>\n</ul>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><ul>\n<li>筛选请求类型</li>\n<li>查看某个网络请求</li>\n<li>构造极限情况-限流</li>\n</ul>\n<h4 id=\"样式编辑器\"><a href=\"#样式编辑器\" class=\"headerlink\" title=\"样式编辑器\"></a>样式编辑器</h4><ul>\n<li>查看盒模型属性</li>\n<li>查看字体</li>\n<li>定位和编辑元素样式表</li>\n</ul>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><ul>\n<li><p>内存占用</p>\n</li>\n<li><p>浏览器自身渲染过程和调用情况</p>\n</li>\n</ul>\n<h3 id=\"使用DevTools查看浏览器DOM元素\"><a href=\"#使用DevTools查看浏览器DOM元素\" class=\"headerlink\" title=\"使用DevTools查看浏览器DOM元素\"></a>使用DevTools查看浏览器DOM元素</h3><hr>\n<ol>\n<li>右键选择<code>检查元素</code>快速定位元素</li>\n<li>通过控制台<code>选取页面中的元素</code>(Ctrl+Shift+C)来预览和选择元素</li>\n<li>通过控制台<code>搜索HTML</code>使用querySelector语法搜索一个元素</li>\n</ol>\n<h3 id=\"使用DevTools查看浏览器本地数据\"><a href=\"#使用DevTools查看浏览器本地数据\" class=\"headerlink\" title=\"使用DevTools查看浏览器本地数据\"></a>使用DevTools查看浏览器本地数据</h3><hr>\n<p><img src=\"/blogs/img/article/dev-tools-storage.png\" alt=\"life is strange\"></p>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><blockquote>\n<p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。  </p>\n</blockquote>\n<p>Cookie主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p>Cookie特点：</p>\n<ol>\n<li>不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读</li>\n<li>使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对</li>\n<li>数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式</li>\n</ol>\n<h4 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h4><blockquote>\n<p>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p>\n</blockquote>\n<p><img src=\"/blogs/img/article/dev-tools-storage2.png\" alt=\"life is strange\"></p>\n<h4 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a>LocalStorage</h4><blockquote>\n<p>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M</p>\n</blockquote>\n<h4 id=\"Indexed-DB\"><a href=\"#Indexed-DB\" class=\"headerlink\" title=\"Indexed DB\"></a>Indexed DB</h4><blockquote>\n<p>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p>\n</blockquote>\n<p>特点：</p>\n<ol>\n<li><p>键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以”键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误</p>\n</li>\n<li><p>异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现</p>\n</li>\n<li><p>支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况</p>\n</li>\n<li><p>同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库</p>\n</li>\n<li><p>储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限</p>\n</li>\n<li><p>支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）</p>\n</li>\n</ol>\n<h3 id=\"使用DevTools在线编辑DOM样式\"><a href=\"#使用DevTools在线编辑DOM样式\" class=\"headerlink\" title=\"使用DevTools在线编辑DOM样式\"></a>使用DevTools在线编辑DOM样式</h3><hr>\n<ol>\n<li>查看字体</li>\n<li>定位和编辑元素样式表</li>\n</ol>\n<h3 id=\"使用DevTools查看网络请求情况\"><a href=\"#使用DevTools查看网络请求情况\" class=\"headerlink\" title=\"使用DevTools查看网络请求情况\"></a>使用DevTools查看网络请求情况</h3><hr>\n<ol>\n<li>筛选请求类型</li>\n<li>查看某个网络请求</li>\n<li>构造极限情况-限流</li>\n</ol>\n<h3 id=\"使用DevTools查看控制台信息\"><a href=\"#使用DevTools查看控制台信息\" class=\"headerlink\" title=\"使用DevTools查看控制台信息\"></a>使用DevTools查看控制台信息</h3><hr>\n<h4 id=\"通过控制台打印数据\"><a href=\"#通过控制台打印数据\" class=\"headerlink\" title=\"通过控制台打印数据\"></a>通过控制台打印数据</h4><ol>\n<li><p>console.log 用于输出普通信息</p>\n</li>\n<li><p>console.info 用于输出提示性信息</p>\n</li>\n<li><p>console.error用于输出错误信息</p>\n</li>\n<li><p>console.warn用于输出警示信息</p>\n</li>\n<li><p>console.debug用于输出调试信息</p>\n</li>\n<li><p>console.dirxml打印dom对象结构</p>\n</li>\n</ol>\n<h4 id=\"printf格式化输出数据\"><a href=\"#printf格式化输出数据\" class=\"headerlink\" title=\"printf格式化输出数据\"></a>printf格式化输出数据</h4><ol>\n<li><p>打印字符串<br>console.log(“他是%s”, “nojsja”);</p>\n</li>\n<li><p>打印数字<br>console.log(“%d年%d月%d日”,2011,3,26);</p>\n</li>\n<li><p>打印浮点数字<br>console.log(“圆周率是%f”,3.1415926);</p>\n</li>\n</ol>\n<h4 id=\"打印一组数据\"><a href=\"#打印一组数据\" class=\"headerlink\" title=\"打印一组数据\"></a>打印一组数据</h4><blockquote>\n<p>bilibili控制台demo</p>\n</blockquote>\n<ol>\n<li><p>console.group输出一组信息的开头</p>\n</li>\n<li><p>console.groupEnd结束一组输出信息</p>\n</li>\n</ol>\n<h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><blockquote>\n<p>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台</p>\n</blockquote>\n<ol>\n<li>console.assert(boolValue, info);</li>\n</ol>\n<h4 id=\"统计代码段执行次数\"><a href=\"#统计代码段执行次数\" class=\"headerlink\" title=\"统计代码段执行次数\"></a>统计代码段执行次数</h4><blockquote>\n<p>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数</p>\n</blockquote>\n<ol>\n<li>console.count(symbol)</li>\n</ol>\n<h4 id=\"统计一段代码的执行时间\"><a href=\"#统计一段代码的执行时间\" class=\"headerlink\" title=\"统计一段代码的执行时间\"></a>统计一段代码的执行时间</h4><blockquote>\n<p>通过传入参数确定定时器归属</p>\n</blockquote>\n<ol>\n<li><p>console.time(symbol)开始统计</p>\n</li>\n<li><p>console.timeEnd(symbol)结束统计</p>\n</li>\n</ol>\n<h3 id=\"打印堆栈信息\"><a href=\"#打印堆栈信息\" class=\"headerlink\" title=\"打印堆栈信息\"></a>打印堆栈信息</h3><p>console.trace 堆栈跟踪相关的调试</p>\n<h3 id=\"使用DevTools在线调试代码\"><a href=\"#使用DevTools在线调试代码\" class=\"headerlink\" title=\"使用DevTools在线调试代码\"></a>使用DevTools在线调试代码</h3><hr>\n<p><img src=\"/blogs/img/article/dev-tools-debug.png\" alt=\"life is strange\"></p>\n<ol>\n<li>定位代码，断点调试</li>\n<li>调试：暂停/继续、跨越、步进、步出</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>author: NoJsJa</p>\n</blockquote>\n<p><img src=\"/blogs/img/article/dev-tools.png\" alt=\"life is strange\"></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><hr>\n<ol>\n<li>DevTools常用功能区域介绍</li>\n<li>使用DevTools查看浏览器DOM元素</li>\n<li>使用DevTools查看浏览器本地数据</li>\n<li>使用DevTools在线编辑DOM样式</li>\n<li>使用DevTools查看网络请求情况</li>\n<li>使用DevTools查看控制台信息</li>\n<li>使用DevTools在线调试代码</li>\n</ol>\n<h3 id=\"DevTools常用功能区域介绍\"><a href=\"#DevTools常用功能区域介绍\" class=\"headerlink\" title=\"DevTools常用功能区域介绍\"></a>DevTools常用功能区域介绍</h3><hr>\n<h4 id=\"查看器\"><a href=\"#查看器\" class=\"headerlink\" title=\"查看器\"></a>查看器</h4><ul>\n<li><p>快速定位元素</p>\n</li>\n<li><p>展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。</p>\n</li>\n<li><p>可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息</p>\n</li>\n<li><p>响应式设计模式</p>\n</li>\n</ul>\n<h4 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h4><ul>\n<li>Cookie</li>\n<li>SessionStorage</li>\n<li>LocalStorage</li>\n<li>Indexed DB</li>\n</ul>\n<h4 id=\"调试器\"><a href=\"#调试器\" class=\"headerlink\" title=\"调试器\"></a>调试器</h4><ul>\n<li>定位代码，断点调试</li>\n<li>调试：暂停/继续、跨越、步进、步出</li>\n</ul>\n<h4 id=\"控制台\"><a href=\"#控制台\" class=\"headerlink\" title=\"控制台\"></a>控制台</h4><ul>\n<li>多行模式和单行模式</li>\n<li>console命令</li>\n</ul>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><ul>\n<li>筛选请求类型</li>\n<li>查看某个网络请求</li>\n<li>构造极限情况-限流</li>\n</ul>\n<h4 id=\"样式编辑器\"><a href=\"#样式编辑器\" class=\"headerlink\" title=\"样式编辑器\"></a>样式编辑器</h4><ul>\n<li>查看盒模型属性</li>\n<li>查看字体</li>\n<li>定位和编辑元素样式表</li>\n</ul>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><ul>\n<li><p>内存占用</p>\n</li>\n<li><p>浏览器自身渲染过程和调用情况</p>\n</li>\n</ul>\n<h3 id=\"使用DevTools查看浏览器DOM元素\"><a href=\"#使用DevTools查看浏览器DOM元素\" class=\"headerlink\" title=\"使用DevTools查看浏览器DOM元素\"></a>使用DevTools查看浏览器DOM元素</h3><hr>\n<ol>\n<li>右键选择<code>检查元素</code>快速定位元素</li>\n<li>通过控制台<code>选取页面中的元素</code>(Ctrl+Shift+C)来预览和选择元素</li>\n<li>通过控制台<code>搜索HTML</code>使用querySelector语法搜索一个元素</li>\n</ol>\n<h3 id=\"使用DevTools查看浏览器本地数据\"><a href=\"#使用DevTools查看浏览器本地数据\" class=\"headerlink\" title=\"使用DevTools查看浏览器本地数据\"></a>使用DevTools查看浏览器本地数据</h3><hr>\n<p><img src=\"/blogs/img/article/dev-tools-storage.png\" alt=\"life is strange\"></p>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><blockquote>\n<p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。  </p>\n</blockquote>\n<p>Cookie主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<p>Cookie特点：</p>\n<ol>\n<li>不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读</li>\n<li>使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对</li>\n<li>数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式</li>\n</ol>\n<h4 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h4><blockquote>\n<p>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p>\n</blockquote>\n<p><img src=\"/blogs/img/article/dev-tools-storage2.png\" alt=\"life is strange\"></p>\n<h4 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a>LocalStorage</h4><blockquote>\n<p>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M</p>\n</blockquote>\n<h4 id=\"Indexed-DB\"><a href=\"#Indexed-DB\" class=\"headerlink\" title=\"Indexed DB\"></a>Indexed DB</h4><blockquote>\n<p>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p>\n</blockquote>\n<p>特点：</p>\n<ol>\n<li><p>键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以”键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误</p>\n</li>\n<li><p>异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现</p>\n</li>\n<li><p>支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况</p>\n</li>\n<li><p>同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库</p>\n</li>\n<li><p>储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限</p>\n</li>\n<li><p>支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）</p>\n</li>\n</ol>\n<h3 id=\"使用DevTools在线编辑DOM样式\"><a href=\"#使用DevTools在线编辑DOM样式\" class=\"headerlink\" title=\"使用DevTools在线编辑DOM样式\"></a>使用DevTools在线编辑DOM样式</h3><hr>\n<ol>\n<li>查看字体</li>\n<li>定位和编辑元素样式表</li>\n</ol>\n<h3 id=\"使用DevTools查看网络请求情况\"><a href=\"#使用DevTools查看网络请求情况\" class=\"headerlink\" title=\"使用DevTools查看网络请求情况\"></a>使用DevTools查看网络请求情况</h3><hr>\n<ol>\n<li>筛选请求类型</li>\n<li>查看某个网络请求</li>\n<li>构造极限情况-限流</li>\n</ol>\n<h3 id=\"使用DevTools查看控制台信息\"><a href=\"#使用DevTools查看控制台信息\" class=\"headerlink\" title=\"使用DevTools查看控制台信息\"></a>使用DevTools查看控制台信息</h3><hr>\n<h4 id=\"通过控制台打印数据\"><a href=\"#通过控制台打印数据\" class=\"headerlink\" title=\"通过控制台打印数据\"></a>通过控制台打印数据</h4><ol>\n<li><p>console.log 用于输出普通信息</p>\n</li>\n<li><p>console.info 用于输出提示性信息</p>\n</li>\n<li><p>console.error用于输出错误信息</p>\n</li>\n<li><p>console.warn用于输出警示信息</p>\n</li>\n<li><p>console.debug用于输出调试信息</p>\n</li>\n<li><p>console.dirxml打印dom对象结构</p>\n</li>\n</ol>\n<h4 id=\"printf格式化输出数据\"><a href=\"#printf格式化输出数据\" class=\"headerlink\" title=\"printf格式化输出数据\"></a>printf格式化输出数据</h4><ol>\n<li><p>打印字符串<br>console.log(“他是%s”, “nojsja”);</p>\n</li>\n<li><p>打印数字<br>console.log(“%d年%d月%d日”,2011,3,26);</p>\n</li>\n<li><p>打印浮点数字<br>console.log(“圆周率是%f”,3.1415926);</p>\n</li>\n</ol>\n<h4 id=\"打印一组数据\"><a href=\"#打印一组数据\" class=\"headerlink\" title=\"打印一组数据\"></a>打印一组数据</h4><blockquote>\n<p>bilibili控制台demo</p>\n</blockquote>\n<ol>\n<li><p>console.group输出一组信息的开头</p>\n</li>\n<li><p>console.groupEnd结束一组输出信息</p>\n</li>\n</ol>\n<h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><blockquote>\n<p>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台</p>\n</blockquote>\n<ol>\n<li>console.assert(boolValue, info);</li>\n</ol>\n<h4 id=\"统计代码段执行次数\"><a href=\"#统计代码段执行次数\" class=\"headerlink\" title=\"统计代码段执行次数\"></a>统计代码段执行次数</h4><blockquote>\n<p>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数</p>\n</blockquote>\n<ol>\n<li>console.count(symbol)</li>\n</ol>\n<h4 id=\"统计一段代码的执行时间\"><a href=\"#统计一段代码的执行时间\" class=\"headerlink\" title=\"统计一段代码的执行时间\"></a>统计一段代码的执行时间</h4><blockquote>\n<p>通过传入参数确定定时器归属</p>\n</blockquote>\n<ol>\n<li><p>console.time(symbol)开始统计</p>\n</li>\n<li><p>console.timeEnd(symbol)结束统计</p>\n</li>\n</ol>\n<h3 id=\"打印堆栈信息\"><a href=\"#打印堆栈信息\" class=\"headerlink\" title=\"打印堆栈信息\"></a>打印堆栈信息</h3><p>console.trace 堆栈跟踪相关的调试</p>\n<h3 id=\"使用DevTools在线调试代码\"><a href=\"#使用DevTools在线调试代码\" class=\"headerlink\" title=\"使用DevTools在线调试代码\"></a>使用DevTools在线调试代码</h3><hr>\n<p><img src=\"/blogs/img/article/dev-tools-debug.png\" alt=\"life is strange\"></p>\n<ol>\n<li>定位代码，断点调试</li>\n<li>调试：暂停/继续、跨越、步进、步出</li>\n</ol>\n"},{"title":"用Javascript实现一个可自定义样式的tootips组件","catalog":true,"toc_nav_num":true,"date":"2018-11-06T11:16:00.000Z","subtitle":"animation javascript","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-11-06T11:16:00.000Z","_content":"\n#### 前言\n\n> 最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。\n\n#### 预览图\n----------------\n\n[=> 源代码](https://github.com/NoJsJa/javascript-learning/tree/master/normal/js-tooltips)\n\n![animation.gif](/blogs/img/article/tootips.gif)\n\n#### 代码实现\n------------\n\n##### 组件结构\n```js\n var Tootips = (function () {\n\n   /**\n    * [renderPage 构造html]\n    */\n   function renderPage($selector) {\n     ...\n     return $wrapper;\n   };\n\n   /**\n    * [renderHtml 使用html字符串进行初始化]\n    */\n   function init(_$selector, _options) {\n     ...\n     eventListen($selector, trigger);\n   }\n\n   /**\n    * [eventListen 进行事件监听]\n    */\n   function eventListen($selector, trigger) {\n     // 显示\n     var showTootips = function ($selector) {\n     };\n     // 隐藏\n     var hideTooTips = function ($selector) {\n     };\n     // click事件监听\n     (trigger === 'click') &&  $selector.on(trigger, function () {\n       if (!$selector.data('isActivated')) {\n         showTootips($selector);\n       }else {\n         hideTooTips($selector);\n       }\n     });\n     // 鼠标事件监听\n     (trigger === 'mouseover') &&\n        $selector.on('mouseout', function () {\n          hideTooTips($selector);\n        }).on('mouseover', function () {\n          showTootips($selector);\n     });\n   }\n\n   return {\n     init: init,\n   }\n })();\n\n```\n\n##### 初始化一个元素\n> 对一个html元素进行初始化，在元素上绑定数据和设置事件监听器\n\n```js\n/**\n * [renderHtml 使用html字符串进行初始化]\n * @param  {[$Object]} $selector [一个页面元素]\n * @param  {[String]} htmlstr   [html字符串]\n * @param  {[Object]} options   [自定义参数]\n */\nfunction init(_$selector, _options) {\n\n  var $selector = (typeof _$selector === 'object') ? _$selector : $(_$selector);\n  var trigger = _options['trigger'] ? _options['trigger'] : 'mouseover'; // click | hover\n  $selector\n   .data('tootip-target', _options.value)\n   .data('tootip-type', _options.type)\n   .data('tootip-options', _options)\n   .css('cursor', 'pointer');\n\n  eventListen($selector, trigger);\n}\n```\n\n##### 根据传入属性创建tootips组件\n* 使用`getBoundingClientRect()`方法获取目标组件的位置和宽高\n* tootips组件根据获取的位置和宽高进行窗口定位(`position: fixed`)\n* 根据传入的属性设置tootips组件的样式\n* 返回一个jQuery元素\n\n```js\n/**\n * [renderPage 构造html]\n * @param  {[Object]} options   [自定义参数]\n * @param  {[String]} type   [渲染类型 -> text | html]\n * @param  {[String]} target   [渲染字符串]\n */\nfunction renderPage($selector) {\n  var type = $selector.data('tootip-type'),\n     options = $selector.data('tootip-options'),\n     target = $selector.data('tootip-target');\n  // 提取属性\n  var randomKey = String(Math.random() + Math.random()).split('.').pop();\n  var $wrapper = $('<div></div>');\n  var cssStyle = options.style || {};\n  var styleSheet = options.css || '';\n  var direction = options.direction || 'top';\n  var rect = $selector[0].getBoundingClientRect();\n\n  // 根据宿主元素第一次计算横坐标和纵坐标\n  var renderX = function (r, d) {\n    if (d === 'top' || d === 'bottom')\n      return (r.x + r.width / 2 + 'px');\n    if (d === 'left')\n      return (r.x - 6 + 'px');\n    if (d === 'right')\n      return (r.x + r.width + 6 + 'px');\n  };\n\n  var renderY = function (r, d) {\n    if (d === 'top')\n      return (r.y - 6 + 'px');\n    if (d === 'left' || d === 'right')\n      return (r.y + r.height / 2 + 'px');\n    if (d === 'bottom')\n      return (r.y + r.height + 6 + 'px');\n  };\n\n  $wrapper\n   .css('position', 'fixed')\n   .css('left', renderX(rect, direction))\n   .css('top', renderY(rect, direction))\n   .attr('key', randomKey)\n   .addClass(styleSheet);\n  $selector.attr('key', randomKey);\n\n  Object.keys(cssStyle).forEach(function (attr) {\n    $wrapper.css(attr, cssStyle[attr]);\n  });\n\n  $wrapper.append(type === 'html' ? $(target) : $('<span>' + target +'</span>'));\n\n  return $wrapper;\n};\n```\n\n##### 绑定事件监听器\n> 对一个元素进行初始化后需要给tooltips组件绑定监听器(`click`或`mouse`事件)，让tootips组件能够响应鼠标的点击或是划过\n\n* 实现showTootips方法  \n在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用`getBoundingClientRect()`方法获取tootips元素坐标和宽高。\n\n* 实现hideTootips方法  \nhide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个`key`属性，现在可以根据`key`来移除每个目标元素对应的tootips元素。\n\n```js\n/**\n * [eventListen 进行事件监听]\n * @param  {[$Object]} $selector [一个页面元素]\n * @param  {[String]} trigger [触发事件监听类型]\n */\nfunction eventListen($selector, trigger) {\n\n  // 显示\n  var showTootips = function ($selector) {\n    var $dom = renderPage($selector);\n    $('body').append($dom[0]);\n    $selector.data('isActivated', true);\n\n    // 根据生成的tootips元素第二次计算横坐标和纵坐标\n    var options = $selector.data('tootip-options');\n    var rect = $dom[0].getBoundingClientRect();\n\n    var renderX = function (r, d) {\n      if (d === 'top' || d === 'bottom')\n        return (r.x - r.width / 2 + 'px');\n      if (d === 'left')\n        return (r.x - r.width + 'px');\n      if (d === 'right')\n        return (r.x + 'px');\n    };\n\n    var renderY = function (r, d) {\n      if (d === 'top')\n        return (r.y - r.height + 'px');\n      if (d === 'left' || d === 'right')\n        return (r.y - r.height / 2 + 'px');\n      if (d === 'bottom')\n        return (r.y + 'px');\n    };\n\n    $dom.css('top', renderY(rect, options.direction));\n    $dom.css('left', renderX(rect, options.direction));\n  };\n\n  // 隐藏\n  var hideTooTips = function ($selector) {\n    var key = $selector.attr('key');\n    $('div[key='+key+']').remove();\n    $selector.data('isActivated', '');\n  };\n\n  // click事件监听\n  (trigger === 'click') &&  $selector.on(trigger, function () {\n    if (!$selector.data('isActivated')) {\n      showTootips($selector);\n    }else {\n      hideTooTips($selector);\n    }\n  });\n\n  // 鼠标事件监听\n  (trigger === 'mouseover') &&\n     $selector.on('mouseout', function () {\n       hideTooTips($selector);\n     }).on('mouseover', function () {\n       showTootips($selector);\n  });\n}\n```\n\n##### 使用方式\n> 设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。\n\n```js\nTootips.init($('#t1'), {\n  trigger: 'mouseover', // 触发方式\n  type: 'html', // 内容显示类型\n  value: '<h3>header</h3><p>body</p>', // 内容显示值\n  direction: 'top', // 显示方向\n  style: { // tootips组件自定义样式\n    'font-size': '1rem',\n    'color': 'red',\n    'min-width': '5rem',\n    'border': 'solid 1px grey',\n    'padding': '5px 10px',\n    'border-radius': '5px',\n    'background-color': 'white',\n  },\n  css: 'triangle-bottom', // tootips组件自定义样式表\n});\n```\n\n#### 总结\n--------\n* tootips组件的坐标完全使用javasript来获取和设置\n* tootips组件的定位类型为`position: fixed`，不受页面布局影响\n* `getBoundingClientRect()`方法可以获取目标元素的坐标、宽高等数据\n* tootips组件支持传入自定义样式\n* tootips组件支持显示含有html标签的字符串和普通字符串\n* tootips组件支持设置触发方式(`click` / `mouseover`)\n\n实现方式可能还需要优化，但暂时能够满足项目需求 ...\n\n##### 感谢阅读\n","source":"_posts/用Javascript实现一个可自定义样式的tootips组件.md","raw":"---\ntitle: \"用Javascript实现一个可自定义样式的tootips组件\"\ncatalog: true\ntoc_nav_num: true\ndate:  2018-11-06 19:16:00\nsubtitle: \"animation javascript\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- javascript\ncategories:\n- Javascript\nupdateDate: 2018-11-06 19:16:00\n---\n\n#### 前言\n\n> 最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。\n\n#### 预览图\n----------------\n\n[=> 源代码](https://github.com/NoJsJa/javascript-learning/tree/master/normal/js-tooltips)\n\n![animation.gif](/blogs/img/article/tootips.gif)\n\n#### 代码实现\n------------\n\n##### 组件结构\n```js\n var Tootips = (function () {\n\n   /**\n    * [renderPage 构造html]\n    */\n   function renderPage($selector) {\n     ...\n     return $wrapper;\n   };\n\n   /**\n    * [renderHtml 使用html字符串进行初始化]\n    */\n   function init(_$selector, _options) {\n     ...\n     eventListen($selector, trigger);\n   }\n\n   /**\n    * [eventListen 进行事件监听]\n    */\n   function eventListen($selector, trigger) {\n     // 显示\n     var showTootips = function ($selector) {\n     };\n     // 隐藏\n     var hideTooTips = function ($selector) {\n     };\n     // click事件监听\n     (trigger === 'click') &&  $selector.on(trigger, function () {\n       if (!$selector.data('isActivated')) {\n         showTootips($selector);\n       }else {\n         hideTooTips($selector);\n       }\n     });\n     // 鼠标事件监听\n     (trigger === 'mouseover') &&\n        $selector.on('mouseout', function () {\n          hideTooTips($selector);\n        }).on('mouseover', function () {\n          showTootips($selector);\n     });\n   }\n\n   return {\n     init: init,\n   }\n })();\n\n```\n\n##### 初始化一个元素\n> 对一个html元素进行初始化，在元素上绑定数据和设置事件监听器\n\n```js\n/**\n * [renderHtml 使用html字符串进行初始化]\n * @param  {[$Object]} $selector [一个页面元素]\n * @param  {[String]} htmlstr   [html字符串]\n * @param  {[Object]} options   [自定义参数]\n */\nfunction init(_$selector, _options) {\n\n  var $selector = (typeof _$selector === 'object') ? _$selector : $(_$selector);\n  var trigger = _options['trigger'] ? _options['trigger'] : 'mouseover'; // click | hover\n  $selector\n   .data('tootip-target', _options.value)\n   .data('tootip-type', _options.type)\n   .data('tootip-options', _options)\n   .css('cursor', 'pointer');\n\n  eventListen($selector, trigger);\n}\n```\n\n##### 根据传入属性创建tootips组件\n* 使用`getBoundingClientRect()`方法获取目标组件的位置和宽高\n* tootips组件根据获取的位置和宽高进行窗口定位(`position: fixed`)\n* 根据传入的属性设置tootips组件的样式\n* 返回一个jQuery元素\n\n```js\n/**\n * [renderPage 构造html]\n * @param  {[Object]} options   [自定义参数]\n * @param  {[String]} type   [渲染类型 -> text | html]\n * @param  {[String]} target   [渲染字符串]\n */\nfunction renderPage($selector) {\n  var type = $selector.data('tootip-type'),\n     options = $selector.data('tootip-options'),\n     target = $selector.data('tootip-target');\n  // 提取属性\n  var randomKey = String(Math.random() + Math.random()).split('.').pop();\n  var $wrapper = $('<div></div>');\n  var cssStyle = options.style || {};\n  var styleSheet = options.css || '';\n  var direction = options.direction || 'top';\n  var rect = $selector[0].getBoundingClientRect();\n\n  // 根据宿主元素第一次计算横坐标和纵坐标\n  var renderX = function (r, d) {\n    if (d === 'top' || d === 'bottom')\n      return (r.x + r.width / 2 + 'px');\n    if (d === 'left')\n      return (r.x - 6 + 'px');\n    if (d === 'right')\n      return (r.x + r.width + 6 + 'px');\n  };\n\n  var renderY = function (r, d) {\n    if (d === 'top')\n      return (r.y - 6 + 'px');\n    if (d === 'left' || d === 'right')\n      return (r.y + r.height / 2 + 'px');\n    if (d === 'bottom')\n      return (r.y + r.height + 6 + 'px');\n  };\n\n  $wrapper\n   .css('position', 'fixed')\n   .css('left', renderX(rect, direction))\n   .css('top', renderY(rect, direction))\n   .attr('key', randomKey)\n   .addClass(styleSheet);\n  $selector.attr('key', randomKey);\n\n  Object.keys(cssStyle).forEach(function (attr) {\n    $wrapper.css(attr, cssStyle[attr]);\n  });\n\n  $wrapper.append(type === 'html' ? $(target) : $('<span>' + target +'</span>'));\n\n  return $wrapper;\n};\n```\n\n##### 绑定事件监听器\n> 对一个元素进行初始化后需要给tooltips组件绑定监听器(`click`或`mouse`事件)，让tootips组件能够响应鼠标的点击或是划过\n\n* 实现showTootips方法  \n在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用`getBoundingClientRect()`方法获取tootips元素坐标和宽高。\n\n* 实现hideTootips方法  \nhide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个`key`属性，现在可以根据`key`来移除每个目标元素对应的tootips元素。\n\n```js\n/**\n * [eventListen 进行事件监听]\n * @param  {[$Object]} $selector [一个页面元素]\n * @param  {[String]} trigger [触发事件监听类型]\n */\nfunction eventListen($selector, trigger) {\n\n  // 显示\n  var showTootips = function ($selector) {\n    var $dom = renderPage($selector);\n    $('body').append($dom[0]);\n    $selector.data('isActivated', true);\n\n    // 根据生成的tootips元素第二次计算横坐标和纵坐标\n    var options = $selector.data('tootip-options');\n    var rect = $dom[0].getBoundingClientRect();\n\n    var renderX = function (r, d) {\n      if (d === 'top' || d === 'bottom')\n        return (r.x - r.width / 2 + 'px');\n      if (d === 'left')\n        return (r.x - r.width + 'px');\n      if (d === 'right')\n        return (r.x + 'px');\n    };\n\n    var renderY = function (r, d) {\n      if (d === 'top')\n        return (r.y - r.height + 'px');\n      if (d === 'left' || d === 'right')\n        return (r.y - r.height / 2 + 'px');\n      if (d === 'bottom')\n        return (r.y + 'px');\n    };\n\n    $dom.css('top', renderY(rect, options.direction));\n    $dom.css('left', renderX(rect, options.direction));\n  };\n\n  // 隐藏\n  var hideTooTips = function ($selector) {\n    var key = $selector.attr('key');\n    $('div[key='+key+']').remove();\n    $selector.data('isActivated', '');\n  };\n\n  // click事件监听\n  (trigger === 'click') &&  $selector.on(trigger, function () {\n    if (!$selector.data('isActivated')) {\n      showTootips($selector);\n    }else {\n      hideTooTips($selector);\n    }\n  });\n\n  // 鼠标事件监听\n  (trigger === 'mouseover') &&\n     $selector.on('mouseout', function () {\n       hideTooTips($selector);\n     }).on('mouseover', function () {\n       showTootips($selector);\n  });\n}\n```\n\n##### 使用方式\n> 设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。\n\n```js\nTootips.init($('#t1'), {\n  trigger: 'mouseover', // 触发方式\n  type: 'html', // 内容显示类型\n  value: '<h3>header</h3><p>body</p>', // 内容显示值\n  direction: 'top', // 显示方向\n  style: { // tootips组件自定义样式\n    'font-size': '1rem',\n    'color': 'red',\n    'min-width': '5rem',\n    'border': 'solid 1px grey',\n    'padding': '5px 10px',\n    'border-radius': '5px',\n    'background-color': 'white',\n  },\n  css: 'triangle-bottom', // tootips组件自定义样式表\n});\n```\n\n#### 总结\n--------\n* tootips组件的坐标完全使用javasript来获取和设置\n* tootips组件的定位类型为`position: fixed`，不受页面布局影响\n* `getBoundingClientRect()`方法可以获取目标元素的坐标、宽高等数据\n* tootips组件支持传入自定义样式\n* tootips组件支持显示含有html标签的字符串和普通字符串\n* tootips组件支持设置触发方式(`click` / `mouseover`)\n\n实现方式可能还需要优化，但暂时能够满足项目需求 ...\n\n##### 感谢阅读\n","slug":"用Javascript实现一个可自定义样式的tootips组件","published":1,"updated":"2020-08-20T05:00:37.727Z","_id":"ckba8cya6001754953msygn6g","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。</p>\n</blockquote>\n<h4 id=\"预览图\"><a href=\"#预览图\" class=\"headerlink\" title=\"预览图\"></a>预览图</h4><hr>\n<p><a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/normal/js-tooltips\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p>\n<p><img src=\"/blogs/img/article/tootips.gif\" alt=\"animation.gif\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><hr>\n<h5 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Tootips = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderPage 构造html]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderPage</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $wrapper;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    eventListen($selector, trigger);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, trigger</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显示</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> showTootips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 隐藏</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hideTooTips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// click事件监听</span></span><br><span class=\"line\">    (trigger === <span class=\"string\">'click'</span>) &amp;&amp;  $selector.on(trigger, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!$selector.data(<span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">        showTootips($selector);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        hideTooTips($selector);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 鼠标事件监听</span></span><br><span class=\"line\">    (trigger === <span class=\"string\">'mouseover'</span>) &amp;&amp;</span><br><span class=\"line\">       $selector.on(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         hideTooTips($selector);</span><br><span class=\"line\">       &#125;).on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         showTootips($selector);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    init: init,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化一个元素\"><a href=\"#初始化一个元素\" class=\"headerlink\" title=\"初始化一个元素\"></a>初始化一个元素</h5><blockquote>\n<p>对一个html元素进行初始化，在元素上绑定数据和设置事件监听器</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>htmlstr   [html字符串]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $selector = (<span class=\"keyword\">typeof</span> _$selector === <span class=\"string\">'object'</span>) ? _$selector : $(_$selector);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> trigger = _options[<span class=\"string\">'trigger'</span>] ? _options[<span class=\"string\">'trigger'</span>] : <span class=\"string\">'mouseover'</span>; <span class=\"comment\">// click | hover</span></span><br><span class=\"line\">  $selector</span><br><span class=\"line\">   .data(<span class=\"string\">'tootip-target'</span>, _options.value)</span><br><span class=\"line\">   .data(<span class=\"string\">'tootip-type'</span>, _options.type)</span><br><span class=\"line\">   .data(<span class=\"string\">'tootip-options'</span>, _options)</span><br><span class=\"line\">   .css(<span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  eventListen($selector, trigger);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"根据传入属性创建tootips组件\"><a href=\"#根据传入属性创建tootips组件\" class=\"headerlink\" title=\"根据传入属性创建tootips组件\"></a>根据传入属性创建tootips组件</h5><ul>\n<li>使用<code>getBoundingClientRect()</code>方法获取目标组件的位置和宽高</li>\n<li>tootips组件根据获取的位置和宽高进行窗口定位(<code>position: fixed</code>)</li>\n<li>根据传入的属性设置tootips组件的样式</li>\n<li>返回一个jQuery元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [renderPage 构造html]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>type   [渲染类型 -&gt; text | html]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>target   [渲染字符串]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderPage</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = $selector.data(<span class=\"string\">'tootip-type'</span>),</span><br><span class=\"line\">     options = $selector.data(<span class=\"string\">'tootip-options'</span>),</span><br><span class=\"line\">     target = $selector.data(<span class=\"string\">'tootip-target'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 提取属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> randomKey = <span class=\"built_in\">String</span>(<span class=\"built_in\">Math</span>.random() + <span class=\"built_in\">Math</span>.random()).split(<span class=\"string\">'.'</span>).pop();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $wrapper = $(<span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cssStyle = options.style || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> styleSheet = options.css || <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> direction = options.direction || <span class=\"string\">'top'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rect = $selector[<span class=\"number\">0</span>].getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据宿主元素第一次计算横坐标和纵坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x + r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x + r.width + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderY = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.y - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.y + r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.y + r.height + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  $wrapper</span><br><span class=\"line\">   .css(<span class=\"string\">'position'</span>, <span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">   .css(<span class=\"string\">'left'</span>, renderX(rect, direction))</span><br><span class=\"line\">   .css(<span class=\"string\">'top'</span>, renderY(rect, direction))</span><br><span class=\"line\">   .attr(<span class=\"string\">'key'</span>, randomKey)</span><br><span class=\"line\">   .addClass(styleSheet);</span><br><span class=\"line\">  $selector.attr(<span class=\"string\">'key'</span>, randomKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(cssStyle).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">    $wrapper.css(attr, cssStyle[attr]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  $wrapper.append(type === <span class=\"string\">'html'</span> ? $(target) : $(<span class=\"string\">'&lt;span&gt;'</span> + target +<span class=\"string\">'&lt;/span&gt;'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $wrapper;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"绑定事件监听器\"><a href=\"#绑定事件监听器\" class=\"headerlink\" title=\"绑定事件监听器\"></a>绑定事件监听器</h5><blockquote>\n<p>对一个元素进行初始化后需要给tooltips组件绑定监听器(<code>click</code>或<code>mouse</code>事件)，让tootips组件能够响应鼠标的点击或是划过</p>\n</blockquote>\n<ul>\n<li><p>实现showTootips方法<br>在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用<code>getBoundingClientRect()</code>方法获取tootips元素坐标和宽高。</p>\n</li>\n<li><p>实现hideTootips方法<br>hide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个<code>key</code>属性，现在可以根据<code>key</code>来移除每个目标元素对应的tootips元素。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>trigger [触发事件监听类型]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, trigger</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 显示</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> showTootips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $dom = renderPage($selector);</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).append($dom[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    $selector.data(<span class=\"string\">'isActivated'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据生成的tootips元素第二次计算横坐标和纵坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = $selector.data(<span class=\"string\">'tootip-options'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = $dom[<span class=\"number\">0</span>].getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.x - r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.x - r.width + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.x + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderY = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.y - r.height + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.y - r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.y + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    $dom.css(<span class=\"string\">'top'</span>, renderY(rect, options.direction));</span><br><span class=\"line\">    $dom.css(<span class=\"string\">'left'</span>, renderX(rect, options.direction));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 隐藏</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> hideTooTips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = $selector.attr(<span class=\"string\">'key'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'div[key='</span>+key+<span class=\"string\">']'</span>).remove();</span><br><span class=\"line\">    $selector.data(<span class=\"string\">'isActivated'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// click事件监听</span></span><br><span class=\"line\">  (trigger === <span class=\"string\">'click'</span>) &amp;&amp;  $selector.on(trigger, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$selector.data(<span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">      showTootips($selector);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      hideTooTips($selector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 鼠标事件监听</span></span><br><span class=\"line\">  (trigger === <span class=\"string\">'mouseover'</span>) &amp;&amp;</span><br><span class=\"line\">     $selector.on(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       hideTooTips($selector);</span><br><span class=\"line\">     &#125;).on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       showTootips($selector);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h5><blockquote>\n<p>设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tootips.init($(<span class=\"string\">'#t1'</span>), &#123;</span><br><span class=\"line\">  trigger: <span class=\"string\">'mouseover'</span>, <span class=\"comment\">// 触发方式</span></span><br><span class=\"line\">  type: <span class=\"string\">'html'</span>, <span class=\"comment\">// 内容显示类型</span></span><br><span class=\"line\">  value: <span class=\"string\">'&lt;h3&gt;header&lt;/h3&gt;&lt;p&gt;body&lt;/p&gt;'</span>, <span class=\"comment\">// 内容显示值</span></span><br><span class=\"line\">  direction: <span class=\"string\">'top'</span>, <span class=\"comment\">// 显示方向</span></span><br><span class=\"line\">  style: &#123; <span class=\"comment\">// tootips组件自定义样式</span></span><br><span class=\"line\">    <span class=\"string\">'font-size'</span>: <span class=\"string\">'1rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">    <span class=\"string\">'min-width'</span>: <span class=\"string\">'5rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'border'</span>: <span class=\"string\">'solid 1px grey'</span>,</span><br><span class=\"line\">    <span class=\"string\">'padding'</span>: <span class=\"string\">'5px 10px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'border-radius'</span>: <span class=\"string\">'5px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'background-color'</span>: <span class=\"string\">'white'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  css: <span class=\"string\">'triangle-bottom'</span>, <span class=\"comment\">// tootips组件自定义样式表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><hr>\n<ul>\n<li>tootips组件的坐标完全使用javasript来获取和设置</li>\n<li>tootips组件的定位类型为<code>position: fixed</code>，不受页面布局影响</li>\n<li><code>getBoundingClientRect()</code>方法可以获取目标元素的坐标、宽高等数据</li>\n<li>tootips组件支持传入自定义样式</li>\n<li>tootips组件支持显示含有html标签的字符串和普通字符串</li>\n<li>tootips组件支持设置触发方式(<code>click</code> / <code>mouseover</code>)</li>\n</ul>\n<p>实现方式可能还需要优化，但暂时能够满足项目需求 …</p>\n<h5 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h5>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><blockquote>\n<p>最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。</p>\n</blockquote>\n<h4 id=\"预览图\"><a href=\"#预览图\" class=\"headerlink\" title=\"预览图\"></a>预览图</h4><hr>\n<p><a href=\"https://github.com/NoJsJa/javascript-learning/tree/master/normal/js-tooltips\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p>\n<p><img src=\"/blogs/img/article/tootips.gif\" alt=\"animation.gif\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><hr>\n<h5 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Tootips = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderPage 构造html]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderPage</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $wrapper;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    eventListen($selector, trigger);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, trigger</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显示</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> showTootips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 隐藏</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hideTooTips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// click事件监听</span></span><br><span class=\"line\">    (trigger === <span class=\"string\">'click'</span>) &amp;&amp;  $selector.on(trigger, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!$selector.data(<span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">        showTootips($selector);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        hideTooTips($selector);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 鼠标事件监听</span></span><br><span class=\"line\">    (trigger === <span class=\"string\">'mouseover'</span>) &amp;&amp;</span><br><span class=\"line\">       $selector.on(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         hideTooTips($selector);</span><br><span class=\"line\">       &#125;).on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         showTootips($selector);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    init: init,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化一个元素\"><a href=\"#初始化一个元素\" class=\"headerlink\" title=\"初始化一个元素\"></a>初始化一个元素</h5><blockquote>\n<p>对一个html元素进行初始化，在元素上绑定数据和设置事件监听器</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>htmlstr   [html字符串]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $selector = (<span class=\"keyword\">typeof</span> _$selector === <span class=\"string\">'object'</span>) ? _$selector : $(_$selector);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> trigger = _options[<span class=\"string\">'trigger'</span>] ? _options[<span class=\"string\">'trigger'</span>] : <span class=\"string\">'mouseover'</span>; <span class=\"comment\">// click | hover</span></span><br><span class=\"line\">  $selector</span><br><span class=\"line\">   .data(<span class=\"string\">'tootip-target'</span>, _options.value)</span><br><span class=\"line\">   .data(<span class=\"string\">'tootip-type'</span>, _options.type)</span><br><span class=\"line\">   .data(<span class=\"string\">'tootip-options'</span>, _options)</span><br><span class=\"line\">   .css(<span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  eventListen($selector, trigger);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"根据传入属性创建tootips组件\"><a href=\"#根据传入属性创建tootips组件\" class=\"headerlink\" title=\"根据传入属性创建tootips组件\"></a>根据传入属性创建tootips组件</h5><ul>\n<li>使用<code>getBoundingClientRect()</code>方法获取目标组件的位置和宽高</li>\n<li>tootips组件根据获取的位置和宽高进行窗口定位(<code>position: fixed</code>)</li>\n<li>根据传入的属性设置tootips组件的样式</li>\n<li>返回一个jQuery元素</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [renderPage 构造html]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>type   [渲染类型 -&gt; text | html]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>target   [渲染字符串]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderPage</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> type = $selector.data(<span class=\"string\">'tootip-type'</span>),</span><br><span class=\"line\">     options = $selector.data(<span class=\"string\">'tootip-options'</span>),</span><br><span class=\"line\">     target = $selector.data(<span class=\"string\">'tootip-target'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 提取属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> randomKey = <span class=\"built_in\">String</span>(<span class=\"built_in\">Math</span>.random() + <span class=\"built_in\">Math</span>.random()).split(<span class=\"string\">'.'</span>).pop();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $wrapper = $(<span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cssStyle = options.style || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> styleSheet = options.css || <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> direction = options.direction || <span class=\"string\">'top'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rect = $selector[<span class=\"number\">0</span>].getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据宿主元素第一次计算横坐标和纵坐标</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x + r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x + r.width + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderY = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.y - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.y + r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.y + r.height + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  $wrapper</span><br><span class=\"line\">   .css(<span class=\"string\">'position'</span>, <span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">   .css(<span class=\"string\">'left'</span>, renderX(rect, direction))</span><br><span class=\"line\">   .css(<span class=\"string\">'top'</span>, renderY(rect, direction))</span><br><span class=\"line\">   .attr(<span class=\"string\">'key'</span>, randomKey)</span><br><span class=\"line\">   .addClass(styleSheet);</span><br><span class=\"line\">  $selector.attr(<span class=\"string\">'key'</span>, randomKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(cssStyle).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">    $wrapper.css(attr, cssStyle[attr]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  $wrapper.append(type === <span class=\"string\">'html'</span> ? $(target) : $(<span class=\"string\">'&lt;span&gt;'</span> + target +<span class=\"string\">'&lt;/span&gt;'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $wrapper;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"绑定事件监听器\"><a href=\"#绑定事件监听器\" class=\"headerlink\" title=\"绑定事件监听器\"></a>绑定事件监听器</h5><blockquote>\n<p>对一个元素进行初始化后需要给tooltips组件绑定监听器(<code>click</code>或<code>mouse</code>事件)，让tootips组件能够响应鼠标的点击或是划过</p>\n</blockquote>\n<ul>\n<li><p>实现showTootips方法<br>在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用<code>getBoundingClientRect()</code>方法获取tootips元素坐标和宽高。</p>\n</li>\n<li><p>实现hideTootips方法<br>hide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个<code>key</code>属性，现在可以根据<code>key</code>来移除每个目标元素对应的tootips元素。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>trigger [触发事件监听类型]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, trigger</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 显示</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> showTootips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $dom = renderPage($selector);</span><br><span class=\"line\">    $(<span class=\"string\">'body'</span>).append($dom[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    $selector.data(<span class=\"string\">'isActivated'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据生成的tootips元素第二次计算横坐标和纵坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = $selector.data(<span class=\"string\">'tootip-options'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = $dom[<span class=\"number\">0</span>].getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderX = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.x - r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.x - r.width + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.x + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> renderY = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.y - r.height + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.y - r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (r.y + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    $dom.css(<span class=\"string\">'top'</span>, renderY(rect, options.direction));</span><br><span class=\"line\">    $dom.css(<span class=\"string\">'left'</span>, renderX(rect, options.direction));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 隐藏</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> hideTooTips = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = $selector.attr(<span class=\"string\">'key'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'div[key='</span>+key+<span class=\"string\">']'</span>).remove();</span><br><span class=\"line\">    $selector.data(<span class=\"string\">'isActivated'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// click事件监听</span></span><br><span class=\"line\">  (trigger === <span class=\"string\">'click'</span>) &amp;&amp;  $selector.on(trigger, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$selector.data(<span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">      showTootips($selector);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      hideTooTips($selector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 鼠标事件监听</span></span><br><span class=\"line\">  (trigger === <span class=\"string\">'mouseover'</span>) &amp;&amp;</span><br><span class=\"line\">     $selector.on(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       hideTooTips($selector);</span><br><span class=\"line\">     &#125;).on(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       showTootips($selector);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h5><blockquote>\n<p>设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tootips.init($(<span class=\"string\">'#t1'</span>), &#123;</span><br><span class=\"line\">  trigger: <span class=\"string\">'mouseover'</span>, <span class=\"comment\">// 触发方式</span></span><br><span class=\"line\">  type: <span class=\"string\">'html'</span>, <span class=\"comment\">// 内容显示类型</span></span><br><span class=\"line\">  value: <span class=\"string\">'&lt;h3&gt;header&lt;/h3&gt;&lt;p&gt;body&lt;/p&gt;'</span>, <span class=\"comment\">// 内容显示值</span></span><br><span class=\"line\">  direction: <span class=\"string\">'top'</span>, <span class=\"comment\">// 显示方向</span></span><br><span class=\"line\">  style: &#123; <span class=\"comment\">// tootips组件自定义样式</span></span><br><span class=\"line\">    <span class=\"string\">'font-size'</span>: <span class=\"string\">'1rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">    <span class=\"string\">'min-width'</span>: <span class=\"string\">'5rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'border'</span>: <span class=\"string\">'solid 1px grey'</span>,</span><br><span class=\"line\">    <span class=\"string\">'padding'</span>: <span class=\"string\">'5px 10px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'border-radius'</span>: <span class=\"string\">'5px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'background-color'</span>: <span class=\"string\">'white'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  css: <span class=\"string\">'triangle-bottom'</span>, <span class=\"comment\">// tootips组件自定义样式表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><hr>\n<ul>\n<li>tootips组件的坐标完全使用javasript来获取和设置</li>\n<li>tootips组件的定位类型为<code>position: fixed</code>，不受页面布局影响</li>\n<li><code>getBoundingClientRect()</code>方法可以获取目标元素的坐标、宽高等数据</li>\n<li>tootips组件支持传入自定义样式</li>\n<li>tootips组件支持显示含有html标签的字符串和普通字符串</li>\n<li>tootips组件支持设置触发方式(<code>click</code> / <code>mouseover</code>)</li>\n</ul>\n<p>实现方式可能还需要优化，但暂时能够满足项目需求 …</p>\n<h5 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h5>"},{"title":"基于Electron的smb客户端开发记录","catalog":true,"toc_nav_num":true,"date":"2020-07-17T07:59:00.000Z","subtitle":"smb samba client","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-07-03T07:59:00.000Z","top":1,"_content":"\n\n### 前言\n---------------\n最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库[lowdb](https://github.com/typicode/lowdb)。\n\n项目精简版[DEMO]展示(https://github.com/NoJsJa/electron-react-template)\n\n### 功能需求\n---------------\n\n#### 集群节点管理\n\n1. 客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作\n2. 支持设置默认节点操作用于自动登录功能\n3. 添加节点的时候要进行ping逻辑判断目标节点是否可用\n4. 调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表\n\n需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。\n\n![RhinoDisk](/blogs/img/article/smb_node.jpg)\n\n![RhinoDisk](/blogs/img/article/smb_node_conf.jpg)\n\n#### 集群用户登录\n\n1. 支持已登录过客户端的用户自动下拉提示\n2. 支持已记住密码的用户自动填充密码到输入框\n3. 如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板\n\n需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。\n\n![RhinoDisk](/blogs/img/article/smb_login.jpg)\n\n#### 远程共享目录挂载\n\n1. windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作\n2. 选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z\n\n需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。\n\n![RhinoDisk](/blogs/img/article/smb_share.jpg)\n![RhinoDisk](/blogs/img/article/smb_share_mount.jpg)\n\n#### 文件上传管理\n\n1. 文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。\n2. 在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。\n3. 任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。\n4. 切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。\n\n需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。\n\n![RhinoDisk](/blogs/img/article/smb_upload_now.jpg)\n![RhinoDisk](/blogs/img/article/smb_upload_record.jpg)\n\n### 实现难点\n-----------\n\n#### 多语言功能实现\n\n总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。\n\n![lang](/blogs/img/article/electron-lang.png)\n\n```js\nconst fs = require('fs');\nconst path = require('path');\nconst { app } = require('electron');\n\n/**\n * global.lang -- 内存里保存的所有语言数据\n * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)\n * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)\n * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步\n */\nconst lang = (function lang() {\n  const defaultLang = 'zh_CN';\n\n  /* ------------------- 获取统一的语言环境标识 ------------------- */\n  const getLANG = (acceptLang) => {\n    // 英语\n    if (['en-US', 'en', 'en-us', 'en_us', 'en_US'].indexOf(acceptLang) !== -1) {\n      return 'en_us';\n    }\n    // 中文简体\n    if (['zh-CN', 'zh', 'zh-cn', 'zh_cn', 'zh_CN'].indexOf(acceptLang) !== -1) {\n      return 'zh_cn';\n    } if (['zh-TW', 'zh-tw', 'zh_tw', 'zh_TW'].indexOf(acceptLang) !== -1) {\n      return 'zh_tw';\n    // 默认中文简体\n    }\n    return 'zh_cn';\n  };\n\n  /* ------------------- 加载语言文件 ------------------- */\n  const setLang = (langEnv) => {\n    global.lang = global.lang ? global.lang : {};\n    global.LANG = langEnv;\n\n    // 读取文件夹的语言配置文件写入全局配置\n    fs.readdir(path.join(app.getAppPath(), 'app/lang', langEnv), (err, files) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      files.forEach((file) => {\n        global.lang[path.basename(file)] = require(path.join(app.getAppPath(), 'app/lang', langEnv, file));\n      });\n    });\n  };\n\n  return (acceptLang) => {\n    const _lang = getLANG(acceptLang || defaultLang);\n    if (global.LANG && global.LANG == _lang) {\n      return;\n    }\n    // 设置目前的语言环境\n    setLang(_lang);\n  };\n}());\n\nmodule.exports = lang;\n\n```\n\n#### 托盘功能的实现\n\n使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。\n\n```js\ncontextMenu() {\n    global.appTray = new Tray(path.join(app.getAppPath(), os.type() === 'Windows_NT' ? `resources/icon_${this.envConf.work_env}.ico` : 'resources/mac_tray.png'));\n    const menu = Menu.buildFromTemplate( [\n      {\n          label: global.lang.public.quit,\n          type: 'normal',\n          click: () => {\n            this.sendToWeb('upload', {action: 'getUploadingTask'});\n            ipcMainProcess.ipc.once('upload-getUploadingTask', (event, rsp) => {\n              if (rsp.code === 200) {\n\n                  global.ipcMainWindow.sendToWeb('shell', { action: 'upload-clear' });\n                  .then(() => {\n                    global.appTray.destroy();\n                    app.quit();\n                  }).catch(() => {\n                    global.ipcMainProcess.notifySend({\n                      body: global.lang.public['data_write_failed_before_quit']\n                    });\n                  });\n                };\n                \n                if (rsp.result !== 0) {\n                  const buttonId = dialog.showMessageBoxSync(this.windowoptions, {\n                    defaultId: 0,\n                    buttons: ['No', 'Yes'],\n                    type: 'info',\n                    title: global.lang.public.tips,\n                    message: global.lang.upload.app_quit_tips\n                  });\n                  if (buttonId === 1) quitApp();\n                } else {\n                  quitApp();\n                }\n                \n              } else {\n                global.ipcMainProcess.notifySend({\n                  body: rsp.result\n                });\n              }\n            });\n          }\n        }\n    ]);\n\n    global.appTray.on('click', ()=>{    \n      this.window.show();\n    });\n    global.appTray.setToolTip('RninoDisk');\n    global.appTray.setContextMenu(menu);\n  }\n```\n\n#### Node执行操作系统命令\n\n1. 通用的系统命令执行函数(日志输出阻塞版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。\n```js\nconst child = require('child_process');\n/**\n   * [exec 执行一个命令，阻塞输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\nexports.exec = (_command, _params=[], _options={}) => {\n  const params = Array.isArray(_params) ? _params.join(' ') : '';\n  const options = (String(_params) === '[object Object]') ? _params : (_options);\n  const command = `${_command} ${params}`;\n  \n  console.log(params, options, command);\n\n  return new Promise((resolve, reject) => {\n    child.exec(command, options, (_err, _stdout, _stderr) => {\n      if (_err) {\n        exports.console_log(_err, 'red');\n        resolve({code: 1, result: _err});\n      } else if (_stderr && _stderr.toString()) {\n        exports.console_log(_stderr, 'red');\n        resolve({code: 1, result: _stderr});\n      } else {\n        console.log(_stdout);\n        resolve({code: 0, result: _stdout});\n      }\n    });\n  });\n}\n```\n\n2. 通用的系统命令执行函数(日志同步输出版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。\n```js\n  const child = require('child_process');\n  /**\n   * [execRealtime 执行一个命令，实时输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\n  exports.execRealtime = (_command, _params=[], _options={}) => {\n    const params = Array.isArray(_params) ? _params.join(' ') : '';\n    const options = (String(_params) === '[object Object]') ? _params : (_options);\n    const command = `${_command} ${params}`;\n    let data = '', error = '';\n    \n    console.log(params, options, command);\n  \n    return new Promise((resolve, reject) => {\n      const result = child.exec(command, options);\n      \n      result.stdout.on('data', (data) => {\n        exports.console_log(data, 'white');\n        data += `${data}`;\n      });\n\n      result.stderr.on('data', (data) => {\n        exports.console_log(data, 'red');\n        error += `${data}`;\n      });\n\n      result.on('close', (code) => {\n        resolve({code, result: data, error});\n      });\n    });\n  }\n\n```\n\n#### 远程共享目录挂载\n\n1. 获取空闲盘符和已经挂载盘符\n```js\n/**\n    * getSystemDriveLetter [获取系统已经挂载的磁盘]\n    * @return {[Array]} [盘符列表]\n    */\n  getSystemDriveLetter() {\n    return new Promise((resolve) => {\n      this.sudo.exec('fsutil fsinfo drives', [], { encoding: 'buffer' }).then((stdout) => {\n        const driverstr = stdout;\n        const driverstrArr = driverstr.split(' ').filter(s => s !== os.EOL).map(s => s.replace('\\\\', ''));\n        const allDrivers = [\n          'C:', 'D:', 'E:', 'F:', 'G:', 'H:', 'I:', 'J:', 'K:', 'L:',\n          'M:', 'N:', 'O:', 'P:', 'Q:', 'R:', 'S:', 'T:', 'U:', 'V:',\n          'W:', 'X:', 'Y:', 'Z:'\n        ];\n        driverstrArr.shift();\n        resolve({\n          code: 200,\n          result: {\n            mounted: driverstrArr,\n            available: allDrivers.filter(d => !driverstrArr.includes(d.toLocaleUpperCase()))\n          },\n        })\n      }, (err) => {\n        console.error(err);\n        resolve({\n          code: 600,\n          result: err,\n        });\n      });\n    })\n  }\n```\n\n2. 通过UNC命令对远程共享进行挂载\n```js\n/* 挂载共享 */\n_mountSystemDriver_Windows_NT({ host, driver, path, auto = false }) {\n    const pwd = global.ipcMainProcess.userModel.get('last.pwd');\n    const { isThirdUser, nickname, isLocalUser, username } = global.ipcMainProcess.userModel.info;\n    const commandUseIPC = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    const commandMount = `net use ${driver} \\\\\\\\${host}\\\\${path} \"${pwd}\" /user:\"${username}\"`;\n    const commandUmount = `net use ${driver} /del /y`;\n\n    return new Promise((resolve, reject) => {\n      // 获取系统已经挂载的磁盘和空闲的磁盘\n      this.getSystemDriveLetter()\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            if (rsp.result.mounted.includes(driver.toLocaleUpperCase())) {\n              throw new Error(global.lang.node.driver_already_mount);\n            }\n          } else {\n            throw new Error(global.lang.node.get_system_mount_info_failed);\n          }\n        })\n        // 尝试UNC连接\n        .then(() => {\n          return this.sudo.exec(commandUseIPC);\n        })\n        // 执行挂载命令\n        .then(() => {\n          return this.sudo.exec(commandMount);\n        })\n        // 更新数据\n        .then(() => {\n          return this.update('mountPoint', { username, host, path }, {\n            username, host, path, driver, auto\n          });\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              username, host, driver\n            },\n          });\n        }).catch((err) => {\n          console.error(err, err.toString());\n          resolve({\n            code: 600,\n            result: global.lang.node.net_mount_failed_reason,\n          });\n        });\n    });\n  }\n```\n\n#### 文件上传管理\n\n前端界面沿用之前的AWS对象存储文件上传管理逻辑[基于s3对象存储多文件分片上传的Javascript实现(一)](https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/)，不同的地方是加入了`历史任务`功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如`\\\\[host]\\[sharename]\\file1`，这样子文件上传就变成本地目录文件的复制、删除、重命名了。\n\n下图为前端界面的上传逻辑示意图：\n![upload](/blogs/img/article/shards_upload.jpg)\n\n##### 上传流程描述\n\n1) 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2) 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3）页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作  \n5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置  \n7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态  \n9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成  \n10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n##### Node.js(Electron)端的部分关键代码\n\n1. 初始化一个上传任务\n```js\n/**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件对象]\n    * @param  {[String]} abspath [文件绝对路径]\n    * @param  {[String]} sharename [远程smb共享名]\n    * @param  {[String]} fragsize [分片大小]\n    */\n  init({ host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const date = Date.now();\n    const { pwd, username } = global.ipcMainProcess.userModel.info;\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let remotePath = '';\n    let size = 0;\n\n    return new Promise((resolve) => {\n      // 使用UNC命令连接后端smb共享\n      this.uncCommandConnect({ host, username, pwd, sharename })\n        .then(() => new Promise((reso) => {\n          remotePath = path.join(pre, prefix, file.name);\n          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);\n        }))\n        .then((rsp) => {\n          // 分析绝对文件路径名，然后自动创建所有需要创建的文件夹\n          const dirs = getFileDirs([path.join(prefix, file.name)]);\n          return mkdirs(pre, dirs);\n        })\n        .then((rsp) => {\n          // 打开文件描述符\n          return fileBlock.open(abspath)\n        })\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            // 临时存储文件上传信息在内存中\n            return this._setUploadRecordsInMemory({\n              username,\n              host,\n              filename: path.join(prefix, file.name),\n              size: file.size,\n              fragsize,\n              sharename,\n              abspath,\n              remotePath,\n              startime: getTime(new Date().getTime()), // 上传日期\n              endtime: '',\n              uploadId,\n              index: 0,\n              total: Math.ceil(size / fragsize),\n              status: 'uploading' // 上传状态\n            });\n          } else {\n            resolve(rsp);\n          }\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              uploadId,\n              size,\n              total: Math.ceil(size / fragsize)\n            }\n          });\n        }).catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    });\n  }\n```\n2. 上传文件\n```js\n/**\n    * upload [上传文件]\n    * @param  {[String]} index [分片索引，0为起始值]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  upload({ uploadId, index }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n    if (record.status !== 'uploading') return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { host, filename, size, sharename, fragsize, abspath, username } = record;\n    const pwd = global.ipcMainProcess.userModel.info.pwd;\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const position = fragsize * (index);\n    const slicesize = ((fragsize * (index + 1)) <= size) ? fragsize : (size - fragsize * index);\n\n    return new Promise((resolve) => {\n      if (position > size) {\n        resolve({\n          code: 600,\n          result: lang.upload.upload_index_overflow\n        });\n        return;\n      }\n      // 读取一个文件分片\n      fileBlock.read(abspath, position, slicesize)\n        .then(rsp => {\n          if (rsp.code === 200) {\n            // 递增写入文件\n            fs.appendFile(path.join(pre, filename), rsp.result, { encoding: 'binary' }, (err) => {\n              if (err) {\n                // 排查错误原因\n                checkPermission(path.join(pre, filename, '..'), 'ew', (err2, isExit, canWrite) => {\n                  if (err2) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  } else if (isExit && !canWrite) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.insufficientPermissionUpload\n                    });\n                  } else {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  }\n                });\n              } else {\n                // 更新内存中的文件上传分片信息\n                this._updateUploadRecordsInMemory({ index: (index + 1) }, uploadId);\n                resolve({\n                  code: 200,\n                  result: { filename, uploadId, index, abspath, sharename }\n                });\n              }\n              if (!this._getUploadRecordsInMemory(uploadId) || this._getUploadRecordsInMemory(uploadId).status === 'error') {\n                try {\n                  console.log('--uploading-unlink', path.join(pre, filename));\n                  fs.unlinkSync(path.join(pre, filename));\n                } catch (error) {\n                  console.log(error);\n                }\n              }\n            });\n          } else {\n            resolve(rsp);\n          }\n        })\n        .catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    })\n  }\n```\n3. 完成一个文件上传任务\n```js\n/**\n    * upload [完成上传]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  complete({ uploadId }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { abspath } = record;\n    return new Promise(resolve => {\n      // 更新上传任务状态\n      this._updateUploadRecordsInMemory({ status: 'break', endtime: getTime(new Date().getTime()) }, uploadId);\n      // 关闭文件描述符\n      fileBlock.close(abspath).then(() => {\n        resolve({\n          code: 200,\n          result: uploadId\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    })\n  }\n```\n4. 文件分片读取管理工厂\n文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n#### windows安装包自动化打包配置\n\nwindows安装包使用electron nsis配置，注意使用`.ico`格式的应用图标以免打包失败，package.json中的`build.files`字段声明了需要打包的所有文件，`build.win`是windows平台的打包配置，`build.nsis`是nsis打包的详细配置，运行`npm run build-win`即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本[项目build.js](https://github.com/NoJsJa/electron-react-template/blob/master/build.js)、[electron build.js](https://github.com/NoJsJa/electron-react-template/blob/master/server/build.js)对整个流程进行了整合，`项目build.js`兼顾web打包以及调用`electron build.js`负责Electron App打包，使用`node build.js --help`查看所有打包命令帮助信息。\n\n__node build.js - -help__\n\n```bash\ndescription: build command for RhinoDisk.\n    command: node build.js [action] [config]\n    |\n    |\n    |______ param: [--help | -h ] => show usage info.\n    |______ param: [build-win   ] [--edit | --office] => build package for windows, the default conf file is ./server/config.json.\n    |______ param: [build-linux ] [--edit | --office] => build package for linux, the default conf file is ./server/config.json\n    |______ param: [build-mac   ] [--edit | --office] => build package for mac, the default conf file is ./server/config.json\n    |______ param: [build-all   ] [--edit | --office] => build package for all platform, the default conf file is ./server/config.json\n    |______ param: [clean-build ] => clean build directory after build\n    |\n    |______ example1: node build.js build-win\n    |______ example2: node build.js build-linux\n    |______ example3: node build.js build-mac\n    |______ example4: node build.js build-all\n    |______ example5: node build.js build-win --edit\n    |______ example6: node build.js build-win --office\n    |______ example7: node build.js --help\n    |______ example8: node build.js clean-build\n```\n\n__package.json：__\n```js\n{\n  \"name\": \"RhinoDisk\",\n  \"version\": \"1.0.0\",\n  \"description\": \"SMB management client\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    ...\n    \"build-win\": \"electron-builder --win\",\n    ...\n  },\n  \"devDependencies\": {\n    ...\n  },\n  \"dependencies\": {\n    ...\n  },\n  \"build\": {\n    \"productName\": \"RhinoDisk\",\n    \"appId\": \"org.datatom.rhinodisk\",\n    \"asar\": false,\n    \"copyright\": \"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\",\n    \"directories\": {\n      \"buildResources\": \"build\",\n      \"output\": \"build\"\n    },\n    \"files\": [\n      \"package.json\",\n      \"config.json\",\n      \"index.js\",\n      \"dist/\",\n      \"app/\",\n      \"node_modules/\",\n      \"resources/*.*\"\n    ],\n    \"win\": {\n      \"icon\": \"build/iconx256.ico\",\n      \"target\": [\n        {\n          \"target\": \"zip\"\n        },\n        {\n          \"target\": \"nsis\",\n          \"arch\": [\n            \"x64\"\n          ]\n        }\n      ]\n    },\n    \"nsis\": {\n      \"oneClick\": false,\n      \"allowElevation\": true,\n      \"allowToChangeInstallationDirectory\": true,\n      \"installerIcon\": \"./build/iconx256.ico\",\n      \"uninstallerIcon\": \"./build/iconx256.ico\",\n      \"installerHeaderIcon\": \"./build/iconx256.ico\",\n      \"createDesktopShortcut\": true,\n      \"createStartMenuShortcut\": true,\n      \"deleteAppDataOnUninstall\": true,\n      \"shortcutName\": \"RhinoDisk\"\n    }\n  }\n}\n\n```\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","source":"_posts/基于Electron的smb客户端开发记录.md","raw":"---\ntitle: \"基于Electron的smb客户端开发记录\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-07-17 15:59:00\nsubtitle: \"smb samba client\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- smb\ncategories:\n- Electron\nupdateDate: 2020-07-3 15:59:00\ntop: 1\n---\n\n\n### 前言\n---------------\n最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库[lowdb](https://github.com/typicode/lowdb)。\n\n项目精简版[DEMO]展示(https://github.com/NoJsJa/electron-react-template)\n\n### 功能需求\n---------------\n\n#### 集群节点管理\n\n1. 客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作\n2. 支持设置默认节点操作用于自动登录功能\n3. 添加节点的时候要进行ping逻辑判断目标节点是否可用\n4. 调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表\n\n需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。\n\n![RhinoDisk](/blogs/img/article/smb_node.jpg)\n\n![RhinoDisk](/blogs/img/article/smb_node_conf.jpg)\n\n#### 集群用户登录\n\n1. 支持已登录过客户端的用户自动下拉提示\n2. 支持已记住密码的用户自动填充密码到输入框\n3. 如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板\n\n需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。\n\n![RhinoDisk](/blogs/img/article/smb_login.jpg)\n\n#### 远程共享目录挂载\n\n1. windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作\n2. 选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z\n\n需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。\n\n![RhinoDisk](/blogs/img/article/smb_share.jpg)\n![RhinoDisk](/blogs/img/article/smb_share_mount.jpg)\n\n#### 文件上传管理\n\n1. 文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。\n2. 在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。\n3. 任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。\n4. 切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。\n\n需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。\n\n![RhinoDisk](/blogs/img/article/smb_upload_now.jpg)\n![RhinoDisk](/blogs/img/article/smb_upload_record.jpg)\n\n### 实现难点\n-----------\n\n#### 多语言功能实现\n\n总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。\n\n![lang](/blogs/img/article/electron-lang.png)\n\n```js\nconst fs = require('fs');\nconst path = require('path');\nconst { app } = require('electron');\n\n/**\n * global.lang -- 内存里保存的所有语言数据\n * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)\n * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)\n * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步\n */\nconst lang = (function lang() {\n  const defaultLang = 'zh_CN';\n\n  /* ------------------- 获取统一的语言环境标识 ------------------- */\n  const getLANG = (acceptLang) => {\n    // 英语\n    if (['en-US', 'en', 'en-us', 'en_us', 'en_US'].indexOf(acceptLang) !== -1) {\n      return 'en_us';\n    }\n    // 中文简体\n    if (['zh-CN', 'zh', 'zh-cn', 'zh_cn', 'zh_CN'].indexOf(acceptLang) !== -1) {\n      return 'zh_cn';\n    } if (['zh-TW', 'zh-tw', 'zh_tw', 'zh_TW'].indexOf(acceptLang) !== -1) {\n      return 'zh_tw';\n    // 默认中文简体\n    }\n    return 'zh_cn';\n  };\n\n  /* ------------------- 加载语言文件 ------------------- */\n  const setLang = (langEnv) => {\n    global.lang = global.lang ? global.lang : {};\n    global.LANG = langEnv;\n\n    // 读取文件夹的语言配置文件写入全局配置\n    fs.readdir(path.join(app.getAppPath(), 'app/lang', langEnv), (err, files) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      files.forEach((file) => {\n        global.lang[path.basename(file)] = require(path.join(app.getAppPath(), 'app/lang', langEnv, file));\n      });\n    });\n  };\n\n  return (acceptLang) => {\n    const _lang = getLANG(acceptLang || defaultLang);\n    if (global.LANG && global.LANG == _lang) {\n      return;\n    }\n    // 设置目前的语言环境\n    setLang(_lang);\n  };\n}());\n\nmodule.exports = lang;\n\n```\n\n#### 托盘功能的实现\n\n使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。\n\n```js\ncontextMenu() {\n    global.appTray = new Tray(path.join(app.getAppPath(), os.type() === 'Windows_NT' ? `resources/icon_${this.envConf.work_env}.ico` : 'resources/mac_tray.png'));\n    const menu = Menu.buildFromTemplate( [\n      {\n          label: global.lang.public.quit,\n          type: 'normal',\n          click: () => {\n            this.sendToWeb('upload', {action: 'getUploadingTask'});\n            ipcMainProcess.ipc.once('upload-getUploadingTask', (event, rsp) => {\n              if (rsp.code === 200) {\n\n                  global.ipcMainWindow.sendToWeb('shell', { action: 'upload-clear' });\n                  .then(() => {\n                    global.appTray.destroy();\n                    app.quit();\n                  }).catch(() => {\n                    global.ipcMainProcess.notifySend({\n                      body: global.lang.public['data_write_failed_before_quit']\n                    });\n                  });\n                };\n                \n                if (rsp.result !== 0) {\n                  const buttonId = dialog.showMessageBoxSync(this.windowoptions, {\n                    defaultId: 0,\n                    buttons: ['No', 'Yes'],\n                    type: 'info',\n                    title: global.lang.public.tips,\n                    message: global.lang.upload.app_quit_tips\n                  });\n                  if (buttonId === 1) quitApp();\n                } else {\n                  quitApp();\n                }\n                \n              } else {\n                global.ipcMainProcess.notifySend({\n                  body: rsp.result\n                });\n              }\n            });\n          }\n        }\n    ]);\n\n    global.appTray.on('click', ()=>{    \n      this.window.show();\n    });\n    global.appTray.setToolTip('RninoDisk');\n    global.appTray.setContextMenu(menu);\n  }\n```\n\n#### Node执行操作系统命令\n\n1. 通用的系统命令执行函数(日志输出阻塞版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。\n```js\nconst child = require('child_process');\n/**\n   * [exec 执行一个命令，阻塞输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\nexports.exec = (_command, _params=[], _options={}) => {\n  const params = Array.isArray(_params) ? _params.join(' ') : '';\n  const options = (String(_params) === '[object Object]') ? _params : (_options);\n  const command = `${_command} ${params}`;\n  \n  console.log(params, options, command);\n\n  return new Promise((resolve, reject) => {\n    child.exec(command, options, (_err, _stdout, _stderr) => {\n      if (_err) {\n        exports.console_log(_err, 'red');\n        resolve({code: 1, result: _err});\n      } else if (_stderr && _stderr.toString()) {\n        exports.console_log(_stderr, 'red');\n        resolve({code: 1, result: _stderr});\n      } else {\n        console.log(_stdout);\n        resolve({code: 0, result: _stdout});\n      }\n    });\n  });\n}\n```\n\n2. 通用的系统命令执行函数(日志同步输出版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。\n```js\n  const child = require('child_process');\n  /**\n   * [execRealtime 执行一个命令，实时输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\n  exports.execRealtime = (_command, _params=[], _options={}) => {\n    const params = Array.isArray(_params) ? _params.join(' ') : '';\n    const options = (String(_params) === '[object Object]') ? _params : (_options);\n    const command = `${_command} ${params}`;\n    let data = '', error = '';\n    \n    console.log(params, options, command);\n  \n    return new Promise((resolve, reject) => {\n      const result = child.exec(command, options);\n      \n      result.stdout.on('data', (data) => {\n        exports.console_log(data, 'white');\n        data += `${data}`;\n      });\n\n      result.stderr.on('data', (data) => {\n        exports.console_log(data, 'red');\n        error += `${data}`;\n      });\n\n      result.on('close', (code) => {\n        resolve({code, result: data, error});\n      });\n    });\n  }\n\n```\n\n#### 远程共享目录挂载\n\n1. 获取空闲盘符和已经挂载盘符\n```js\n/**\n    * getSystemDriveLetter [获取系统已经挂载的磁盘]\n    * @return {[Array]} [盘符列表]\n    */\n  getSystemDriveLetter() {\n    return new Promise((resolve) => {\n      this.sudo.exec('fsutil fsinfo drives', [], { encoding: 'buffer' }).then((stdout) => {\n        const driverstr = stdout;\n        const driverstrArr = driverstr.split(' ').filter(s => s !== os.EOL).map(s => s.replace('\\\\', ''));\n        const allDrivers = [\n          'C:', 'D:', 'E:', 'F:', 'G:', 'H:', 'I:', 'J:', 'K:', 'L:',\n          'M:', 'N:', 'O:', 'P:', 'Q:', 'R:', 'S:', 'T:', 'U:', 'V:',\n          'W:', 'X:', 'Y:', 'Z:'\n        ];\n        driverstrArr.shift();\n        resolve({\n          code: 200,\n          result: {\n            mounted: driverstrArr,\n            available: allDrivers.filter(d => !driverstrArr.includes(d.toLocaleUpperCase()))\n          },\n        })\n      }, (err) => {\n        console.error(err);\n        resolve({\n          code: 600,\n          result: err,\n        });\n      });\n    })\n  }\n```\n\n2. 通过UNC命令对远程共享进行挂载\n```js\n/* 挂载共享 */\n_mountSystemDriver_Windows_NT({ host, driver, path, auto = false }) {\n    const pwd = global.ipcMainProcess.userModel.get('last.pwd');\n    const { isThirdUser, nickname, isLocalUser, username } = global.ipcMainProcess.userModel.info;\n    const commandUseIPC = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    const commandMount = `net use ${driver} \\\\\\\\${host}\\\\${path} \"${pwd}\" /user:\"${username}\"`;\n    const commandUmount = `net use ${driver} /del /y`;\n\n    return new Promise((resolve, reject) => {\n      // 获取系统已经挂载的磁盘和空闲的磁盘\n      this.getSystemDriveLetter()\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            if (rsp.result.mounted.includes(driver.toLocaleUpperCase())) {\n              throw new Error(global.lang.node.driver_already_mount);\n            }\n          } else {\n            throw new Error(global.lang.node.get_system_mount_info_failed);\n          }\n        })\n        // 尝试UNC连接\n        .then(() => {\n          return this.sudo.exec(commandUseIPC);\n        })\n        // 执行挂载命令\n        .then(() => {\n          return this.sudo.exec(commandMount);\n        })\n        // 更新数据\n        .then(() => {\n          return this.update('mountPoint', { username, host, path }, {\n            username, host, path, driver, auto\n          });\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              username, host, driver\n            },\n          });\n        }).catch((err) => {\n          console.error(err, err.toString());\n          resolve({\n            code: 600,\n            result: global.lang.node.net_mount_failed_reason,\n          });\n        });\n    });\n  }\n```\n\n#### 文件上传管理\n\n前端界面沿用之前的AWS对象存储文件上传管理逻辑[基于s3对象存储多文件分片上传的Javascript实现(一)](https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/)，不同的地方是加入了`历史任务`功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如`\\\\[host]\\[sharename]\\file1`，这样子文件上传就变成本地目录文件的复制、删除、重命名了。\n\n下图为前端界面的上传逻辑示意图：\n![upload](/blogs/img/article/shards_upload.jpg)\n\n##### 上传流程描述\n\n1) 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2) 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3）页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作  \n5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置  \n7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态  \n9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成  \n10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n##### Node.js(Electron)端的部分关键代码\n\n1. 初始化一个上传任务\n```js\n/**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件对象]\n    * @param  {[String]} abspath [文件绝对路径]\n    * @param  {[String]} sharename [远程smb共享名]\n    * @param  {[String]} fragsize [分片大小]\n    */\n  init({ host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const date = Date.now();\n    const { pwd, username } = global.ipcMainProcess.userModel.info;\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let remotePath = '';\n    let size = 0;\n\n    return new Promise((resolve) => {\n      // 使用UNC命令连接后端smb共享\n      this.uncCommandConnect({ host, username, pwd, sharename })\n        .then(() => new Promise((reso) => {\n          remotePath = path.join(pre, prefix, file.name);\n          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);\n        }))\n        .then((rsp) => {\n          // 分析绝对文件路径名，然后自动创建所有需要创建的文件夹\n          const dirs = getFileDirs([path.join(prefix, file.name)]);\n          return mkdirs(pre, dirs);\n        })\n        .then((rsp) => {\n          // 打开文件描述符\n          return fileBlock.open(abspath)\n        })\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            // 临时存储文件上传信息在内存中\n            return this._setUploadRecordsInMemory({\n              username,\n              host,\n              filename: path.join(prefix, file.name),\n              size: file.size,\n              fragsize,\n              sharename,\n              abspath,\n              remotePath,\n              startime: getTime(new Date().getTime()), // 上传日期\n              endtime: '',\n              uploadId,\n              index: 0,\n              total: Math.ceil(size / fragsize),\n              status: 'uploading' // 上传状态\n            });\n          } else {\n            resolve(rsp);\n          }\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              uploadId,\n              size,\n              total: Math.ceil(size / fragsize)\n            }\n          });\n        }).catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    });\n  }\n```\n2. 上传文件\n```js\n/**\n    * upload [上传文件]\n    * @param  {[String]} index [分片索引，0为起始值]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  upload({ uploadId, index }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n    if (record.status !== 'uploading') return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { host, filename, size, sharename, fragsize, abspath, username } = record;\n    const pwd = global.ipcMainProcess.userModel.info.pwd;\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const position = fragsize * (index);\n    const slicesize = ((fragsize * (index + 1)) <= size) ? fragsize : (size - fragsize * index);\n\n    return new Promise((resolve) => {\n      if (position > size) {\n        resolve({\n          code: 600,\n          result: lang.upload.upload_index_overflow\n        });\n        return;\n      }\n      // 读取一个文件分片\n      fileBlock.read(abspath, position, slicesize)\n        .then(rsp => {\n          if (rsp.code === 200) {\n            // 递增写入文件\n            fs.appendFile(path.join(pre, filename), rsp.result, { encoding: 'binary' }, (err) => {\n              if (err) {\n                // 排查错误原因\n                checkPermission(path.join(pre, filename, '..'), 'ew', (err2, isExit, canWrite) => {\n                  if (err2) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  } else if (isExit && !canWrite) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.insufficientPermissionUpload\n                    });\n                  } else {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  }\n                });\n              } else {\n                // 更新内存中的文件上传分片信息\n                this._updateUploadRecordsInMemory({ index: (index + 1) }, uploadId);\n                resolve({\n                  code: 200,\n                  result: { filename, uploadId, index, abspath, sharename }\n                });\n              }\n              if (!this._getUploadRecordsInMemory(uploadId) || this._getUploadRecordsInMemory(uploadId).status === 'error') {\n                try {\n                  console.log('--uploading-unlink', path.join(pre, filename));\n                  fs.unlinkSync(path.join(pre, filename));\n                } catch (error) {\n                  console.log(error);\n                }\n              }\n            });\n          } else {\n            resolve(rsp);\n          }\n        })\n        .catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    })\n  }\n```\n3. 完成一个文件上传任务\n```js\n/**\n    * upload [完成上传]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  complete({ uploadId }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { abspath } = record;\n    return new Promise(resolve => {\n      // 更新上传任务状态\n      this._updateUploadRecordsInMemory({ status: 'break', endtime: getTime(new Date().getTime()) }, uploadId);\n      // 关闭文件描述符\n      fileBlock.close(abspath).then(() => {\n        resolve({\n          code: 200,\n          result: uploadId\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    })\n  }\n```\n4. 文件分片读取管理工厂\n文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n#### windows安装包自动化打包配置\n\nwindows安装包使用electron nsis配置，注意使用`.ico`格式的应用图标以免打包失败，package.json中的`build.files`字段声明了需要打包的所有文件，`build.win`是windows平台的打包配置，`build.nsis`是nsis打包的详细配置，运行`npm run build-win`即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本[项目build.js](https://github.com/NoJsJa/electron-react-template/blob/master/build.js)、[electron build.js](https://github.com/NoJsJa/electron-react-template/blob/master/server/build.js)对整个流程进行了整合，`项目build.js`兼顾web打包以及调用`electron build.js`负责Electron App打包，使用`node build.js --help`查看所有打包命令帮助信息。\n\n__node build.js - -help__\n\n```bash\ndescription: build command for RhinoDisk.\n    command: node build.js [action] [config]\n    |\n    |\n    |______ param: [--help | -h ] => show usage info.\n    |______ param: [build-win   ] [--edit | --office] => build package for windows, the default conf file is ./server/config.json.\n    |______ param: [build-linux ] [--edit | --office] => build package for linux, the default conf file is ./server/config.json\n    |______ param: [build-mac   ] [--edit | --office] => build package for mac, the default conf file is ./server/config.json\n    |______ param: [build-all   ] [--edit | --office] => build package for all platform, the default conf file is ./server/config.json\n    |______ param: [clean-build ] => clean build directory after build\n    |\n    |______ example1: node build.js build-win\n    |______ example2: node build.js build-linux\n    |______ example3: node build.js build-mac\n    |______ example4: node build.js build-all\n    |______ example5: node build.js build-win --edit\n    |______ example6: node build.js build-win --office\n    |______ example7: node build.js --help\n    |______ example8: node build.js clean-build\n```\n\n__package.json：__\n```js\n{\n  \"name\": \"RhinoDisk\",\n  \"version\": \"1.0.0\",\n  \"description\": \"SMB management client\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    ...\n    \"build-win\": \"electron-builder --win\",\n    ...\n  },\n  \"devDependencies\": {\n    ...\n  },\n  \"dependencies\": {\n    ...\n  },\n  \"build\": {\n    \"productName\": \"RhinoDisk\",\n    \"appId\": \"org.datatom.rhinodisk\",\n    \"asar\": false,\n    \"copyright\": \"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\",\n    \"directories\": {\n      \"buildResources\": \"build\",\n      \"output\": \"build\"\n    },\n    \"files\": [\n      \"package.json\",\n      \"config.json\",\n      \"index.js\",\n      \"dist/\",\n      \"app/\",\n      \"node_modules/\",\n      \"resources/*.*\"\n    ],\n    \"win\": {\n      \"icon\": \"build/iconx256.ico\",\n      \"target\": [\n        {\n          \"target\": \"zip\"\n        },\n        {\n          \"target\": \"nsis\",\n          \"arch\": [\n            \"x64\"\n          ]\n        }\n      ]\n    },\n    \"nsis\": {\n      \"oneClick\": false,\n      \"allowElevation\": true,\n      \"allowToChangeInstallationDirectory\": true,\n      \"installerIcon\": \"./build/iconx256.ico\",\n      \"uninstallerIcon\": \"./build/iconx256.ico\",\n      \"installerHeaderIcon\": \"./build/iconx256.ico\",\n      \"createDesktopShortcut\": true,\n      \"createStartMenuShortcut\": true,\n      \"deleteAppDataOnUninstall\": true,\n      \"shortcutName\": \"RhinoDisk\"\n    }\n  }\n}\n\n```\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","slug":"基于Electron的smb客户端开发记录","published":1,"updated":"2020-08-25T05:51:24.958Z","_id":"ckdwniq7k00080gi0gf8a2zgq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr><p>最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库<a href=\"https://github.com/typicode/lowdb\" target=\"_blank\" rel=\"noopener\">lowdb</a>。</p><p>项目精简版[DEMO]展示(<a href=\"https://github.com/NoJsJa/electron-react-template\" target=\"_blank\" rel=\"noopener\">https://github.com/NoJsJa/electron-react-template</a>)</p><h3 id=\"功能需求\"><a href=\"#功能需求\" class=\"headerlink\" title=\"功能需求\"></a>功能需求</h3><hr><h4 id=\"集群节点管理\"><a href=\"#集群节点管理\" class=\"headerlink\" title=\"集群节点管理\"></a>集群节点管理</h4><ol><li>客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作</li><li>支持设置默认节点操作用于自动登录功能</li><li>添加节点的时候要进行ping逻辑判断目标节点是否可用</li><li>调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表</li></ol><p>需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。</p><p><img src=\"/blogs/img/article/smb_node.jpg\" alt=\"RhinoDisk\"></p><p><img src=\"/blogs/img/article/smb_node_conf.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"集群用户登录\"><a href=\"#集群用户登录\" class=\"headerlink\" title=\"集群用户登录\"></a>集群用户登录</h4><ol><li>支持已登录过客户端的用户自动下拉提示</li><li>支持已记住密码的用户自动填充密码到输入框</li><li>如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板</li></ol><p>需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。</p><p><img src=\"/blogs/img/article/smb_login.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"远程共享目录挂载\"><a href=\"#远程共享目录挂载\" class=\"headerlink\" title=\"远程共享目录挂载\"></a>远程共享目录挂载</h4><ol><li>windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作</li><li>选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z</li></ol><p>需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。</p><p><img src=\"/blogs/img/article/smb_share.jpg\" alt=\"RhinoDisk\"><br><img src=\"/blogs/img/article/smb_share_mount.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"文件上传管理\"><a href=\"#文件上传管理\" class=\"headerlink\" title=\"文件上传管理\"></a>文件上传管理</h4><ol><li>文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。</li><li>在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。</li><li>任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。</li><li>切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。</li></ol><p>需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。</p><p><img src=\"/blogs/img/article/smb_upload_now.jpg\" alt=\"RhinoDisk\"><br><img src=\"/blogs/img/article/smb_upload_record.jpg\" alt=\"RhinoDisk\"></p><h3 id=\"实现难点\"><a href=\"#实现难点\" class=\"headerlink\" title=\"实现难点\"></a>实现难点</h3><hr><h4 id=\"多语言功能实现\"><a href=\"#多语言功能实现\" class=\"headerlink\" title=\"多语言功能实现\"></a>多语言功能实现</h4><p>总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。</p><p><img src=\"/blogs/img/article/electron-lang.png\" alt=\"lang\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * global.lang -- 内存里保存的所有语言数据</span></span><br><span class=\"line\"><span class=\"comment\"> * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)</span></span><br><span class=\"line\"><span class=\"comment\"> * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)</span></span><br><span class=\"line\"><span class=\"comment\"> * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lang = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lang</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLang = <span class=\"string\">'zh_CN'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 获取统一的语言环境标识 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getLANG = <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 英语</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'en-US'</span>, <span class=\"string\">'en'</span>, <span class=\"string\">'en-us'</span>, <span class=\"string\">'en_us'</span>, <span class=\"string\">'en_US'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'en_us'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 中文简体</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-CN'</span>, <span class=\"string\">'zh'</span>, <span class=\"string\">'zh-cn'</span>, <span class=\"string\">'zh_cn'</span>, <span class=\"string\">'zh_CN'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-TW'</span>, <span class=\"string\">'zh-tw'</span>, <span class=\"string\">'zh_tw'</span>, <span class=\"string\">'zh_TW'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_tw'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认中文简体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 加载语言文件 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setLang = <span class=\"function\">(<span class=\"params\">langEnv</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    global.lang = global.lang ? global.lang : &#123;&#125;;</span><br><span class=\"line\">    global.LANG = langEnv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取文件夹的语言配置文件写入全局配置</span></span><br><span class=\"line\">    fs.readdir(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv), (err, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        global.lang[path.basename(file)] = <span class=\"built_in\">require</span>(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv, file));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _lang = getLANG(acceptLang || defaultLang);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (global.LANG &amp;&amp; global.LANG == _lang) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置目前的语言环境</span></span><br><span class=\"line\">    setLang(_lang);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = lang;</span><br></pre></td></tr></table></figure><h4 id=\"托盘功能的实现\"><a href=\"#托盘功能的实现\" class=\"headerlink\" title=\"托盘功能的实现\"></a>托盘功能的实现</h4><p>使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contextMenu() &#123;</span><br><span class=\"line\">    global.appTray = <span class=\"keyword\">new</span> Tray(path.join(app.getAppPath(), os.type() === <span class=\"string\">'Windows_NT'</span> ? <span class=\"string\">`resources/icon_<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.envConf.work_env&#125;</span>.ico`</span> : <span class=\"string\">'resources/mac_tray.png'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> menu = Menu.buildFromTemplate( [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          label: global.lang.public.quit,</span><br><span class=\"line\">          type: <span class=\"string\">'normal'</span>,</span><br><span class=\"line\">          click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.sendToWeb(<span class=\"string\">'upload'</span>, &#123;<span class=\"attr\">action</span>: <span class=\"string\">'getUploadingTask'</span>&#125;);</span><br><span class=\"line\">            ipcMainProcess.ipc.once(<span class=\"string\">'upload-getUploadingTask'</span>, (event, rsp) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                  global.ipcMainWindow.sendToWeb(<span class=\"string\">'shell'</span>, &#123; <span class=\"attr\">action</span>: <span class=\"string\">'upload-clear'</span> &#125;);</span><br><span class=\"line\">                  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.appTray.destroy();</span><br><span class=\"line\">                    app.quit();</span><br><span class=\"line\">                  &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                      body: global.lang.public[<span class=\"string\">'data_write_failed_before_quit'</span>]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rsp.result !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">const</span> buttonId = dialog.showMessageBoxSync(<span class=\"keyword\">this</span>.windowoptions, &#123;</span><br><span class=\"line\">                    defaultId: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    buttons: [<span class=\"string\">'No'</span>, <span class=\"string\">'Yes'</span>],</span><br><span class=\"line\">                    type: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">                    title: global.lang.public.tips,</span><br><span class=\"line\">                    message: global.lang.upload.app_quit_tips</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (buttonId === <span class=\"number\">1</span>) quitApp();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  quitApp();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                  body: rsp.result</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    global.appTray.on(<span class=\"string\">'click'</span>, ()=&gt;&#123;    </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.window.show();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    global.appTray.setToolTip(<span class=\"string\">'RninoDisk'</span>);</span><br><span class=\"line\">    global.appTray.setContextMenu(menu);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"Node执行操作系统命令\"><a href=\"#Node执行操作系统命令\" class=\"headerlink\" title=\"Node执行操作系统命令\"></a>Node执行操作系统命令</h4><ol><li><p>通用的系统命令执行函数(日志输出阻塞版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [exec 执行一个命令，阻塞输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">exports.exec = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    child.exec(command, options, (_err, _stdout, _stderr) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_err) &#123;</span><br><span class=\"line\">        exports.console_log(_err, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _err&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_stderr &amp;&amp; _stderr.toString()) &#123;</span><br><span class=\"line\">        exports.console_log(_stderr, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _stderr&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(_stdout);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">result</span>: _stdout&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通用的系统命令执行函数(日志同步输出版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [execRealtime 执行一个命令，实时输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.execRealtime = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>, error = <span class=\"string\">''</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = child.exec(command, options);</span><br><span class=\"line\">    </span><br><span class=\"line\">    result.stdout.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'white'</span>);</span><br><span class=\"line\">      data += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.stderr.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">      error += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.on(<span class=\"string\">'close'</span>, (code) =&gt; &#123;</span><br><span class=\"line\">      resolve(&#123;code, <span class=\"attr\">result</span>: data, error&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"远程共享目录挂载-1\"><a href=\"#远程共享目录挂载-1\" class=\"headerlink\" title=\"远程共享目录挂载\"></a>远程共享目录挂载</h4><ol><li><p>获取空闲盘符和已经挂载盘符</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * getSystemDriveLetter [获取系统已经挂载的磁盘]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return <span class=\"type\">&#123;[Array]&#125;</span> </span>[盘符列表]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  getSystemDriveLetter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(<span class=\"string\">'fsutil fsinfo drives'</span>, [], &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'buffer'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">stdout</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstr = stdout;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstrArr = driverstr.split(<span class=\"string\">' '</span>).filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s !== os.EOL).map(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> allDrivers = [</span><br><span class=\"line\">          <span class=\"string\">'C:'</span>, <span class=\"string\">'D:'</span>, <span class=\"string\">'E:'</span>, <span class=\"string\">'F:'</span>, <span class=\"string\">'G:'</span>, <span class=\"string\">'H:'</span>, <span class=\"string\">'I:'</span>, <span class=\"string\">'J:'</span>, <span class=\"string\">'K:'</span>, <span class=\"string\">'L:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'M:'</span>, <span class=\"string\">'N:'</span>, <span class=\"string\">'O:'</span>, <span class=\"string\">'P:'</span>, <span class=\"string\">'Q:'</span>, <span class=\"string\">'R:'</span>, <span class=\"string\">'S:'</span>, <span class=\"string\">'T:'</span>, <span class=\"string\">'U:'</span>, <span class=\"string\">'V:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'W:'</span>, <span class=\"string\">'X:'</span>, <span class=\"string\">'Y:'</span>, <span class=\"string\">'Z:'</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\">        driverstrArr.shift();</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            mounted: driverstrArr,</span><br><span class=\"line\">            available: allDrivers.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> !driverstrArr.includes(d.toLocaleUpperCase()))</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过UNC命令对远程共享进行挂载</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 挂载共享 */</span></span><br><span class=\"line\">_mountSystemDriver_Windows_NT(&#123; host, driver, path, auto = <span class=\"literal\">false</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.get(<span class=\"string\">'last.pwd'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUseIPC = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandMount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;path&#125;</span> \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUmount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> /del /y`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取系统已经挂载的磁盘和空闲的磁盘</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getSystemDriveLetter()</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rsp.result.mounted.includes(driver.toLocaleUpperCase())) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.driver_already_mount);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.get_system_mount_info_failed);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 尝试UNC连接</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandUseIPC);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 执行挂载命令</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandMount);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.update(<span class=\"string\">'mountPoint'</span>, &#123; username, host, path &#125;, &#123;</span><br><span class=\"line\">            username, host, path, driver, auto</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              username, host, driver</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.error(err, err.toString());</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: global.lang.node.net_mount_failed_reason,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"文件上传管理-1\"><a href=\"#文件上传管理-1\" class=\"headerlink\" title=\"文件上传管理\"></a>文件上传管理</h4><p>前端界面沿用之前的AWS对象存储文件上传管理逻辑<a href=\"https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>，不同的地方是加入了<code>历史任务</code>功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如<code>\\\\[host]\\[sharename]\\file1</code>，这样子文件上传就变成本地目录文件的复制、删除、重命名了。</p><p>下图为前端界面的上传逻辑示意图：<br><img src=\"/blogs/img/article/shards_upload.jpg\" alt=\"upload\"></p><h5 id=\"上传流程描述\"><a href=\"#上传流程描述\" class=\"headerlink\" title=\"上传流程描述\"></a>上传流程描述</h5><p>1) 页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)<br>2) 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息<br>3）页面调用init请求附带上选中的文件信息初始化文件上传任务<br>4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作<br>5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)<br>6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置<br>7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID<br>8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态<br>9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成<br>10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</p><h5 id=\"Node-js-Electron-端的部分关键代码\"><a href=\"#Node-js-Electron-端的部分关键代码\" class=\"headerlink\" title=\"Node.js(Electron)端的部分关键代码\"></a>Node.js(Electron)端的部分关键代码</h5><ol><li>初始化一个上传任务<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [文件绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [远程smb共享名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  init(&#123; host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; pwd, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remotePath = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用UNC命令连接后端smb共享</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.uncCommandConnect(&#123; host, username, pwd, sharename &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          remotePath = path.join(pre, prefix, file.name);</span><br><span class=\"line\">          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 分析绝对文件路径名，然后自动创建所有需要创建的文件夹</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> dirs = getFileDirs([path.join(prefix, file.name)]);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> mkdirs(pre, dirs);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> fileBlock.open(abspath)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 临时存储文件上传信息在内存中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._setUploadRecordsInMemory(&#123;</span><br><span class=\"line\">              username,</span><br><span class=\"line\">              host,</span><br><span class=\"line\">              filename: path.join(prefix, file.name),</span><br><span class=\"line\">              size: file.size,</span><br><span class=\"line\">              fragsize,</span><br><span class=\"line\">              sharename,</span><br><span class=\"line\">              abspath,</span><br><span class=\"line\">              remotePath,</span><br><span class=\"line\">              startime: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">              endtime: <span class=\"string\">''</span>,</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              index: <span class=\"number\">0</span>,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">              status: <span class=\"string\">'uploading'</span> <span class=\"comment\">// 上传状态</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              size,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li>上传文件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [上传文件]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>index [分片索引，0为起始值]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  upload(&#123; uploadId, index &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record.status !== <span class=\"string\">'uploading'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; host, filename, size, sharename, fragsize, abspath, username &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.info.pwd;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = fragsize * (index);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slicesize = ((fragsize * (index + <span class=\"number\">1</span>)) &lt;= size) ? fragsize : (size - fragsize * index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position &gt; size) &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: lang.upload.upload_index_overflow</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 读取一个文件分片</span></span><br><span class=\"line\">      fileBlock.read(abspath, position, slicesize)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 递增写入文件</span></span><br><span class=\"line\">            fs.appendFile(path.join(pre, filename), rsp.result, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'binary'</span> &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 排查错误原因</span></span><br><span class=\"line\">                checkPermission(path.join(pre, filename, <span class=\"string\">'..'</span>), <span class=\"string\">'ew'</span>, (err2, isExit, canWrite) =&gt; &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (err2) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isExit &amp;&amp; !canWrite) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.insufficientPermissionUpload</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 更新内存中的文件上传分片信息</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">index</span>: (index + <span class=\"number\">1</span>) &#125;, uploadId);</span><br><span class=\"line\">                resolve(&#123;</span><br><span class=\"line\">                  code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                  result: &#123; filename, uploadId, index, abspath, sharename &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId) || <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId).status === <span class=\"string\">'error'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">'--uploading-unlink'</span>, path.join(pre, filename));</span><br><span class=\"line\">                  fs.unlinkSync(path.join(pre, filename));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li>完成一个文件上传任务<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  complete(&#123; uploadId &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; abspath &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新上传任务状态</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">status</span>: <span class=\"string\">'break'</span>, <span class=\"attr\">endtime</span>: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()) &#125;, uploadId);</span><br><span class=\"line\">      <span class=\"comment\">// 关闭文件描述符</span></span><br><span class=\"line\">      fileBlock.close(abspath).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: uploadId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err.toString()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li>文件分片读取管理工厂<br>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"windows安装包自动化打包配置\"><a href=\"#windows安装包自动化打包配置\" class=\"headerlink\" title=\"windows安装包自动化打包配置\"></a>windows安装包自动化打包配置</h4><p>windows安装包使用electron nsis配置，注意使用<code>.ico</code>格式的应用图标以免打包失败，package.json中的<code>build.files</code>字段声明了需要打包的所有文件，<code>build.win</code>是windows平台的打包配置，<code>build.nsis</code>是nsis打包的详细配置，运行<code>npm run build-win</code>即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本<a href=\"https://github.com/NoJsJa/electron-react-template/blob/master/build.js\" target=\"_blank\" rel=\"noopener\">项目build.js</a>、<a href=\"https://github.com/NoJsJa/electron-react-template/blob/master/server/build.js\" target=\"_blank\" rel=\"noopener\">electron build.js</a>对整个流程进行了整合，<code>项目build.js</code>兼顾web打包以及调用<code>electron build.js</code>负责Electron App打包，使用<code>node build.js --help</code>查看所有打包命令帮助信息。</p><p><strong>node build.js - -help</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">description: build <span class=\"built_in\">command</span> <span class=\"keyword\">for</span> RhinoDisk.</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: node build.js [action] [config]</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ param: [--<span class=\"built_in\">help</span> | -h ] =&gt; show usage info.</span><br><span class=\"line\">    |______ param: [build-win   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> windows, the default conf file is ./server/config.json.</span><br><span class=\"line\">    |______ param: [build-linux ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> linux, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-mac   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> mac, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-all   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> all platform, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [clean-build ] =&gt; clean build directory after build</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ example1: node build.js build-win</span><br><span class=\"line\">    |______ example2: node build.js build-linux</span><br><span class=\"line\">    |______ example3: node build.js build-mac</span><br><span class=\"line\">    |______ example4: node build.js build-all</span><br><span class=\"line\">    |______ example5: node build.js build-win --edit</span><br><span class=\"line\">    |______ example6: node build.js build-win --office</span><br><span class=\"line\">    |______ example7: node build.js --<span class=\"built_in\">help</span></span><br><span class=\"line\">    |______ example8: node build.js clean-build</span><br></pre></td></tr></table></figure><p><strong>package.json：</strong><br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"SMB management client\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"build-win\"</span>: <span class=\"string\">\"electron-builder --win\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"productName\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"appId\"</span>: <span class=\"string\">\"org.datatom.rhinodisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"directories\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"buildResources\"</span>: <span class=\"string\">\"build\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"output\"</span>: <span class=\"string\">\"build\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"files\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"config.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"resources/*.*\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"win\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"icon\"</span>: <span class=\"string\">\"build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"zip\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"nsis\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"arch\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"x64\"</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"nsis\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"oneClick\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowElevation\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowToChangeInstallationDirectory\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"uninstallerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerHeaderIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createDesktopShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createStartMenuShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"deleteAppDataOnUninstall\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"shortcutName\"</span>: <span class=\"string\">\"RhinoDisk\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr><p>最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库<a href=\"https://github.com/typicode/lowdb\" target=\"_blank\" rel=\"noopener\">lowdb</a>。</p><p>项目精简版[DEMO]展示(<a href=\"https://github.com/NoJsJa/electron-react-template\" target=\"_blank\" rel=\"noopener\">https://github.com/NoJsJa/electron-react-template</a>)</p><h3 id=\"功能需求\"><a href=\"#功能需求\" class=\"headerlink\" title=\"功能需求\"></a>功能需求</h3><hr><h4 id=\"集群节点管理\"><a href=\"#集群节点管理\" class=\"headerlink\" title=\"集群节点管理\"></a>集群节点管理</h4><ol><li>客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作</li><li>支持设置默认节点操作用于自动登录功能</li><li>添加节点的时候要进行ping逻辑判断目标节点是否可用</li><li>调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表</li></ol><p>需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。</p><p><img src=\"/blogs/img/article/smb_node.jpg\" alt=\"RhinoDisk\"></p><p><img src=\"/blogs/img/article/smb_node_conf.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"集群用户登录\"><a href=\"#集群用户登录\" class=\"headerlink\" title=\"集群用户登录\"></a>集群用户登录</h4><ol><li>支持已登录过客户端的用户自动下拉提示</li><li>支持已记住密码的用户自动填充密码到输入框</li><li>如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板</li></ol><p>需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。</p><p><img src=\"/blogs/img/article/smb_login.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"远程共享目录挂载\"><a href=\"#远程共享目录挂载\" class=\"headerlink\" title=\"远程共享目录挂载\"></a>远程共享目录挂载</h4><ol><li>windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作</li><li>选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z</li></ol><p>需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。</p><p><img src=\"/blogs/img/article/smb_share.jpg\" alt=\"RhinoDisk\"><br><img src=\"/blogs/img/article/smb_share_mount.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"文件上传管理\"><a href=\"#文件上传管理\" class=\"headerlink\" title=\"文件上传管理\"></a>文件上传管理</h4><ol><li>文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。</li><li>在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。</li><li>任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。</li><li>切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。</li></ol><p>需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。</p><p><img src=\"/blogs/img/article/smb_upload_now.jpg\" alt=\"RhinoDisk\"><br><img src=\"/blogs/img/article/smb_upload_record.jpg\" alt=\"RhinoDisk\"></p><h3 id=\"实现难点\"><a href=\"#实现难点\" class=\"headerlink\" title=\"实现难点\"></a>实现难点</h3><hr><h4 id=\"多语言功能实现\"><a href=\"#多语言功能实现\" class=\"headerlink\" title=\"多语言功能实现\"></a>多语言功能实现</h4><p>总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。</p><p><img src=\"/blogs/img/article/electron-lang.png\" alt=\"lang\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * global.lang -- 内存里保存的所有语言数据</span></span><br><span class=\"line\"><span class=\"comment\"> * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)</span></span><br><span class=\"line\"><span class=\"comment\"> * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)</span></span><br><span class=\"line\"><span class=\"comment\"> * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lang = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lang</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLang = <span class=\"string\">'zh_CN'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 获取统一的语言环境标识 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getLANG = <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 英语</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'en-US'</span>, <span class=\"string\">'en'</span>, <span class=\"string\">'en-us'</span>, <span class=\"string\">'en_us'</span>, <span class=\"string\">'en_US'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'en_us'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 中文简体</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-CN'</span>, <span class=\"string\">'zh'</span>, <span class=\"string\">'zh-cn'</span>, <span class=\"string\">'zh_cn'</span>, <span class=\"string\">'zh_CN'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-TW'</span>, <span class=\"string\">'zh-tw'</span>, <span class=\"string\">'zh_tw'</span>, <span class=\"string\">'zh_TW'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_tw'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认中文简体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 加载语言文件 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setLang = <span class=\"function\">(<span class=\"params\">langEnv</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    global.lang = global.lang ? global.lang : &#123;&#125;;</span><br><span class=\"line\">    global.LANG = langEnv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取文件夹的语言配置文件写入全局配置</span></span><br><span class=\"line\">    fs.readdir(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv), (err, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        global.lang[path.basename(file)] = <span class=\"built_in\">require</span>(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv, file));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _lang = getLANG(acceptLang || defaultLang);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (global.LANG &amp;&amp; global.LANG == _lang) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置目前的语言环境</span></span><br><span class=\"line\">    setLang(_lang);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = lang;</span><br></pre></td></tr></table></figure><h4 id=\"托盘功能的实现\"><a href=\"#托盘功能的实现\" class=\"headerlink\" title=\"托盘功能的实现\"></a>托盘功能的实现</h4><p>使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contextMenu() &#123;</span><br><span class=\"line\">    global.appTray = <span class=\"keyword\">new</span> Tray(path.join(app.getAppPath(), os.type() === <span class=\"string\">'Windows_NT'</span> ? <span class=\"string\">`resources/icon_<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.envConf.work_env&#125;</span>.ico`</span> : <span class=\"string\">'resources/mac_tray.png'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> menu = Menu.buildFromTemplate( [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          label: global.lang.public.quit,</span><br><span class=\"line\">          type: <span class=\"string\">'normal'</span>,</span><br><span class=\"line\">          click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.sendToWeb(<span class=\"string\">'upload'</span>, &#123;<span class=\"attr\">action</span>: <span class=\"string\">'getUploadingTask'</span>&#125;);</span><br><span class=\"line\">            ipcMainProcess.ipc.once(<span class=\"string\">'upload-getUploadingTask'</span>, (event, rsp) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                  global.ipcMainWindow.sendToWeb(<span class=\"string\">'shell'</span>, &#123; <span class=\"attr\">action</span>: <span class=\"string\">'upload-clear'</span> &#125;);</span><br><span class=\"line\">                  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.appTray.destroy();</span><br><span class=\"line\">                    app.quit();</span><br><span class=\"line\">                  &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                      body: global.lang.public[<span class=\"string\">'data_write_failed_before_quit'</span>]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rsp.result !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">const</span> buttonId = dialog.showMessageBoxSync(<span class=\"keyword\">this</span>.windowoptions, &#123;</span><br><span class=\"line\">                    defaultId: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    buttons: [<span class=\"string\">'No'</span>, <span class=\"string\">'Yes'</span>],</span><br><span class=\"line\">                    type: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">                    title: global.lang.public.tips,</span><br><span class=\"line\">                    message: global.lang.upload.app_quit_tips</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (buttonId === <span class=\"number\">1</span>) quitApp();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  quitApp();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                  body: rsp.result</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    global.appTray.on(<span class=\"string\">'click'</span>, ()=&gt;&#123;    </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.window.show();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    global.appTray.setToolTip(<span class=\"string\">'RninoDisk'</span>);</span><br><span class=\"line\">    global.appTray.setContextMenu(menu);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"Node执行操作系统命令\"><a href=\"#Node执行操作系统命令\" class=\"headerlink\" title=\"Node执行操作系统命令\"></a>Node执行操作系统命令</h4><ol><li><p>通用的系统命令执行函数(日志输出阻塞版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [exec 执行一个命令，阻塞输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">exports.exec = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    child.exec(command, options, (_err, _stdout, _stderr) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_err) &#123;</span><br><span class=\"line\">        exports.console_log(_err, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _err&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_stderr &amp;&amp; _stderr.toString()) &#123;</span><br><span class=\"line\">        exports.console_log(_stderr, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _stderr&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(_stdout);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">result</span>: _stdout&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通用的系统命令执行函数(日志同步输出版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [execRealtime 执行一个命令，实时输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.execRealtime = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>, error = <span class=\"string\">''</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = child.exec(command, options);</span><br><span class=\"line\">    </span><br><span class=\"line\">    result.stdout.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'white'</span>);</span><br><span class=\"line\">      data += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.stderr.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">      error += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.on(<span class=\"string\">'close'</span>, (code) =&gt; &#123;</span><br><span class=\"line\">      resolve(&#123;code, <span class=\"attr\">result</span>: data, error&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"远程共享目录挂载-1\"><a href=\"#远程共享目录挂载-1\" class=\"headerlink\" title=\"远程共享目录挂载\"></a>远程共享目录挂载</h4><ol><li><p>获取空闲盘符和已经挂载盘符</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * getSystemDriveLetter [获取系统已经挂载的磁盘]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return <span class=\"type\">&#123;[Array]&#125;</span> </span>[盘符列表]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  getSystemDriveLetter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(<span class=\"string\">'fsutil fsinfo drives'</span>, [], &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'buffer'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">stdout</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstr = stdout;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstrArr = driverstr.split(<span class=\"string\">' '</span>).filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s !== os.EOL).map(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> allDrivers = [</span><br><span class=\"line\">          <span class=\"string\">'C:'</span>, <span class=\"string\">'D:'</span>, <span class=\"string\">'E:'</span>, <span class=\"string\">'F:'</span>, <span class=\"string\">'G:'</span>, <span class=\"string\">'H:'</span>, <span class=\"string\">'I:'</span>, <span class=\"string\">'J:'</span>, <span class=\"string\">'K:'</span>, <span class=\"string\">'L:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'M:'</span>, <span class=\"string\">'N:'</span>, <span class=\"string\">'O:'</span>, <span class=\"string\">'P:'</span>, <span class=\"string\">'Q:'</span>, <span class=\"string\">'R:'</span>, <span class=\"string\">'S:'</span>, <span class=\"string\">'T:'</span>, <span class=\"string\">'U:'</span>, <span class=\"string\">'V:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'W:'</span>, <span class=\"string\">'X:'</span>, <span class=\"string\">'Y:'</span>, <span class=\"string\">'Z:'</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\">        driverstrArr.shift();</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            mounted: driverstrArr,</span><br><span class=\"line\">            available: allDrivers.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> !driverstrArr.includes(d.toLocaleUpperCase()))</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过UNC命令对远程共享进行挂载</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 挂载共享 */</span></span><br><span class=\"line\">_mountSystemDriver_Windows_NT(&#123; host, driver, path, auto = <span class=\"literal\">false</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.get(<span class=\"string\">'last.pwd'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUseIPC = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandMount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;path&#125;</span> \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUmount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> /del /y`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取系统已经挂载的磁盘和空闲的磁盘</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getSystemDriveLetter()</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rsp.result.mounted.includes(driver.toLocaleUpperCase())) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.driver_already_mount);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.get_system_mount_info_failed);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 尝试UNC连接</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandUseIPC);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 执行挂载命令</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandMount);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.update(<span class=\"string\">'mountPoint'</span>, &#123; username, host, path &#125;, &#123;</span><br><span class=\"line\">            username, host, path, driver, auto</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              username, host, driver</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.error(err, err.toString());</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: global.lang.node.net_mount_failed_reason,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"文件上传管理-1\"><a href=\"#文件上传管理-1\" class=\"headerlink\" title=\"文件上传管理\"></a>文件上传管理</h4><p>前端界面沿用之前的AWS对象存储文件上传管理逻辑<a href=\"https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>，不同的地方是加入了<code>历史任务</code>功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如<code>\\\\[host]\\[sharename]\\file1</code>，这样子文件上传就变成本地目录文件的复制、删除、重命名了。</p><p>下图为前端界面的上传逻辑示意图：<br><img src=\"/blogs/img/article/shards_upload.jpg\" alt=\"upload\"></p><h5 id=\"上传流程描述\"><a href=\"#上传流程描述\" class=\"headerlink\" title=\"上传流程描述\"></a>上传流程描述</h5><p>1) 页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)<br>2) 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息<br>3）页面调用init请求附带上选中的文件信息初始化文件上传任务<br>4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作<br>5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)<br>6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置<br>7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID<br>8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态<br>9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成<br>10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</p><h5 id=\"Node-js-Electron-端的部分关键代码\"><a href=\"#Node-js-Electron-端的部分关键代码\" class=\"headerlink\" title=\"Node.js(Electron)端的部分关键代码\"></a>Node.js(Electron)端的部分关键代码</h5><ol><li>初始化一个上传任务<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [文件绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [远程smb共享名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  init(&#123; host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; pwd, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remotePath = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用UNC命令连接后端smb共享</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.uncCommandConnect(&#123; host, username, pwd, sharename &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          remotePath = path.join(pre, prefix, file.name);</span><br><span class=\"line\">          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 分析绝对文件路径名，然后自动创建所有需要创建的文件夹</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> dirs = getFileDirs([path.join(prefix, file.name)]);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> mkdirs(pre, dirs);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> fileBlock.open(abspath)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 临时存储文件上传信息在内存中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._setUploadRecordsInMemory(&#123;</span><br><span class=\"line\">              username,</span><br><span class=\"line\">              host,</span><br><span class=\"line\">              filename: path.join(prefix, file.name),</span><br><span class=\"line\">              size: file.size,</span><br><span class=\"line\">              fragsize,</span><br><span class=\"line\">              sharename,</span><br><span class=\"line\">              abspath,</span><br><span class=\"line\">              remotePath,</span><br><span class=\"line\">              startime: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">              endtime: <span class=\"string\">''</span>,</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              index: <span class=\"number\">0</span>,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">              status: <span class=\"string\">'uploading'</span> <span class=\"comment\">// 上传状态</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              size,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li>上传文件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [上传文件]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>index [分片索引，0为起始值]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  upload(&#123; uploadId, index &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record.status !== <span class=\"string\">'uploading'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; host, filename, size, sharename, fragsize, abspath, username &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.info.pwd;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = fragsize * (index);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slicesize = ((fragsize * (index + <span class=\"number\">1</span>)) &lt;= size) ? fragsize : (size - fragsize * index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position &gt; size) &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: lang.upload.upload_index_overflow</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 读取一个文件分片</span></span><br><span class=\"line\">      fileBlock.read(abspath, position, slicesize)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 递增写入文件</span></span><br><span class=\"line\">            fs.appendFile(path.join(pre, filename), rsp.result, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'binary'</span> &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 排查错误原因</span></span><br><span class=\"line\">                checkPermission(path.join(pre, filename, <span class=\"string\">'..'</span>), <span class=\"string\">'ew'</span>, (err2, isExit, canWrite) =&gt; &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (err2) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isExit &amp;&amp; !canWrite) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.insufficientPermissionUpload</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 更新内存中的文件上传分片信息</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">index</span>: (index + <span class=\"number\">1</span>) &#125;, uploadId);</span><br><span class=\"line\">                resolve(&#123;</span><br><span class=\"line\">                  code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                  result: &#123; filename, uploadId, index, abspath, sharename &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId) || <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId).status === <span class=\"string\">'error'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">'--uploading-unlink'</span>, path.join(pre, filename));</span><br><span class=\"line\">                  fs.unlinkSync(path.join(pre, filename));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li>完成一个文件上传任务<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  complete(&#123; uploadId &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; abspath &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新上传任务状态</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">status</span>: <span class=\"string\">'break'</span>, <span class=\"attr\">endtime</span>: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()) &#125;, uploadId);</span><br><span class=\"line\">      <span class=\"comment\">// 关闭文件描述符</span></span><br><span class=\"line\">      fileBlock.close(abspath).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: uploadId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err.toString()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li><li>文件分片读取管理工厂<br>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"windows安装包自动化打包配置\"><a href=\"#windows安装包自动化打包配置\" class=\"headerlink\" title=\"windows安装包自动化打包配置\"></a>windows安装包自动化打包配置</h4><p>windows安装包使用electron nsis配置，注意使用<code>.ico</code>格式的应用图标以免打包失败，package.json中的<code>build.files</code>字段声明了需要打包的所有文件，<code>build.win</code>是windows平台的打包配置，<code>build.nsis</code>是nsis打包的详细配置，运行<code>npm run build-win</code>即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本<a href=\"https://github.com/NoJsJa/electron-react-template/blob/master/build.js\" target=\"_blank\" rel=\"noopener\">项目build.js</a>、<a href=\"https://github.com/NoJsJa/electron-react-template/blob/master/server/build.js\" target=\"_blank\" rel=\"noopener\">electron build.js</a>对整个流程进行了整合，<code>项目build.js</code>兼顾web打包以及调用<code>electron build.js</code>负责Electron App打包，使用<code>node build.js --help</code>查看所有打包命令帮助信息。</p><p><strong>node build.js - -help</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">description: build <span class=\"built_in\">command</span> <span class=\"keyword\">for</span> RhinoDisk.</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: node build.js [action] [config]</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ param: [--<span class=\"built_in\">help</span> | -h ] =&gt; show usage info.</span><br><span class=\"line\">    |______ param: [build-win   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> windows, the default conf file is ./server/config.json.</span><br><span class=\"line\">    |______ param: [build-linux ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> linux, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-mac   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> mac, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-all   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> all platform, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [clean-build ] =&gt; clean build directory after build</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ example1: node build.js build-win</span><br><span class=\"line\">    |______ example2: node build.js build-linux</span><br><span class=\"line\">    |______ example3: node build.js build-mac</span><br><span class=\"line\">    |______ example4: node build.js build-all</span><br><span class=\"line\">    |______ example5: node build.js build-win --edit</span><br><span class=\"line\">    |______ example6: node build.js build-win --office</span><br><span class=\"line\">    |______ example7: node build.js --<span class=\"built_in\">help</span></span><br><span class=\"line\">    |______ example8: node build.js clean-build</span><br></pre></td></tr></table></figure><p><strong>package.json：</strong><br></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"SMB management client\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"build-win\"</span>: <span class=\"string\">\"electron-builder --win\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"productName\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"appId\"</span>: <span class=\"string\">\"org.datatom.rhinodisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"directories\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"buildResources\"</span>: <span class=\"string\">\"build\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"output\"</span>: <span class=\"string\">\"build\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"files\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"config.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"resources/*.*\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"win\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"icon\"</span>: <span class=\"string\">\"build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"zip\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"nsis\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"arch\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"x64\"</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"nsis\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"oneClick\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowElevation\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowToChangeInstallationDirectory\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"uninstallerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerHeaderIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createDesktopShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createStartMenuShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"deleteAppDataOnUninstall\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"shortcutName\"</span>: <span class=\"string\">\"RhinoDisk\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>"},{"title":"基于Electron的smb客户端文件上传优化探索","catalog":true,"toc_nav_num":true,"date":"2020-08-16T14:30:00.000Z","subtitle":"smb samba client upload","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-08-16T14:30:00.000Z","top":2,"_content":"\n\n### 前言\n---------------\n\n![RhinoDisk](/blogs/img/article/smb_upload_now.jpg)\n\n上一篇文章[《基于Electron的smb客户端开发记录》](https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/)，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的`文件分片上传模块`拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。  \n\n项目精简版[DEMO](https://github.com/NoJsJa/electron-react-template)\n\n### Electron进程架构\n-------------------\n\n#### 主进程和渲染进程的区别\n\n![electron](/blogs/img/article/electron1.png)\n\nElectron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。  \n主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。  \n\n在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 主进程和渲染进程之间的通信\n\n1. 使用remote远程调用\nremote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：  \n```js\n/* 渲染进程中(web端代码) */\nconst { BrowserWindow } = require('electron').remote\nlet win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用与主进程和渲染进程频繁通信的情况，否则会引起严重的程序性能问题。\n\n2. 使用ipc信号通信  \n基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。\n```js\n/* 主进程 */\nipcMain.on(channel, listener) // 监听信道 - 异步触发\nipcMain.once(channel, listener) // 监听一次信道，监听器触发后即删除 - 异步触发\nipcMain.handle(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器\nipcMain.handleOnce(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听\nbrowserWindow.webContents.send(channel, args); // 显式地向某个渲染进程发送信息 - 异步触发\n\n\n/* 渲染进程 */\nipcRenderer.on(channel, listener); // 监听信道 - 异步触发\nipcRenderer.once(channel, listener); // 监听一次信道，监听器触发后即删除 - 异步触发\nipcRenderer.sendSync(channel, args); // 向主进程一个信道发送信息 - 同步触发\nipcRenderer.invoke(channel, args); // 向主进程一个信道发送信息 - 返回Promise对象等待触发\nipcRenderer.sendTo(webContentsId, channel, ...args); // 向某个渲染进程发送消息 - 异步触发\nipcRenderer.sendToHost(channel, ...args) // 向host页面的webview发送消息 - 异步触发\n```\n\n### 文件上传架构\n---------------\n文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。\n\n#### 文件上传源和上传目标\n\n* 在用户界面上使用`Input`组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；\n\n* 上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径`\\\\[host]\\[sharename]\\file1`上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows `UNC`命令。\n\n```js\n/* 使用unc命令连接远程smb共享 */\n_uncCommandConnect_Windows_NT({ host, username, pwd }) {\n    const { isThirdUser, nickname, isLocalUser } = global.ipcMainProcess.userModel.info;\n    const commandUse = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    return new Promise((resolve) => {\n      this.sudo.exec(commandUse).then((res) => {\n        resolve({\n          code: 200,\n        });\n      }).catch((err) => {\n        resolve({\n          code: 600,\n          result: global.lang.upload.unc_connection_failed\n        });\n      });\n    });\n  }\n```\n\n#### 上传流程概述\n\n下图描述了整个前端部分的控制逻辑：\n\n![upload](/blogs/img/article/shards_upload.jpg)\n\n1. 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2. 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3. 页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4. Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理  \n5. 页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6. Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径  \n7. upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8. Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态  \n9. 界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成  \n10. Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n#### Node.js实现的文件分片管理工厂\n\n* 文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；\n* 文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；\n* 文件上传完成的时候调用`close`关闭文件描述符；\n\n三个方法均通过文件绝对路径`path`参数建立关联：\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n### 基于Electron的文件上传卡顿优化踩坑\n----------------------\n\n优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就特别难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。\n\n#### 使用Electron自带的Devtools进行性能分析\n\n在文件上传过程中打开性能检测工具`Performance`进行录制，分析整个流程：\n\n![upload_performance.jpg](/blogs/img/article/upload_performance.jpg)\n\n在文件上传过程中打开内存工具`Memory`进行快照截取分析一个时刻的内存占用情况：\n\n![upload_memory.jpg](/blogs/img/article/upload_memory.jpg)\n\n#### 第一次尝试解决问题：替换Antd Table组件\n\n在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！\n\n#### 第二次尝试解决问题：改造Electron主进程同步阻塞代码\n\n先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。\n\n![upload_memory.jpg](/blogs/img/article/chromium.jpg)\n\n综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。\n\n我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。\n\n#### 第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑\n\n这次是大改(苦笑脸~)，抱着学习的态度实现了Electron多进程池，主要逻辑是使用Node.js的`child_process`模块(具体使用请看[文档](http://nodejs.cn/api/child_process.html))创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，所有进程负载均匀分配。\n\n```js\nconst electron = require('electron');\nconst { app, BrowserWindow, Menu, Tray, dialog } = require('electron');\nconst { fork } = require('child_process');\nconst path = require('path');\nconst url = require('url');\nconst os = require('os');\nconst { EventEmitter } = require('events');\nconst { getRandomString } = require(path.join(app.getAppPath(), 'app/utils/utils'));\n\n/**\n  * ChildProcessPool [进程池]\n  * @author nojsja\n  * @param  {[String]} path [用于创建进程的可执行文件]\n  * @param  {[Number]} max [可创建的进程数量最大值]\n  * @param  {[String]} cwd [进程执行的起始目录]\n  * @param  {[Object]} env [环境变量配置]\n  */\nclass ChildProcessPool {\n  constructor({ path, max=6, cwd, env })\n  {\n    this.cwd = cwd || undefined;\n    this.env = env || undefined;\n    this.inspectStartIndex = 5858;\n    this.callbacks = {};\n    this.pidMap = new Map();\n    this.collaborationMap = new Map();\n    this.event = new EventEmitter();\n    this.forked = [];\n    this.forkedPath = path;\n    this.forkIndex = 0;\n    this.forkMaxIndex = max;\n    // 子进程回调事件\n    this.event.on('fork-callback', (data) => {\n      if (this.collaborationMap.get(data.id) !== undefined) {\n        this.dataRespondAll(data)\n      } else {\n        this.dataRespond(data);\n      }\n    })\n  }\n  \n  /* 子进程数据回调 */\n  dataRespond = (data) => {\n    if (data.id && this.callbacks[data.id]) {\n      this.callbacks[data.id](data.result);\n      delete this.callbacks[data.id];\n    };\n  }\n\n  /* 所有子进程协同数据回调 */\n  dataRespondAll = (data) => {\n    let resultAll = this.collaborationMap.get(data.id);\n    if (!data.id) return;\n    if (resultAll !== undefined) {\n      this.collaborationMap.set(data.id, [...resultAll, data.result]);\n    } else {\n      this.collaborationMap.set(data.id, [data.result]);\n    }\n    resultAll = this.collaborationMap.get(data.id);\n    if (resultAll.length === this.forked.length) {\n      this.callbacks[data.id](resultAll);\n      delete this.callbacks[data.id];\n      this.collaborationMap.delete(data.id);\n    }\n  }\n\n  /* 从子进程池中获取一个进程 */\n  getForkedFromPool(id=\"default\") {\n    let forked;\n    if (!this.pidMap.get(id)) {\n      if (this.forked.length < this.forkMaxIndex) {\n        this.inspectStartIndex ++;\n        forked = fork(\n          this.forkedPath,\n          // 开发环境下启动inspect进程远程调试端口\n          this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : [],\n          {\n            cwd: this.cwd,\n            env: this.env,\n          }\n        );\n        this.forked.push(forked);\n        this.forkIndex += 1;\n        forked.on('message', (data) => {\n          this.event.emit('fork-callback', data);\n        });\n        this.pidMap.set(id, forked.pid);\n      } else {\n        this.forkIndex = this.forkIndex % this.forkMaxIndex;\n        forked = this.forked[this.forkIndex];\n        this.pidMap.set(id, forked.pid);\n        this.forkIndex += 1;\n      }\n    } else {\n      forked = this.forked.filter(f => f.pid === this.pidMap.get(id))[0];\n      if (!forked) throw new Error(`Get forked process from pool failed! the process pid: ${this.pidMap.get(id)}.`);\n    }\n\n    return forked;\n  }\n\n  /* 向子进程发送请求 */\n  send(params, givenId) {\n    const id = givenId || getRandomString();\n    const forked = this.getForkedFromPool(id);\n    return new Promise(resolve => {\n      this.callbacks[id] = resolve;\n      forked.send({...params, id});\n    });\n  }\n\n  /* 向所有进程发送请求 */\n  sendToAll(params) {\n    const id = getRandomString(); \n    return new Promise(resolve => {\n      this.callbacks[id] = resolve;\n      this.collaborationMap.set(id, []);\n      if (this.forked.length) {\n        this.forked.forEach((forked) => {\n          forked.send({...params, id});\n        })\n      } else {\n        this.getForkedFromPool().send({...params, id});\n      }\n    });\n  }\n}\n\nmodule.exports = ChildProcessPool;\n\n```\n\n1. 其中`send`和`sendToAll`方法，前者是向某个进程发送请求信号，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向所有进程池中的进程发送信号，并期望拿到所有进程返回的结果。\n\n2. 其中`dataRespond`和`dataRespondAll`方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果。\n\n3. `getForkedFromPool`方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用。\n\n4. `getForkedFromPool`方法中值得注意的是这行代码：```this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : []```，使用Node.js运行js脚本时加上`- -inspect=端口号` 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程，具体可以在浏览器输入地址：`chrome://inspect/#devices`然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字`Open dedicated DevTools for Node`就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！\n![upload_memory.jpg](/blogs/img/article/inspect.jpg)\n\n5. 另外创建进程池时传入的`path`参数即为以下脚本代码的绝对路径，这段文件上传逻辑被单独分离到子进程中处理，其中CPU耗时的操作为`uploadStore`函数块处理的部分，主要是维护整个文件上传列表，对上传任务列表进行增删查改操作；另外的频繁利用io读写文件的逻辑被封装到`fileBlock`函数块，不过都是异步IO读写，应该对性能影响不大，具体可以查看一下源码进行详细了解：\n[源码](https://github.com/NoJsJa/electron-react-template/blob/master/server/app/services/child/upload.js)\n```js\n  const fs = require('fs');\n  const fsPromise = fs.promises;\n  const path = require('path');\n  const utils = require('./child.utils');\n  const requireLang = require('../../lang');\n  const { readFileBlock, uploadRecordStore, unlink } = utils;\n  const fileBlock = readFileBlock();\n  const uploadStore = uploadRecordStore();\n  requireLang(process.env.LANG);\n\n  process.on('message', ({action, params, id }) => {\n    switch (action) {\n      case 'init-works':\n        initWorks(params).then((rsp) => {\n          process.send({result: rsp, id});\n        });\n        break;\n      case 'upload-works':\n        uploadWorks(params, id).then(rsp => {\n          process.send({result: rsp, id});\n        });\n        break;\n      case 'close':\n        close(params, id).then(rsp => {\n          process.send({result: rsp, id});\n        });\n        break;\n      case 'record-set':\n        uploadStore.set(params);\n        process.send({result: null, id});\n        break;\n      case 'record-get':\n        process.send({result: uploadStore.get(params), id});\n        break;\n      case 'record-get-all':\n        process.send({result: uploadStore.getAll(params), id});\n        break;\n      case 'record-update':\n        uploadStore.update(params);\n        process.send({result: null, id});\n        break;\n      case 'record-remove':\n        uploadStore.remove(params);\n        process.send({result: null, id});\n        break;\n      case 'record-reset': \n        uploadStore.reset(params);\n        process.send({result: null, id});\n      break;\n      case 'unlink': \n        unlink(params).then(rsp => {\n          process.send({result: rsp, id});\n        })\n      break;\n      default:\n        break;\n    }\n  });\n\n  // 已省略\n  ...\n\n```\n\n#### 第四次尝试解决问题：重新审视渲染进程前端代码\n\n* 很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。我摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。  \n* 在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数`refreshTasks`，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果`待上传文件列表的文件数量 = 设置的同时上传任务个数` 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致`refreshTasks`这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。\n* 加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！\n\n![refreshTasks](/blogs/img/article/refreshTasks.jpg)\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","source":"_posts/基于Electron的smb客户端文件上传优化探索.md","raw":"---\ntitle: \"基于Electron的smb客户端文件上传优化探索\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-08-16 22:30:00\nsubtitle: \"smb samba client upload\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- upload\n- smb\ncategories:\n- Electron\nupdateDate: 2020-08-16 22:30:00\ntop: 2\n---\n\n\n### 前言\n---------------\n\n![RhinoDisk](/blogs/img/article/smb_upload_now.jpg)\n\n上一篇文章[《基于Electron的smb客户端开发记录》](https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/)，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的`文件分片上传模块`拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。  \n\n项目精简版[DEMO](https://github.com/NoJsJa/electron-react-template)\n\n### Electron进程架构\n-------------------\n\n#### 主进程和渲染进程的区别\n\n![electron](/blogs/img/article/electron1.png)\n\nElectron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。  \n主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。  \n\n在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 主进程和渲染进程之间的通信\n\n1. 使用remote远程调用\nremote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：  \n```js\n/* 渲染进程中(web端代码) */\nconst { BrowserWindow } = require('electron').remote\nlet win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用与主进程和渲染进程频繁通信的情况，否则会引起严重的程序性能问题。\n\n2. 使用ipc信号通信  \n基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。\n```js\n/* 主进程 */\nipcMain.on(channel, listener) // 监听信道 - 异步触发\nipcMain.once(channel, listener) // 监听一次信道，监听器触发后即删除 - 异步触发\nipcMain.handle(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器\nipcMain.handleOnce(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听\nbrowserWindow.webContents.send(channel, args); // 显式地向某个渲染进程发送信息 - 异步触发\n\n\n/* 渲染进程 */\nipcRenderer.on(channel, listener); // 监听信道 - 异步触发\nipcRenderer.once(channel, listener); // 监听一次信道，监听器触发后即删除 - 异步触发\nipcRenderer.sendSync(channel, args); // 向主进程一个信道发送信息 - 同步触发\nipcRenderer.invoke(channel, args); // 向主进程一个信道发送信息 - 返回Promise对象等待触发\nipcRenderer.sendTo(webContentsId, channel, ...args); // 向某个渲染进程发送消息 - 异步触发\nipcRenderer.sendToHost(channel, ...args) // 向host页面的webview发送消息 - 异步触发\n```\n\n### 文件上传架构\n---------------\n文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。\n\n#### 文件上传源和上传目标\n\n* 在用户界面上使用`Input`组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；\n\n* 上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径`\\\\[host]\\[sharename]\\file1`上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows `UNC`命令。\n\n```js\n/* 使用unc命令连接远程smb共享 */\n_uncCommandConnect_Windows_NT({ host, username, pwd }) {\n    const { isThirdUser, nickname, isLocalUser } = global.ipcMainProcess.userModel.info;\n    const commandUse = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    return new Promise((resolve) => {\n      this.sudo.exec(commandUse).then((res) => {\n        resolve({\n          code: 200,\n        });\n      }).catch((err) => {\n        resolve({\n          code: 600,\n          result: global.lang.upload.unc_connection_failed\n        });\n      });\n    });\n  }\n```\n\n#### 上传流程概述\n\n下图描述了整个前端部分的控制逻辑：\n\n![upload](/blogs/img/article/shards_upload.jpg)\n\n1. 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2. 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3. 页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4. Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理  \n5. 页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6. Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径  \n7. upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8. Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态  \n9. 界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成  \n10. Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n#### Node.js实现的文件分片管理工厂\n\n* 文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；\n* 文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；\n* 文件上传完成的时候调用`close`关闭文件描述符；\n\n三个方法均通过文件绝对路径`path`参数建立关联：\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n### 基于Electron的文件上传卡顿优化踩坑\n----------------------\n\n优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就特别难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。\n\n#### 使用Electron自带的Devtools进行性能分析\n\n在文件上传过程中打开性能检测工具`Performance`进行录制，分析整个流程：\n\n![upload_performance.jpg](/blogs/img/article/upload_performance.jpg)\n\n在文件上传过程中打开内存工具`Memory`进行快照截取分析一个时刻的内存占用情况：\n\n![upload_memory.jpg](/blogs/img/article/upload_memory.jpg)\n\n#### 第一次尝试解决问题：替换Antd Table组件\n\n在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！\n\n#### 第二次尝试解决问题：改造Electron主进程同步阻塞代码\n\n先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。\n\n![upload_memory.jpg](/blogs/img/article/chromium.jpg)\n\n综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。\n\n我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。\n\n#### 第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑\n\n这次是大改(苦笑脸~)，抱着学习的态度实现了Electron多进程池，主要逻辑是使用Node.js的`child_process`模块(具体使用请看[文档](http://nodejs.cn/api/child_process.html))创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，所有进程负载均匀分配。\n\n```js\nconst electron = require('electron');\nconst { app, BrowserWindow, Menu, Tray, dialog } = require('electron');\nconst { fork } = require('child_process');\nconst path = require('path');\nconst url = require('url');\nconst os = require('os');\nconst { EventEmitter } = require('events');\nconst { getRandomString } = require(path.join(app.getAppPath(), 'app/utils/utils'));\n\n/**\n  * ChildProcessPool [进程池]\n  * @author nojsja\n  * @param  {[String]} path [用于创建进程的可执行文件]\n  * @param  {[Number]} max [可创建的进程数量最大值]\n  * @param  {[String]} cwd [进程执行的起始目录]\n  * @param  {[Object]} env [环境变量配置]\n  */\nclass ChildProcessPool {\n  constructor({ path, max=6, cwd, env })\n  {\n    this.cwd = cwd || undefined;\n    this.env = env || undefined;\n    this.inspectStartIndex = 5858;\n    this.callbacks = {};\n    this.pidMap = new Map();\n    this.collaborationMap = new Map();\n    this.event = new EventEmitter();\n    this.forked = [];\n    this.forkedPath = path;\n    this.forkIndex = 0;\n    this.forkMaxIndex = max;\n    // 子进程回调事件\n    this.event.on('fork-callback', (data) => {\n      if (this.collaborationMap.get(data.id) !== undefined) {\n        this.dataRespondAll(data)\n      } else {\n        this.dataRespond(data);\n      }\n    })\n  }\n  \n  /* 子进程数据回调 */\n  dataRespond = (data) => {\n    if (data.id && this.callbacks[data.id]) {\n      this.callbacks[data.id](data.result);\n      delete this.callbacks[data.id];\n    };\n  }\n\n  /* 所有子进程协同数据回调 */\n  dataRespondAll = (data) => {\n    let resultAll = this.collaborationMap.get(data.id);\n    if (!data.id) return;\n    if (resultAll !== undefined) {\n      this.collaborationMap.set(data.id, [...resultAll, data.result]);\n    } else {\n      this.collaborationMap.set(data.id, [data.result]);\n    }\n    resultAll = this.collaborationMap.get(data.id);\n    if (resultAll.length === this.forked.length) {\n      this.callbacks[data.id](resultAll);\n      delete this.callbacks[data.id];\n      this.collaborationMap.delete(data.id);\n    }\n  }\n\n  /* 从子进程池中获取一个进程 */\n  getForkedFromPool(id=\"default\") {\n    let forked;\n    if (!this.pidMap.get(id)) {\n      if (this.forked.length < this.forkMaxIndex) {\n        this.inspectStartIndex ++;\n        forked = fork(\n          this.forkedPath,\n          // 开发环境下启动inspect进程远程调试端口\n          this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : [],\n          {\n            cwd: this.cwd,\n            env: this.env,\n          }\n        );\n        this.forked.push(forked);\n        this.forkIndex += 1;\n        forked.on('message', (data) => {\n          this.event.emit('fork-callback', data);\n        });\n        this.pidMap.set(id, forked.pid);\n      } else {\n        this.forkIndex = this.forkIndex % this.forkMaxIndex;\n        forked = this.forked[this.forkIndex];\n        this.pidMap.set(id, forked.pid);\n        this.forkIndex += 1;\n      }\n    } else {\n      forked = this.forked.filter(f => f.pid === this.pidMap.get(id))[0];\n      if (!forked) throw new Error(`Get forked process from pool failed! the process pid: ${this.pidMap.get(id)}.`);\n    }\n\n    return forked;\n  }\n\n  /* 向子进程发送请求 */\n  send(params, givenId) {\n    const id = givenId || getRandomString();\n    const forked = this.getForkedFromPool(id);\n    return new Promise(resolve => {\n      this.callbacks[id] = resolve;\n      forked.send({...params, id});\n    });\n  }\n\n  /* 向所有进程发送请求 */\n  sendToAll(params) {\n    const id = getRandomString(); \n    return new Promise(resolve => {\n      this.callbacks[id] = resolve;\n      this.collaborationMap.set(id, []);\n      if (this.forked.length) {\n        this.forked.forEach((forked) => {\n          forked.send({...params, id});\n        })\n      } else {\n        this.getForkedFromPool().send({...params, id});\n      }\n    });\n  }\n}\n\nmodule.exports = ChildProcessPool;\n\n```\n\n1. 其中`send`和`sendToAll`方法，前者是向某个进程发送请求信号，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向所有进程池中的进程发送信号，并期望拿到所有进程返回的结果。\n\n2. 其中`dataRespond`和`dataRespondAll`方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果。\n\n3. `getForkedFromPool`方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用。\n\n4. `getForkedFromPool`方法中值得注意的是这行代码：```this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : []```，使用Node.js运行js脚本时加上`- -inspect=端口号` 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程，具体可以在浏览器输入地址：`chrome://inspect/#devices`然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字`Open dedicated DevTools for Node`就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！\n![upload_memory.jpg](/blogs/img/article/inspect.jpg)\n\n5. 另外创建进程池时传入的`path`参数即为以下脚本代码的绝对路径，这段文件上传逻辑被单独分离到子进程中处理，其中CPU耗时的操作为`uploadStore`函数块处理的部分，主要是维护整个文件上传列表，对上传任务列表进行增删查改操作；另外的频繁利用io读写文件的逻辑被封装到`fileBlock`函数块，不过都是异步IO读写，应该对性能影响不大，具体可以查看一下源码进行详细了解：\n[源码](https://github.com/NoJsJa/electron-react-template/blob/master/server/app/services/child/upload.js)\n```js\n  const fs = require('fs');\n  const fsPromise = fs.promises;\n  const path = require('path');\n  const utils = require('./child.utils');\n  const requireLang = require('../../lang');\n  const { readFileBlock, uploadRecordStore, unlink } = utils;\n  const fileBlock = readFileBlock();\n  const uploadStore = uploadRecordStore();\n  requireLang(process.env.LANG);\n\n  process.on('message', ({action, params, id }) => {\n    switch (action) {\n      case 'init-works':\n        initWorks(params).then((rsp) => {\n          process.send({result: rsp, id});\n        });\n        break;\n      case 'upload-works':\n        uploadWorks(params, id).then(rsp => {\n          process.send({result: rsp, id});\n        });\n        break;\n      case 'close':\n        close(params, id).then(rsp => {\n          process.send({result: rsp, id});\n        });\n        break;\n      case 'record-set':\n        uploadStore.set(params);\n        process.send({result: null, id});\n        break;\n      case 'record-get':\n        process.send({result: uploadStore.get(params), id});\n        break;\n      case 'record-get-all':\n        process.send({result: uploadStore.getAll(params), id});\n        break;\n      case 'record-update':\n        uploadStore.update(params);\n        process.send({result: null, id});\n        break;\n      case 'record-remove':\n        uploadStore.remove(params);\n        process.send({result: null, id});\n        break;\n      case 'record-reset': \n        uploadStore.reset(params);\n        process.send({result: null, id});\n      break;\n      case 'unlink': \n        unlink(params).then(rsp => {\n          process.send({result: rsp, id});\n        })\n      break;\n      default:\n        break;\n    }\n  });\n\n  // 已省略\n  ...\n\n```\n\n#### 第四次尝试解决问题：重新审视渲染进程前端代码\n\n* 很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。我摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。  \n* 在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数`refreshTasks`，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果`待上传文件列表的文件数量 = 设置的同时上传任务个数` 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致`refreshTasks`这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。\n* 加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！\n\n![refreshTasks](/blogs/img/article/refreshTasks.jpg)\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","slug":"基于Electron的smb客户端文件上传优化探索","published":1,"updated":"2020-08-25T05:51:54.703Z","_id":"ckdx1lgjn0000u4i01v2d9xfk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr><p><img src=\"/blogs/img/article/smb_upload_now.jpg\" alt=\"RhinoDisk\"></p><p>上一篇文章<a href=\"https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">《基于Electron的smb客户端开发记录》</a>，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的<code>文件分片上传模块</code>拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。</p><p>项目精简版<a href=\"https://github.com/NoJsJa/electron-react-template\" target=\"_blank\" rel=\"noopener\">DEMO</a></p><h3 id=\"Electron进程架构\"><a href=\"#Electron进程架构\" class=\"headerlink\" title=\"Electron进程架构\"></a>Electron进程架构</h3><hr><h4 id=\"主进程和渲染进程的区别\"><a href=\"#主进程和渲染进程的区别\" class=\"headerlink\" title=\"主进程和渲染进程的区别\"></a>主进程和渲染进程的区别</h4><p><img src=\"/blogs/img/article/electron1.png\" alt=\"electron\"></p><p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。<br>主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p><p>在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p><h4 id=\"主进程和渲染进程之间的通信\"><a href=\"#主进程和渲染进程之间的通信\" class=\"headerlink\" title=\"主进程和渲染进程之间的通信\"></a>主进程和渲染进程之间的通信</h4><ol><li><p>使用remote远程调用<br>remote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 渲染进程中(web端代码) */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>).remote</span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\">win.loadURL(<span class=\"string\">'https://github.com'</span>)</span><br></pre></td></tr></table></figure><p>注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用与主进程和渲染进程频繁通信的情况，否则会引起严重的程序性能问题。</p></li><li><p>使用ipc信号通信<br>基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 主进程 */</span></span><br><span class=\"line\">ipcMain.on(channel, listener) <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcMain.once(channel, listener) <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcMain.handle(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器</span></span><br><span class=\"line\">ipcMain.handleOnce(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听</span></span><br><span class=\"line\">browserWindow.webContents.send(channel, args); <span class=\"comment\">// 显式地向某个渲染进程发送信息 - 异步触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 渲染进程 */</span></span><br><span class=\"line\">ipcRenderer.on(channel, listener); <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.once(channel, listener); <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendSync(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 同步触发</span></span><br><span class=\"line\">ipcRenderer.invoke(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 返回Promise对象等待触发</span></span><br><span class=\"line\">ipcRenderer.sendTo(webContentsId, channel, ...args); <span class=\"comment\">// 向某个渲染进程发送消息 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendToHost(channel, ...args) <span class=\"comment\">// 向host页面的webview发送消息 - 异步触发</span></span><br></pre></td></tr></table></figure></li></ol><h3 id=\"文件上传架构\"><a href=\"#文件上传架构\" class=\"headerlink\" title=\"文件上传架构\"></a>文件上传架构</h3><hr><p>文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。</p><h4 id=\"文件上传源和上传目标\"><a href=\"#文件上传源和上传目标\" class=\"headerlink\" title=\"文件上传源和上传目标\"></a>文件上传源和上传目标</h4><ul><li><p>在用户界面上使用<code>Input</code>组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；</p></li><li><p>上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径<code>\\\\[host]\\[sharename]\\file1</code>上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows <code>UNC</code>命令。</p></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用unc命令连接远程smb共享 */</span></span><br><span class=\"line\">_uncCommandConnect_Windows_NT(&#123; host, username, pwd &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUse = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(commandUse).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: global.lang.upload.unc_connection_failed</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"上传流程概述\"><a href=\"#上传流程概述\" class=\"headerlink\" title=\"上传流程概述\"></a>上传流程概述</h4><p>下图描述了整个前端部分的控制逻辑：</p><p><img src=\"/blogs/img/article/shards_upload.jpg\" alt=\"upload\"></p><ol><li>页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)</li><li>缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息</li><li>页面调用init请求附带上选中的文件信息初始化文件上传任务</li><li>Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理</li><li>页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)</li><li>Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径</li><li>upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID</li><li>Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态</li><li>界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成</li><li>Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</li></ol><h4 id=\"Node-js实现的文件分片管理工厂\"><a href=\"#Node-js实现的文件分片管理工厂\" class=\"headerlink\" title=\"Node.js实现的文件分片管理工厂\"></a>Node.js实现的文件分片管理工厂</h4><ul><li>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；</li><li>文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；</li><li>文件上传完成的时候调用<code>close</code>关闭文件描述符；</li></ul><p>三个方法均通过文件绝对路径<code>path</code>参数建立关联：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"基于Electron的文件上传卡顿优化踩坑\"><a href=\"#基于Electron的文件上传卡顿优化踩坑\" class=\"headerlink\" title=\"基于Electron的文件上传卡顿优化踩坑\"></a>基于Electron的文件上传卡顿优化踩坑</h3><hr><p>优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就特别难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。</p><h4 id=\"使用Electron自带的Devtools进行性能分析\"><a href=\"#使用Electron自带的Devtools进行性能分析\" class=\"headerlink\" title=\"使用Electron自带的Devtools进行性能分析\"></a>使用Electron自带的Devtools进行性能分析</h4><p>在文件上传过程中打开性能检测工具<code>Performance</code>进行录制，分析整个流程：</p><p><img src=\"/blogs/img/article/upload_performance.jpg\" alt=\"upload_performance.jpg\"></p><p>在文件上传过程中打开内存工具<code>Memory</code>进行快照截取分析一个时刻的内存占用情况：</p><p><img src=\"/blogs/img/article/upload_memory.jpg\" alt=\"upload_memory.jpg\"></p><h4 id=\"第一次尝试解决问题：替换Antd-Table组件\"><a href=\"#第一次尝试解决问题：替换Antd-Table组件\" class=\"headerlink\" title=\"第一次尝试解决问题：替换Antd Table组件\"></a>第一次尝试解决问题：替换Antd Table组件</h4><p>在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！</p><h4 id=\"第二次尝试解决问题：改造Electron主进程同步阻塞代码\"><a href=\"#第二次尝试解决问题：改造Electron主进程同步阻塞代码\" class=\"headerlink\" title=\"第二次尝试解决问题：改造Electron主进程同步阻塞代码\"></a>第二次尝试解决问题：改造Electron主进程同步阻塞代码</h4><p>先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。</p><p><img src=\"/blogs/img/article/chromium.jpg\" alt=\"upload_memory.jpg\"></p><p>综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。</p><p>我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。</p><h4 id=\"第三次尝试解决问题：编写Node-js进程池分离上传任务管理逻辑\"><a href=\"#第三次尝试解决问题：编写Node-js进程池分离上传任务管理逻辑\" class=\"headerlink\" title=\"第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑\"></a>第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑</h4><p>这次是大改(苦笑脸~)，抱着学习的态度实现了Electron多进程池，主要逻辑是使用Node.js的<code>child_process</code>模块(具体使用请看<a href=\"http://nodejs.cn/api/child_process.html\" target=\"_blank\" rel=\"noopener\">文档</a>)创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，所有进程负载均匀分配。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> electron = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app, BrowserWindow, Menu, Tray, dialog &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; fork &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; EventEmitter &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getRandomString &#125; = <span class=\"built_in\">require</span>(path.join(app.getAppPath(), <span class=\"string\">'app/utils/utils'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * ChildProcessPool [进程池]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [用于创建进程的可执行文件]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>max [可创建的进程数量最大值]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>cwd [进程执行的起始目录]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>env [环境变量配置]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildProcessPool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; path, max=<span class=\"number\">6</span>, cwd, env &#125;)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cwd = cwd || <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.env = env || <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.inspectStartIndex = <span class=\"number\">5858</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pidMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collaborationMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forked = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkedPath = path;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkMaxIndex = max;</span><br><span class=\"line\">    <span class=\"comment\">// 子进程回调事件</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.on(<span class=\"string\">'fork-callback'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.collaborationMap.get(data.id) !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataRespondAll(data)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataRespond(data);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 子进程数据回调 */</span></span><br><span class=\"line\">  dataRespond = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.id &amp;&amp; <span class=\"keyword\">this</span>.callbacks[data.id]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[data.id](data.result);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.callbacks[data.id];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 所有子进程协同数据回调 */</span></span><br><span class=\"line\">  dataRespondAll = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultAll = <span class=\"keyword\">this</span>.collaborationMap.get(data.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data.id) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultAll !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.set(data.id, [...resultAll, data.result]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.set(data.id, [data.result]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resultAll = <span class=\"keyword\">this</span>.collaborationMap.get(data.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultAll.length === <span class=\"keyword\">this</span>.forked.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[data.id](resultAll);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.callbacks[data.id];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.delete(data.id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 从子进程池中获取一个进程 */</span></span><br><span class=\"line\">  getForkedFromPool(id=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> forked;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.pidMap.get(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.forked.length &lt; <span class=\"keyword\">this</span>.forkMaxIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inspectStartIndex ++;</span><br><span class=\"line\">        forked = fork(</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.forkedPath,</span><br><span class=\"line\">          <span class=\"comment\">// 开发环境下启动inspect进程远程调试端口</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.env.NODE_ENV === <span class=\"string\">\"development\"</span> ? [<span class=\"string\">`--inspect=<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.inspectStartIndex&#125;</span>`</span>] : [],</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            cwd: <span class=\"keyword\">this</span>.cwd,</span><br><span class=\"line\">            env: <span class=\"keyword\">this</span>.env,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forked.push(forked);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">        forked.on(<span class=\"string\">'message'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.event.emit(<span class=\"string\">'fork-callback'</span>, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pidMap.set(id, forked.pid);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex = <span class=\"keyword\">this</span>.forkIndex % <span class=\"keyword\">this</span>.forkMaxIndex;</span><br><span class=\"line\">        forked = <span class=\"keyword\">this</span>.forked[<span class=\"keyword\">this</span>.forkIndex];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pidMap.set(id, forked.pid);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      forked = <span class=\"keyword\">this</span>.forked.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.pid === <span class=\"keyword\">this</span>.pidMap.get(id))[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!forked) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Get forked process from pool failed! the process pid: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.pidMap.get(id)&#125;</span>.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> forked;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 向子进程发送请求 */</span></span><br><span class=\"line\">  send(params, givenId) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = givenId || getRandomString();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forked = <span class=\"keyword\">this</span>.getForkedFromPool(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[id] = resolve;</span><br><span class=\"line\">      forked.send(&#123;...params, id&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 向所有进程发送请求 */</span></span><br><span class=\"line\">  sendToAll(params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = getRandomString(); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[id] = resolve;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.set(id, []);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.forked.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forked.forEach(<span class=\"function\">(<span class=\"params\">forked</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          forked.send(&#123;...params, id&#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getForkedFromPool().send(&#123;...params, id&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = ChildProcessPool;</span><br></pre></td></tr></table></figure><ol><li><p>其中<code>send</code>和<code>sendToAll</code>方法，前者是向某个进程发送请求信号，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向所有进程池中的进程发送信号，并期望拿到所有进程返回的结果。</p></li><li><p>其中<code>dataRespond</code>和<code>dataRespondAll</code>方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果。</p></li><li><p><code>getForkedFromPool</code>方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用。</p></li><li><p><code>getForkedFromPool</code>方法中值得注意的是这行代码：<code>this.env.NODE_ENV === &quot;development&quot; ? [`--inspect=${this.inspectStartIndex}`] : []</code>，使用Node.js运行js脚本时加上<code>- -inspect=端口号</code> 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程，具体可以在浏览器输入地址：<code>chrome://inspect/#devices</code>然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字<code>Open dedicated DevTools for Node</code>就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！<br><img src=\"/blogs/img/article/inspect.jpg\" alt=\"upload_memory.jpg\"></p></li><li><p>另外创建进程池时传入的<code>path</code>参数即为以下脚本代码的绝对路径，这段文件上传逻辑被单独分离到子进程中处理，其中CPU耗时的操作为<code>uploadStore</code>函数块处理的部分，主要是维护整个文件上传列表，对上传任务列表进行增删查改操作；另外的频繁利用io读写文件的逻辑被封装到<code>fileBlock</code>函数块，不过都是异步IO读写，应该对性能影响不大，具体可以查看一下源码进行详细了解：<br><a href=\"https://github.com/NoJsJa/electron-react-template/blob/master/server/app/services/child/upload.js\" target=\"_blank\" rel=\"noopener\">源码</a></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsPromise = fs.promises;</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./child.utils'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> requireLang = <span class=\"built_in\">require</span>(<span class=\"string\">'../../lang'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; readFileBlock, uploadRecordStore, unlink &#125; = utils;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fileBlock = readFileBlock();</span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadStore = uploadRecordStore();</span><br><span class=\"line\">requireLang(process.env.LANG);</span><br><span class=\"line\"></span><br><span class=\"line\">process.on(<span class=\"string\">'message'</span>, (&#123;action, params, id &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'init-works'</span>:</span><br><span class=\"line\">      initWorks(params).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'upload-works'</span>:</span><br><span class=\"line\">      uploadWorks(params, id).then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'close'</span>:</span><br><span class=\"line\">      close(params, id).then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-set'</span>:</span><br><span class=\"line\">      uploadStore.set(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-get'</span>:</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: uploadStore.get(params), id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-get-all'</span>:</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: uploadStore.getAll(params), id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-update'</span>:</span><br><span class=\"line\">      uploadStore.update(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-remove'</span>:</span><br><span class=\"line\">      uploadStore.remove(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-reset'</span>: </span><br><span class=\"line\">      uploadStore.reset(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'unlink'</span>: </span><br><span class=\"line\">      unlink(params).then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 已省略</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"第四次尝试解决问题：重新审视渲染进程前端代码\"><a href=\"#第四次尝试解决问题：重新审视渲染进程前端代码\" class=\"headerlink\" title=\"第四次尝试解决问题：重新审视渲染进程前端代码\"></a>第四次尝试解决问题：重新审视渲染进程前端代码</h4><ul><li>很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。我摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。</li><li>在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数<code>refreshTasks</code>，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果<code>待上传文件列表的文件数量 = 设置的同时上传任务个数</code> 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致<code>refreshTasks</code>这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。</li><li>加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！</li></ul><p><img src=\"/blogs/img/article/refreshTasks.jpg\" alt=\"refreshTasks\"></p><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr><p><img src=\"/blogs/img/article/smb_upload_now.jpg\" alt=\"RhinoDisk\"></p><p>上一篇文章<a href=\"https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">《基于Electron的smb客户端开发记录》</a>，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的<code>文件分片上传模块</code>拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。</p><p>项目精简版<a href=\"https://github.com/NoJsJa/electron-react-template\" target=\"_blank\" rel=\"noopener\">DEMO</a></p><h3 id=\"Electron进程架构\"><a href=\"#Electron进程架构\" class=\"headerlink\" title=\"Electron进程架构\"></a>Electron进程架构</h3><hr><h4 id=\"主进程和渲染进程的区别\"><a href=\"#主进程和渲染进程的区别\" class=\"headerlink\" title=\"主进程和渲染进程的区别\"></a>主进程和渲染进程的区别</h4><p><img src=\"/blogs/img/article/electron1.png\" alt=\"electron\"></p><p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。<br>主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p><p>在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p><h4 id=\"主进程和渲染进程之间的通信\"><a href=\"#主进程和渲染进程之间的通信\" class=\"headerlink\" title=\"主进程和渲染进程之间的通信\"></a>主进程和渲染进程之间的通信</h4><ol><li><p>使用remote远程调用<br>remote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 渲染进程中(web端代码) */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>).remote</span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\">win.loadURL(<span class=\"string\">'https://github.com'</span>)</span><br></pre></td></tr></table></figure><p>注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用与主进程和渲染进程频繁通信的情况，否则会引起严重的程序性能问题。</p></li><li><p>使用ipc信号通信<br>基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 主进程 */</span></span><br><span class=\"line\">ipcMain.on(channel, listener) <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcMain.once(channel, listener) <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcMain.handle(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器</span></span><br><span class=\"line\">ipcMain.handleOnce(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听</span></span><br><span class=\"line\">browserWindow.webContents.send(channel, args); <span class=\"comment\">// 显式地向某个渲染进程发送信息 - 异步触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 渲染进程 */</span></span><br><span class=\"line\">ipcRenderer.on(channel, listener); <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.once(channel, listener); <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendSync(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 同步触发</span></span><br><span class=\"line\">ipcRenderer.invoke(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 返回Promise对象等待触发</span></span><br><span class=\"line\">ipcRenderer.sendTo(webContentsId, channel, ...args); <span class=\"comment\">// 向某个渲染进程发送消息 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendToHost(channel, ...args) <span class=\"comment\">// 向host页面的webview发送消息 - 异步触发</span></span><br></pre></td></tr></table></figure></li></ol><h3 id=\"文件上传架构\"><a href=\"#文件上传架构\" class=\"headerlink\" title=\"文件上传架构\"></a>文件上传架构</h3><hr><p>文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。</p><h4 id=\"文件上传源和上传目标\"><a href=\"#文件上传源和上传目标\" class=\"headerlink\" title=\"文件上传源和上传目标\"></a>文件上传源和上传目标</h4><ul><li><p>在用户界面上使用<code>Input</code>组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；</p></li><li><p>上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径<code>\\\\[host]\\[sharename]\\file1</code>上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows <code>UNC</code>命令。</p></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用unc命令连接远程smb共享 */</span></span><br><span class=\"line\">_uncCommandConnect_Windows_NT(&#123; host, username, pwd &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUse = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(commandUse).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: global.lang.upload.unc_connection_failed</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"上传流程概述\"><a href=\"#上传流程概述\" class=\"headerlink\" title=\"上传流程概述\"></a>上传流程概述</h4><p>下图描述了整个前端部分的控制逻辑：</p><p><img src=\"/blogs/img/article/shards_upload.jpg\" alt=\"upload\"></p><ol><li>页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)</li><li>缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息</li><li>页面调用init请求附带上选中的文件信息初始化文件上传任务</li><li>Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理</li><li>页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)</li><li>Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径</li><li>upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID</li><li>Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态</li><li>界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成</li><li>Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</li></ol><h4 id=\"Node-js实现的文件分片管理工厂\"><a href=\"#Node-js实现的文件分片管理工厂\" class=\"headerlink\" title=\"Node.js实现的文件分片管理工厂\"></a>Node.js实现的文件分片管理工厂</h4><ul><li>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；</li><li>文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；</li><li>文件上传完成的时候调用<code>close</code>关闭文件描述符；</li></ul><p>三个方法均通过文件绝对路径<code>path</code>参数建立关联：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"基于Electron的文件上传卡顿优化踩坑\"><a href=\"#基于Electron的文件上传卡顿优化踩坑\" class=\"headerlink\" title=\"基于Electron的文件上传卡顿优化踩坑\"></a>基于Electron的文件上传卡顿优化踩坑</h3><hr><p>优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就特别难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。</p><h4 id=\"使用Electron自带的Devtools进行性能分析\"><a href=\"#使用Electron自带的Devtools进行性能分析\" class=\"headerlink\" title=\"使用Electron自带的Devtools进行性能分析\"></a>使用Electron自带的Devtools进行性能分析</h4><p>在文件上传过程中打开性能检测工具<code>Performance</code>进行录制，分析整个流程：</p><p><img src=\"/blogs/img/article/upload_performance.jpg\" alt=\"upload_performance.jpg\"></p><p>在文件上传过程中打开内存工具<code>Memory</code>进行快照截取分析一个时刻的内存占用情况：</p><p><img src=\"/blogs/img/article/upload_memory.jpg\" alt=\"upload_memory.jpg\"></p><h4 id=\"第一次尝试解决问题：替换Antd-Table组件\"><a href=\"#第一次尝试解决问题：替换Antd-Table组件\" class=\"headerlink\" title=\"第一次尝试解决问题：替换Antd Table组件\"></a>第一次尝试解决问题：替换Antd Table组件</h4><p>在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！</p><h4 id=\"第二次尝试解决问题：改造Electron主进程同步阻塞代码\"><a href=\"#第二次尝试解决问题：改造Electron主进程同步阻塞代码\" class=\"headerlink\" title=\"第二次尝试解决问题：改造Electron主进程同步阻塞代码\"></a>第二次尝试解决问题：改造Electron主进程同步阻塞代码</h4><p>先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。</p><p><img src=\"/blogs/img/article/chromium.jpg\" alt=\"upload_memory.jpg\"></p><p>综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。</p><p>我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。</p><h4 id=\"第三次尝试解决问题：编写Node-js进程池分离上传任务管理逻辑\"><a href=\"#第三次尝试解决问题：编写Node-js进程池分离上传任务管理逻辑\" class=\"headerlink\" title=\"第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑\"></a>第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑</h4><p>这次是大改(苦笑脸~)，抱着学习的态度实现了Electron多进程池，主要逻辑是使用Node.js的<code>child_process</code>模块(具体使用请看<a href=\"http://nodejs.cn/api/child_process.html\" target=\"_blank\" rel=\"noopener\">文档</a>)创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，所有进程负载均匀分配。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> electron = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app, BrowserWindow, Menu, Tray, dialog &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; fork &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; EventEmitter &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getRandomString &#125; = <span class=\"built_in\">require</span>(path.join(app.getAppPath(), <span class=\"string\">'app/utils/utils'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * ChildProcessPool [进程池]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [用于创建进程的可执行文件]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>max [可创建的进程数量最大值]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>cwd [进程执行的起始目录]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>env [环境变量配置]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildProcessPool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; path, max=<span class=\"number\">6</span>, cwd, env &#125;)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cwd = cwd || <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.env = env || <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.inspectStartIndex = <span class=\"number\">5858</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pidMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collaborationMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forked = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkedPath = path;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkMaxIndex = max;</span><br><span class=\"line\">    <span class=\"comment\">// 子进程回调事件</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.on(<span class=\"string\">'fork-callback'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.collaborationMap.get(data.id) !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataRespondAll(data)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataRespond(data);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 子进程数据回调 */</span></span><br><span class=\"line\">  dataRespond = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.id &amp;&amp; <span class=\"keyword\">this</span>.callbacks[data.id]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[data.id](data.result);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.callbacks[data.id];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 所有子进程协同数据回调 */</span></span><br><span class=\"line\">  dataRespondAll = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultAll = <span class=\"keyword\">this</span>.collaborationMap.get(data.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data.id) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultAll !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.set(data.id, [...resultAll, data.result]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.set(data.id, [data.result]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resultAll = <span class=\"keyword\">this</span>.collaborationMap.get(data.id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultAll.length === <span class=\"keyword\">this</span>.forked.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[data.id](resultAll);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.callbacks[data.id];</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.delete(data.id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 从子进程池中获取一个进程 */</span></span><br><span class=\"line\">  getForkedFromPool(id=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> forked;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.pidMap.get(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.forked.length &lt; <span class=\"keyword\">this</span>.forkMaxIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inspectStartIndex ++;</span><br><span class=\"line\">        forked = fork(</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.forkedPath,</span><br><span class=\"line\">          <span class=\"comment\">// 开发环境下启动inspect进程远程调试端口</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.env.NODE_ENV === <span class=\"string\">\"development\"</span> ? [<span class=\"string\">`--inspect=<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.inspectStartIndex&#125;</span>`</span>] : [],</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            cwd: <span class=\"keyword\">this</span>.cwd,</span><br><span class=\"line\">            env: <span class=\"keyword\">this</span>.env,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forked.push(forked);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">        forked.on(<span class=\"string\">'message'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.event.emit(<span class=\"string\">'fork-callback'</span>, data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pidMap.set(id, forked.pid);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex = <span class=\"keyword\">this</span>.forkIndex % <span class=\"keyword\">this</span>.forkMaxIndex;</span><br><span class=\"line\">        forked = <span class=\"keyword\">this</span>.forked[<span class=\"keyword\">this</span>.forkIndex];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pidMap.set(id, forked.pid);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      forked = <span class=\"keyword\">this</span>.forked.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.pid === <span class=\"keyword\">this</span>.pidMap.get(id))[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!forked) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Get forked process from pool failed! the process pid: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.pidMap.get(id)&#125;</span>.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> forked;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 向子进程发送请求 */</span></span><br><span class=\"line\">  send(params, givenId) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = givenId || getRandomString();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forked = <span class=\"keyword\">this</span>.getForkedFromPool(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[id] = resolve;</span><br><span class=\"line\">      forked.send(&#123;...params, id&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 向所有进程发送请求 */</span></span><br><span class=\"line\">  sendToAll(params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = getRandomString(); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[id] = resolve;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.collaborationMap.set(id, []);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.forked.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forked.forEach(<span class=\"function\">(<span class=\"params\">forked</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          forked.send(&#123;...params, id&#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getForkedFromPool().send(&#123;...params, id&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = ChildProcessPool;</span><br></pre></td></tr></table></figure><ol><li><p>其中<code>send</code>和<code>sendToAll</code>方法，前者是向某个进程发送请求信号，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向所有进程池中的进程发送信号，并期望拿到所有进程返回的结果。</p></li><li><p>其中<code>dataRespond</code>和<code>dataRespondAll</code>方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果。</p></li><li><p><code>getForkedFromPool</code>方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用。</p></li><li><p><code>getForkedFromPool</code>方法中值得注意的是这行代码：<code>this.env.NODE_ENV === &quot;development&quot; ? [`--inspect=${this.inspectStartIndex}`] : []</code>，使用Node.js运行js脚本时加上<code>- -inspect=端口号</code> 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程，具体可以在浏览器输入地址：<code>chrome://inspect/#devices</code>然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字<code>Open dedicated DevTools for Node</code>就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！<br><img src=\"/blogs/img/article/inspect.jpg\" alt=\"upload_memory.jpg\"></p></li><li><p>另外创建进程池时传入的<code>path</code>参数即为以下脚本代码的绝对路径，这段文件上传逻辑被单独分离到子进程中处理，其中CPU耗时的操作为<code>uploadStore</code>函数块处理的部分，主要是维护整个文件上传列表，对上传任务列表进行增删查改操作；另外的频繁利用io读写文件的逻辑被封装到<code>fileBlock</code>函数块，不过都是异步IO读写，应该对性能影响不大，具体可以查看一下源码进行详细了解：<br><a href=\"https://github.com/NoJsJa/electron-react-template/blob/master/server/app/services/child/upload.js\" target=\"_blank\" rel=\"noopener\">源码</a></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsPromise = fs.promises;</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./child.utils'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> requireLang = <span class=\"built_in\">require</span>(<span class=\"string\">'../../lang'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; readFileBlock, uploadRecordStore, unlink &#125; = utils;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fileBlock = readFileBlock();</span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadStore = uploadRecordStore();</span><br><span class=\"line\">requireLang(process.env.LANG);</span><br><span class=\"line\"></span><br><span class=\"line\">process.on(<span class=\"string\">'message'</span>, (&#123;action, params, id &#125;) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'init-works'</span>:</span><br><span class=\"line\">      initWorks(params).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'upload-works'</span>:</span><br><span class=\"line\">      uploadWorks(params, id).then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'close'</span>:</span><br><span class=\"line\">      close(params, id).then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-set'</span>:</span><br><span class=\"line\">      uploadStore.set(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-get'</span>:</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: uploadStore.get(params), id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-get-all'</span>:</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: uploadStore.getAll(params), id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-update'</span>:</span><br><span class=\"line\">      uploadStore.update(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-remove'</span>:</span><br><span class=\"line\">      uploadStore.remove(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'record-reset'</span>: </span><br><span class=\"line\">      uploadStore.reset(params);</span><br><span class=\"line\">      process.send(&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>, id&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'unlink'</span>: </span><br><span class=\"line\">      unlink(params).then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123;<span class=\"attr\">result</span>: rsp, id&#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 已省略</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li></ol><h4 id=\"第四次尝试解决问题：重新审视渲染进程前端代码\"><a href=\"#第四次尝试解决问题：重新审视渲染进程前端代码\" class=\"headerlink\" title=\"第四次尝试解决问题：重新审视渲染进程前端代码\"></a>第四次尝试解决问题：重新审视渲染进程前端代码</h4><ul><li>很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。我摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。</li><li>在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数<code>refreshTasks</code>，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果<code>待上传文件列表的文件数量 = 设置的同时上传任务个数</code> 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致<code>refreshTasks</code>这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。</li><li>加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！</li></ul><p><img src=\"/blogs/img/article/refreshTasks.jpg\" alt=\"refreshTasks\"></p><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckba8cy9f00015495fo874lhe","category_id":"ckbag369m0000ct953vhx5d2d","_id":"ckbag369p0002ct956chka8qp"},{"post_id":"ckba8cy9f00015495fo874lhe","category_id":"ckbag369o0001ct95elga18d7","_id":"ckbag369p0003ct957nwr30ds"},{"post_id":"ckba8cy9g00035495f9a416ly","category_id":"ckbag369m0000ct953vhx5d2d","_id":"ckbag3lg00006ct950676gc9t"},{"post_id":"ckba8cya400135495fk5k1f4c","category_id":"ckbag369m0000ct953vhx5d2d","_id":"ckbag3lg70008ct952ydk6z4z"},{"post_id":"ckba8cy9w000u5495atju3svm","category_id":"ckbag3lfz0005ct955kov8vwh","_id":"ckbag3lg9000act95fsseanvk"},{"post_id":"ckba8cy9y000w549541ukgdcm","category_id":"ckbag3lfz0005ct955kov8vwh","_id":"ckbag3lga000bct956nd3bjgr"},{"post_id":"ckba8cya300115495b68r7bwk","category_id":"ckbag3lfz0005ct955kov8vwh","_id":"ckbag3lgb000dct95a10ogcxd"},{"post_id":"ckba8cya2000z5495gtwe9zc4","category_id":"ckbag3lg30007ct95eh3afdzg","_id":"ckbag3lgb000ect95d9510dk6"},{"post_id":"ckba8cy9h000454953gec62gg","category_id":"ckbag3lfz0005ct955kov8vwh","_id":"ckbag3lgb000fct959jpgfxnu"},{"post_id":"ckba8cya5001654950um8h3vt","category_id":"ckbag3lg70009ct950m4cdmtz","_id":"ckbag3lgb000gct95b6jt73e4"},{"post_id":"ckba8cy9u000p5495711r7b1p","category_id":"ckbag3lga000cct953dkafzl4","_id":"ckbag3lgb000hct95bn0o0wuo"},{"post_id":"ckba8cya400145495dy5jb0qv","category_id":"ckbag369m0000ct953vhx5d2d","_id":"ckbag3lgm000ict95fneebg7r"},{"post_id":"ckba8cy9s000m5495ghl6ah39","category_id":"ckbag3lfz0005ct955kov8vwh","_id":"ckbag3lgn000kct95480q6khd"},{"post_id":"ckba8cya6001754953msygn6g","category_id":"ckbag369m0000ct953vhx5d2d","_id":"ckbag3lgp000lct95bu4041xi"},{"post_id":"ckba8cy9v000q5495cmjc3rcc","category_id":"ckbag3lfz0005ct955kov8vwh","_id":"ckbag3lgp000nct955xy6ezi0"},{"post_id":"ckba8cy9v000r5495arr4by3e","category_id":"ckbag3lgp000mct959740913n","_id":"ckbag3lgq000pct9517re1s18"},{"post_id":"ckba8cy9t000n5495bagp5ef5","category_id":"ckbag3lgm000jct95b66dee2o","_id":"ckbag3lgq000qct954w449i9q"},{"post_id":"ckba8cy9t000n5495bagp5ef5","category_id":"ckbag3lgq000oct959y2h7p3l","_id":"ckbag3lgq000rct954glv4my8"},{"post_id":"ckdwniq7k00080gi0gf8a2zgq","category_id":"ckbag3lga000cct953dkafzl4","_id":"cke2c8f3p000adn9577g54dqd"},{"post_id":"ckdx1lgjn0000u4i01v2d9xfk","category_id":"ckbag3lga000cct953dkafzl4","_id":"cke2c8f3q000ddn957knp41vl"},{"post_id":"ckba8cy9d000054959iqpg7oc","category_id":"ckbag369m0000ct953vhx5d2d","_id":"cke9ch9xj0002sz95828u4jlm"}],"PostTag":[{"post_id":"ckdx1lgjn0000u4i01v2d9xfk","tag_id":"ckdwnlx1f000m0gi0gme9hwi6","_id":"cke0ydeap0003l395fov9279l"},{"post_id":"ckba8cy9s000m5495ghl6ah39","tag_id":"cke2c8f350000dn95bf7ce47s","_id":"cke2c8f3k0004dn95e98pbe7d"},{"post_id":"ckba8cy9s000m5495ghl6ah39","tag_id":"cke2c8f3c0001dn95501baad4","_id":"cke2c8f3l0005dn95atz5b4al"},{"post_id":"ckba8cy9s000m5495ghl6ah39","tag_id":"cke2c8f3e0002dn955mgk4db0","_id":"cke2c8f3m0007dn956wdb0mls"},{"post_id":"ckdwniq7k00080gi0gf8a2zgq","tag_id":"cke0ydean0002l3953fzu9tr2","_id":"cke2c8f3o0009dn954gf68im6"},{"post_id":"ckdx1lgjn0000u4i01v2d9xfk","tag_id":"cke0ydean0002l3953fzu9tr2","_id":"cke2c8f3q000cdn950t44etwc"},{"post_id":"ckba8cy9t000n5495bagp5ef5","tag_id":"cke2c8f3h0003dn95b9qabaeg","_id":"cke2c8f3v000fdn957t0maevd"},{"post_id":"ckba8cy9t000n5495bagp5ef5","tag_id":"cke2c8f3l0006dn9571rrfetk","_id":"cke2c8f3w000hdn95555b5yrd"},{"post_id":"ckba8cy9t000n5495bagp5ef5","tag_id":"cke2c8f3n0008dn952ebwb4oj","_id":"cke2c8f3w000idn95hzaabrnj"},{"post_id":"ckba8cy9t000n5495bagp5ef5","tag_id":"cke2c8f3p000bdn956dnk2acy","_id":"cke2c8f3x000kdn957t23hntg"},{"post_id":"ckba8cy9u000p5495711r7b1p","tag_id":"cke2c8f3h0003dn95b9qabaeg","_id":"cke2c8f3y000ndn95405k6jcg"},{"post_id":"ckba8cy9u000p5495711r7b1p","tag_id":"cke2c8f3l0006dn9571rrfetk","_id":"cke2c8f3y000pdn955fae5hac"},{"post_id":"ckba8cy9u000p5495711r7b1p","tag_id":"cke2c8f3p000bdn956dnk2acy","_id":"cke2c8f3y000sdn95cyg84uh4"},{"post_id":"ckba8cy9v000q5495cmjc3rcc","tag_id":"cke2c8f3x000mdn95d23pal1g","_id":"cke2c8f3y000tdn95doj62wgm"},{"post_id":"ckba8cy9v000r5495arr4by3e","tag_id":"cke2c8f3y000odn95b6lt7v3l","_id":"cke2c8f3z000xdn9506b22ewt"},{"post_id":"ckba8cy9v000r5495arr4by3e","tag_id":"cke2c8f3l0006dn9571rrfetk","_id":"cke2c8f40000zdn957m43ekro"},{"post_id":"ckba8cy9w000u5495atju3svm","tag_id":"cke2c8f350000dn95bf7ce47s","_id":"cke2c8f400010dn9567qv05qa"},{"post_id":"ckba8cy9w000u5495atju3svm","tag_id":"cke2c8f3y000udn95fva7bbfm","_id":"cke2c8f400012dn954qaq575r"},{"post_id":"ckba8cya2000z5495gtwe9zc4","tag_id":"cke2c8f3z000vdn9565v8082c","_id":"cke2c8f400013dn953lufg0e7"},{"post_id":"ckba8cya2000z5495gtwe9zc4","tag_id":"cke2c8f3z000wdn95co4v4kys","_id":"cke2c8f400014dn950n65eqv1"},{"post_id":"ckba8cy9y000w549541ukgdcm","tag_id":"cke2c8f40000ydn9503lycrzl","_id":"cke2c8f410018dn955kdmbouw"},{"post_id":"ckba8cy9y000w549541ukgdcm","tag_id":"cke2c8f400011dn95a3s5gv4v","_id":"cke2c8f420019dn95dunjb7fj"},{"post_id":"ckba8cya300115495b68r7bwk","tag_id":"cke2c8f400011dn95a3s5gv4v","_id":"cke2c8f42001cdn95bezjcbf7"},{"post_id":"ckba8cya300115495b68r7bwk","tag_id":"cke2c8f40000ydn9503lycrzl","_id":"cke2c8f42001ddn95afr86qio"},{"post_id":"ckba8cya400135495fk5k1f4c","tag_id":"cke2c8f410017dn956q4hhawc","_id":"cke2c8f42001fdn95gbdkhp20"},{"post_id":"ckba8cya400145495dy5jb0qv","tag_id":"cke2c8f42001adn957vzefj6j","_id":"cke2c8f43001hdn95536ahv8i"},{"post_id":"ckba8cya400145495dy5jb0qv","tag_id":"cke2c8f3h0003dn95b9qabaeg","_id":"cke2c8f43001idn952ygi7fgy"},{"post_id":"ckba8cya5001654950um8h3vt","tag_id":"cke2c8f42001bdn95g2w5cq9w","_id":"cke2c8f44001mdn95ao8o7iw6"},{"post_id":"ckba8cya5001654950um8h3vt","tag_id":"cke2c8f42001edn956uulg75c","_id":"cke2c8f44001ndn95c2il0s4q"},{"post_id":"ckba8cya6001754953msygn6g","tag_id":"cke2c8f410017dn956q4hhawc","_id":"cke2c8f45001tdn952y1q3zgw"},{"post_id":"ckba8cy9f00015495fo874lhe","tag_id":"ckdwnlx1f000m0gi0gme9hwi6","_id":"cke2c8f45001udn9583mi4u8v"},{"post_id":"ckba8cy9f00015495fo874lhe","tag_id":"cke2c8f44001ldn9591wr2p8s","_id":"cke2c8f45001vdn951ckgd69c"},{"post_id":"ckba8cy9g00035495f9a416ly","tag_id":"cke2c8f44001odn952rlj92n5","_id":"cke2c8f45001wdn950nuufask"},{"post_id":"ckba8cy9h000454953gec62gg","tag_id":"cke2c8f3x000mdn95d23pal1g","_id":"cke2c8f45001xdn95gypfc3rb"},{"post_id":"ckba8cy9u000p5495711r7b1p","tag_id":"cke2c8f3n0008dn952ebwb4oj","_id":"cke2eyqnc00001f956jqn30wv"},{"post_id":"ckba8cy9d000054959iqpg7oc","tag_id":"ckdwnlx1f000m0gi0gme9hwi6","_id":"cke9ch9xi0000sz95d78o0xsy"},{"post_id":"ckba8cy9d000054959iqpg7oc","tag_id":"cke2c8f43001gdn950vt5782e","_id":"cke9ch9xj0001sz956lhj3pa7"},{"post_id":"ckba8cy9d000054959iqpg7oc","tag_id":"cke2c8f43001jdn950f6lbscy","_id":"cke9ch9xj0003sz956ril6qux"}],"Tag":[{"name":"hexo-theme-snail","_id":"ckba5wfo60005sz95294r4f8d"},{"name":"FileUpload","_id":"ckba8cy9g000254957ez6dmlr"},{"name":"AWS","_id":"ckba8cy9i000554956muk3hyl"},{"name":"S3","_id":"ckba8cy9i00065495epzzf9dg"},{"name":"Node","_id":"ckba8cy9j000a5495g9amd9dg"},{"name":"FS","_id":"ckba8cy9k000c54958rxpfdcl"},{"name":"Animation","_id":"ckba8cy9k000d54956nv2a6o8"},{"name":"Linux","_id":"ckba8cy9l000g54952xw4fr97"},{"name":"Ubuntu18.04","_id":"ckba8cy9l000j5495baesedxg"},{"name":"Docker","_id":"ckba8cy9t000o54959c876oqn"},{"name":"ES6","_id":"ckba8cy9w000s54958351c23y"},{"name":"React","_id":"ckba8cya1000x54952p0g4o7p"},{"name":"Mobx","_id":"ckba8cya300125495g1li87v3"},{"name":"Electron","_id":"ckba8cya50015549523g66uyd"},{"name":"Echarts","_id":"ckba8cya9001g54959kakf211"},{"name":"Mint","_id":"ckba8cyaa001m5495aqaib0l4"},{"name":"Proxy","_id":"ckba8cyab001p54954ow03t1u"},{"name":"Shadowsocks","_id":"ckba8cyab001s5495cfhbd8zv"},{"name":"Sass","_id":"ckba8cyac001t54953jjmh6dx"},{"name":"Css","_id":"ckba8cyac001w54951m350h8o"},{"name":"Javascript","_id":"ckba8cyad002154959k436vr1"},{"name":"WaterFall","_id":"ckba8cyad002454954wwn2q73"},{"name":"Promise","_id":"ckba8cyae00255495guvk6r9l"},{"name":"Browser","_id":"ckba8cyae002854952w82amfc"},{"name":"Tools","_id":"ckba8cyaf002b5495eufj6ut4"},{"name":"ES5","_id":"ckba8cyaf002f54954hsw4p0e"},{"name":"SMB","_id":"ckc5wvhhf00025a953skj65hj"},{"name":"SMB upload","_id":"ckdwnls28000k0gi0ao4j3ugb"},{"name":"upload","_id":"ckdwnlx1f000m0gi0gme9hwi6"},{"name":"upload smb","_id":"cke0yd7af0000l3958f8behmg"},{"name":"smb","_id":"cke0ydean0002l3953fzu9tr2"},{"name":"linux","_id":"cke2c8f350000dn95bf7ce47s"},{"name":"docker","_id":"cke2c8f3c0001dn95501baad4"},{"name":"desktop","_id":"cke2c8f3e0002dn955mgk4db0"},{"name":"es6","_id":"cke2c8f3h0003dn95b9qabaeg"},{"name":"react","_id":"cke2c8f3l0006dn9571rrfetk"},{"name":"mobx","_id":"cke2c8f3n0008dn952ebwb4oj"},{"name":"electron","_id":"cke2c8f3p000bdn956dnk2acy"},{"name":"bobx","_id":"cke2c8f3w000jdn95dgpsbuij"},{"name":"ubuntu18.04","_id":"cke2c8f3x000mdn95d23pal1g"},{"name":"echarts","_id":"cke2c8f3y000odn95b6lt7v3l"},{"name":"mint","_id":"cke2c8f3y000udn95fva7bbfm"},{"name":"sass","_id":"cke2c8f3z000vdn9565v8082c"},{"name":"css","_id":"cke2c8f3z000wdn95co4v4kys"},{"name":"proxy","_id":"cke2c8f40000ydn9503lycrzl"},{"name":"shadowsocks","_id":"cke2c8f400011dn95a3s5gv4v"},{"name":"javascript","_id":"cke2c8f410017dn956q4hhawc"},{"name":"promise","_id":"cke2c8f42001adn957vzefj6j"},{"name":"browser","_id":"cke2c8f42001bdn95g2w5cq9w"},{"name":"tools","_id":"cke2c8f42001edn956uulg75c"},{"name":"aws","_id":"cke2c8f43001gdn950vt5782e"},{"name":"s3","_id":"cke2c8f43001jdn950f6lbscy"},{"name":"node","_id":"cke2c8f44001ldn9591wr2p8s"},{"name":"animation","_id":"cke2c8f44001odn952rlj92n5"}]}}